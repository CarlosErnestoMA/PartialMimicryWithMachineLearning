(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1741963,      30948]
NotebookOptionsPosition[   1732722,      30781]
NotebookOutlinePosition[   1733232,      30800]
CellTagsIndexPosition[   1733189,      30797]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Training the spider-or-not classifier", "Title",
 CellChangeTimes->{{3.869369407563918*^9, 3.8693694247436657`*^9}, {
  3.882935454757908*^9, 
  3.8829354797620487`*^9}},ExpressionUUID->"2ee39ae3-64f3-4f57-b5b3-\
4cc62cf09509"],

Cell["\<\
This notebook contains the code used for training a neural network to \
classify images of arthropods into the categories \
\[OpenCurlyDoubleQuote]Spider\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]Non-spider\[CloseCurlyDoubleQuote].\
\>", "Text",
 CellChangeTimes->{{3.869369428037179*^9, 3.869369583050308*^9}, {
   3.869369624577154*^9, 3.869369625599476*^9}, {3.8693712735925007`*^9, 
   3.86937127585988*^9}, 3.872218384987567*^9, {3.872218420732236*^9, 
   3.8722184575368567`*^9}, {3.8829354843107986`*^9, 
   3.8829354874910393`*^9}},ExpressionUUID->"e4697f75-46e1-451d-9fb6-\
0f122a68429c"],

Cell[CellGroupData[{

Cell["Notes on running this code:", "Subsubsection",
 CellChangeTimes->{{3.869369615419458*^9, 3.869369629048629*^9}, {
  3.882330704781115*^9, 
  3.882330710128769*^9}},ExpressionUUID->"7ada3b73-9408-49eb-b43b-\
fc15a1691c0e"],

Cell["\<\
The initialization cells (grey cells) are automatically run when accepting a \
prompt asking if you want all initialization cells run after running any cell \
in the notebook for the first time. The code in those cells prepare the \
training and validation sets. After those are run you can jump to the section \
\[OpenCurlyDoubleQuote]Use transfer learning to train the network\
\[CloseCurlyDoubleQuote] and follow the instructions there.\
\>", "Item",
 CellChangeTimes->{{3.869369630801619*^9, 3.869369638065475*^9}, {
  3.869369672281004*^9, 3.869369852141518*^9}, {3.869570384415448*^9, 
  3.869570486019579*^9}, {3.88233032990839*^9, 3.882330347075248*^9}, {
  3.882330436484817*^9, 
  3.882330442163711*^9}},ExpressionUUID->"89e84d92-41a8-4d98-844e-\
91c843e0c472"],

Cell["\<\
To ensure reproducibility, all code cells containing a function that uses \
randomness, the random number generator is re-set using a pre-generated \
random number as a seed.\
\>", "Item",
 CellChangeTimes->{{3.869369630801619*^9, 3.869369638065475*^9}, {
  3.869369672281004*^9, 3.869369852141518*^9}, {3.869570384415448*^9, 
  3.869570486019579*^9}, {3.88233032990839*^9, 3.882330347075248*^9}, {
  3.882330436484817*^9, 3.882330465129302*^9}, {3.882330599914462*^9, 
  3.882330698441113*^9}, {3.8823313590508423`*^9, 3.8823313692643013`*^9}, {
  3.882935501045426*^9, 
  3.882935594207708*^9}},ExpressionUUID->"716bd220-4c7d-48ff-ad0f-\
c742e3e8b48b"],

Cell["\<\
The system OS and Mathematica version in which this code was run is\
\>", "Item",
 CellChangeTimes->{
  3.882330700588292*^9, {3.8823309016390676`*^9, 3.88233090278477*^9}, {
   3.882330957353691*^9, 
   3.8823310053603077`*^9}},ExpressionUUID->"77661651-6cbf-43bc-ad92-\
65967ac1efae"],

Cell["\<\
OperatingSystem: Unix
System: Linux x86 (64-bit)
Mathematica version: 13.1.0 for Linux x86 (64-bit) (June 16, 2022)\
\>", "Text",
 CellChangeTimes->{{3.882331049109065*^9, 
  3.8823311100449543`*^9}},ExpressionUUID->"ecaf77fc-4389-4f3c-af45-\
9bc023271e9d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"{", 
   RowBox[{"$OperatingSystem", ",", "$System", ",", "$Version"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8823310115156193`*^9, 3.88233109745387*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"342fdb64-3c51-4671-a058-3846ba136984"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"Unix\"\>"},
    {"\<\"Linux x86 (64-bit)\"\>"},
    {"\<\"13.1.0 for Linux x86 (64-bit) (June 16, 2022)\"\>"}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.8823310165180893`*^9, 3.882331097749613*^9}, 
   3.884234681158208*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"194365fe-761e-473c-a25d-5be3db4a66b9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training images", "Section",
 CellChangeTimes->{{3.888214531594461*^9, 
  3.8882145335319767`*^9}},ExpressionUUID->"7e670bba-97c7-440e-a34e-\
f4c551a65b3d"],

Cell["\<\
These are in both the GitHub and Zenodo datasets in compressed format. You \
can uncompress them manually, or run the following code:\
\>", "Text",
 CellChangeTimes->{{3.887344372328776*^9, 3.887344391108172*^9}, {
  3.887344470938004*^9, 
  3.887344498345701*^9}},ExpressionUUID->"4af904df-621a-4097-838d-\
16789adbb903"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExtractArchive", "[", 
   RowBox[{
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{"dataDirectory", ",", "\"\<TrainingImages.zip\>\""}], "}"}], 
     "]"}], ",", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", "dataDirectory", "}"}], "]"}], ",", 
    RowBox[{"CreateIntermediateDirectories", "->", "True"}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.888213328546678*^9, 3.888213413860888*^9}, 
   3.888213598807993*^9},
 CellLabel->"In[82]:=",ExpressionUUID->"99e4d6b6-5df9-4d79-8387-b66aa43342b4"],

Cell["\<\
Check that the training images have the directories for Spider and NonSpider, \
and each one contains a list of image file names:\
\>", "Text",
 CellChangeTimes->{{3.888213420951189*^9, 
  3.888213448610476*^9}},ExpressionUUID->"50b85cab-a25c-4d36-921d-\
d4daca54ce25"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"FileNames", "[", 
   RowBox[{"\"\<*\>\"", ",", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "dataDirectory", ",", "\"\<TrainingImages\>\"", ",", 
       "\"\<NonSpider\>\""}], "}"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.888213450412455*^9, 3.888213507447801*^9}, {
  3.888213567289352*^9, 3.88821358057321*^9}, {3.888213610877172*^9, 
  3.8882136781748533`*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"68aee029-7a20-42c0-8f67-e9bdff99895b"],

Cell[BoxData["749"], "Output",
 CellChangeTimes->{{3.888213503237844*^9, 3.888213527350018*^9}, {
   3.888213568261241*^9, 3.8882135808594913`*^9}, {3.88821361516259*^9, 
   3.8882136784728947`*^9}, 3.888214579233678*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"8049a5f4-9af3-449a-8e3e-fec9253154c5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "@", 
  RowBox[{"FileNames", "[", 
   RowBox[{"\"\<*\>\"", ",", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
      "dataDirectory", ",", "\"\<TrainingImages\>\"", ",", "\"\<Spider\>\""}],
       "}"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.888213450412455*^9, 3.888213507447801*^9}, {
  3.888213567289352*^9, 3.88821358057321*^9}, {3.888213610877172*^9, 
  3.888213675858735*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"e5f141d5-4843-44ad-a555-7640034094d5"],

Cell[BoxData["273"], "Output",
 CellChangeTimes->{{3.888213658135302*^9, 3.888213676177319*^9}, 
   3.888214579943138*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"3dcad06c-ddfe-476f-9520-787633698406"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialization", "Section",
 CellChangeTimes->{{3.8693689982051897`*^9, 3.869369000182295*^9}, {
  3.8715278329356117`*^9, 
  3.871527833498103*^9}},ExpressionUUID->"0d67828b-d9aa-4847-831e-\
15b789c6c117"],

Cell[CellGroupData[{

Cell["Images for training", "Subsubsection",
 CellChangeTimes->{{3.8568804008962727`*^9, 
  3.856880407601225*^9}},ExpressionUUID->"21bf90d4-0405-431d-99c9-\
ab9945f9ef32"],

Cell[TextData[{
 StyleBox["imageDir",
  FontWeight->"Bold"],
 " should have three subdirectories,  \[OpenCurlyDoubleQuote]Spiders\
\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]NonSpiders\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Mimics\
\[CloseCurlyDoubleQuote]. The images in \[OpenCurlyDoubleQuote]Spiders\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]NonSpiders\
\[CloseCurlyDoubleQuote] are going to be used for training, and the images in \
\[OpenCurlyDoubleQuote]Mimics\[CloseCurlyDoubleQuote] are used to explore how \
the trained network responds to mimics."
}], "Text",
 CellChangeTimes->{{3.866637989866701*^9, 3.866638022221841*^9}, {
   3.8693690269269133`*^9, 3.869369160719617*^9}, {3.8693692875116577`*^9, 
   3.869369357612776*^9}, 
   3.8823318881499166`*^9},ExpressionUUID->"64a68942-0970-452f-8d2f-\
9655c68cc063"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"projectDir", " ", "=", " ", 
   RowBox[{"DirectoryName", "@", 
    RowBox[{"NotebookDirectory", "[", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"imageDir", " ", "=", " ", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
     "projectDir", ",", "\"\<Data\>\"", ",", "\"\<TrainingImages\>\""}], 
     "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"spiderFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*\>\"", ",", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"imageDir", ",", "\"\<Spider\>\""}], "}"}], "]"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nonspiderFiles", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{"\"\<*\>\"", ",", 
     RowBox[{"FileNameJoin", "[", 
      RowBox[{"{", 
       RowBox[{"imageDir", ",", "\"\<NonSpider\>\""}], "}"}], "]"}]}], 
    "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.856789331320079*^9, 3.8567894108434477`*^9}, {
   3.8568804536417913`*^9, 3.856880472605019*^9}, 3.8569387809517736`*^9, 
   3.856940706505713*^9, {3.8664620376755753`*^9, 3.866462053118438*^9}, {
   3.866558257525733*^9, 3.8665582817796917`*^9}, {3.875898265106786*^9, 
   3.8758982915214643`*^9}, {3.878048346514223*^9, 3.878048349033708*^9}, {
   3.878048394790627*^9, 3.878048400594078*^9}, {3.882331903019209*^9, 
   3.882331932687573*^9}, {3.882332002109406*^9, 3.882332050061255*^9}, {
   3.882590752993848*^9, 3.882590753429016*^9}, 3.8882146153093987`*^9},
 CellLabel->"In[14]:=",ExpressionUUID->"04b11a98-febb-4167-b2e0-edebbe0e27ac"],

Cell[CellGroupData[{

Cell["View the amount of images in each category", "Item",
 CellChangeTimes->{{3.86936958908489*^9, 3.869369610851474*^9}, {
  3.870484450516214*^9, 
  3.870484456271109*^9}},ExpressionUUID->"e90a81dd-91ff-4c27-b871-\
1cb8e5f3a8d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "/@", 
  RowBox[{"{", 
   RowBox[{"spiderFiles", ",", "nonspiderFiles"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8567894195976152`*^9, 3.856789422007606*^9}, {
   3.856880432762762*^9, 3.856880450554587*^9}, 3.866462071007802*^9, {
   3.882590828067691*^9, 3.882590828280959*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"4937d6d4-4956-4928-a31d-9ddaaa3ffc1b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"273", ",", "749"}], "}"}]], "Output",
 CellChangeTimes->{
  3.856789422407793*^9, 3.85688126920653*^9, 3.8569387906485023`*^9, 
   3.856938891490981*^9, 3.856938963303999*^9, 3.85694071364536*^9, 
   3.866462071755065*^9, 3.866558356878044*^9, 3.866638025448124*^9, 
   3.869369364837278*^9, 3.8758982966886*^9, 3.876460542205134*^9, 
   3.878048382040717*^9, 3.878048418966111*^9, 3.8823320610716*^9, 
   3.882590838566753*^9, 3.884234690562251*^9, 3.886130651203566*^9, {
   3.888214602053586*^9, 3.888214619014694*^9}},
 CellLabel->"Out[94]=",ExpressionUUID->"8c97eb03-1d67-4ecf-aa1f-b9938d50aca9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assign categories to training data", "Subsubsection",
 CellChangeTimes->{{3.8567898546620197`*^9, 
  3.8567898611623993`*^9}},ExpressionUUID->"9e3df6d8-93ac-4395-9523-\
06164afa0b4f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"randomSplit", "::", "usage"}], " ", "=", " ", 
   "\"\<randomSplit[list, point] pseudorandomly splits list into two smaller \
lists. The split is done at the position given by point.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"randomSplit", "[", 
   RowBox[{"list_", ",", " ", "point_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"splitPosition", ",", "randomList"}], "}"}], ",", 
    "\[IndentingNewLine]", "\t", 
    RowBox[{
     RowBox[{"splitPosition", "=", 
      RowBox[{"Floor", "[", 
       RowBox[{
        RowBox[{"Length", "[", "list", "]"}], "*", "point"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"randomList", "=", 
      RowBox[{"RandomSample", "[", "list", "]"}]}], ";", 
     "\[IndentingNewLine]", "\t", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"randomList", "[", 
        RowBox[{"[", 
         RowBox[{";;", "splitPosition"}], "]"}], "]"}], ",", " ", 
       RowBox[{"randomList", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"splitPosition", "+", "1"}], ";;"}], "]"}], "]"}]}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Code",
 CellChangeTimes->{{3.856789589633689*^9, 3.85678979303384*^9}, {
   3.8693702519572487`*^9, 3.869370259588089*^9}, 3.869370341852009*^9, {
   3.8693703927499437`*^9, 3.8693703994984426`*^9}, {3.869370452730174*^9, 
   3.869370704710004*^9}, {3.870484469139427*^9, 3.870484502786324*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"4996694c-14fe-4e20-a9f2-5a955bf79ef6"],

Cell["\<\
Randomly assign images into a training and a validation set, where the \
training set contains 90% of the full data, and the validation set contains \
the remaining images.
Note that mimics are categorized as a NonSpider.\
\>", "Text",
 CellChangeTimes->{{3.8568805682082663`*^9, 3.856880637644034*^9}, {
  3.866558401674921*^9, 3.866558499391109*^9}, {3.869370267862898*^9, 
  3.8693703902984467`*^9}, {3.869370774573825*^9, 3.8693708404320803`*^9}, {
  3.870484516866693*^9, 
  3.870484518587598*^9}},ExpressionUUID->"ea722a9b-6a19-415e-8203-\
abb24fff7c14"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "547319", "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Create", " ", "lists", " ", "in", " ", "the", " ", "form", " ", 
     "ImageFile"}], "->", "Category"}], " ", "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"spiderFilesClassified", " ", "=", " ", 
   RowBox[{"Thread", "[", 
    RowBox[{"Rule", "[", 
     RowBox[{
      RowBox[{"File", "/@", "spiderFiles"}], ",", " ", "\"\<Spider\>\""}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"nonspiderFilesClassified", " ", "=", " ", 
    RowBox[{"Thread", "[", 
     RowBox[{"Rule", "[", 
      RowBox[{
       RowBox[{"File", "/@", "nonspiderFiles"}], ",", " ", 
       "\"\<NonSpider\>\""}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Randomly", " ", "split", " ", "the", " ", "spider", " ", "and", " ", 
     "non"}], "-", 
    RowBox[{
    "spider", " ", "categories", " ", "into", " ", "the", " ", "training", 
     " ", "and", " ", "validation", " ", "sets"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"spiderTraining", ",", " ", "spiderValidation"}], "}"}], " ", "=",
    " ", 
   RowBox[{"randomSplit", "[", 
    RowBox[{"spiderFilesClassified", ",", " ", ".9"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"nonspiderTraining", ",", " ", "nonspiderValidation"}], "}"}], 
    " ", "=", " ", 
    RowBox[{"randomSplit", "[", 
     RowBox[{"nonspiderFilesClassified", ",", " ", ".9"}], "]"}]}], ";"}], 
  "\n", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Join", " ", "the", " ", "spider", " ", "and", " ", "non", " ", "spider", 
    " ", "training", " ", "and", " ", "validation", " ", "sets"}], " ", 
   "*)"}]}], "\n", 
 RowBox[{
  RowBox[{"trainingSet", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"nonspiderTraining", ",", "spiderTraining"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationSet", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"nonspiderValidation", ",", "spiderValidation"}], "]"}]}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.856790278467629*^9, 3.856790335115589*^9}, {
   3.856790378416061*^9, 3.85679037987114*^9}, {3.8568805230932007`*^9, 
   3.856880542110244*^9}, {3.856938902867117*^9, 3.856938929266921*^9}, {
   3.866462098481226*^9, 3.8664621338525267`*^9}, {3.8693707135375547`*^9, 
   3.8693707604969063`*^9}, {3.869370851570795*^9, 3.869370863751363*^9}, {
   3.869370923503553*^9, 3.8693709927355022`*^9}, 3.869371029862568*^9, {
   3.869371060985379*^9, 3.869371172751381*^9}, {3.882331377710985*^9, 
   3.8823314029238863`*^9}, 3.882590849387727*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"e51302c3-0c93-4a3e-8162-5a1949cbd58b"],

Cell[CellGroupData[{

Cell["Check sizes of each training set", "Item",
 CellChangeTimes->{{3.869370999198162*^9, 
  3.869371008217201*^9}},ExpressionUUID->"8d20d874-5eac-4de0-9555-\
ab71c2cc1b7d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "/@", 
  RowBox[{"{", 
   RowBox[{"trainingSet", ",", " ", "validationSet"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.856790442869814*^9, 3.856790461863123*^9}, {
   3.856880551693861*^9, 3.85688055189706*^9}, {3.866462148294516*^9, 
   3.866462148947957*^9}, 3.869047415008059*^9, 3.869371145976158*^9, {
   3.869371177116354*^9, 3.869371191269863*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"c315ca3b-bc93-4eb7-b003-116ff1c6acb8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"919", ",", "103"}], "}"}]], "Output",
 CellChangeTimes->{3.869371192790851*^9, 3.875898307695814*^9, 
  3.876460561358918*^9, 3.878048448583889*^9, 3.882332078033903*^9, 
  3.884234699945345*^9, 3.8842358133569317`*^9, 3.886130653547681*^9, 
  3.8882146265190496`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"b3126ee2-d221-498c-b3b4-51d39a8aab33"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Use transfer learning to train the network", "Section",
 CellChangeTimes->{{3.856790529723234*^9, 3.856790531456278*^9}, {
  3.856880686110549*^9, 
  3.8568806949307213`*^9}},ExpressionUUID->"4878353e-50eb-4256-8a39-\
0fec1bbd40db"],

Cell["\<\
The neural network used here was obtained through the Wolfram neural net \
repository: \
https://resources.wolframcloud.com/NeuralNetRepository/resources/EfficientNet-\
Trained-on-ImageNet/\
\>", "Text",
 CellChangeTimes->{{3.856788726262732*^9, 3.8567888136996813`*^9}, {
  3.856880358056292*^9, 3.85688038696896*^9}, {3.8693689308833847`*^9, 
  3.8693689588022003`*^9}, {3.871527922101426*^9, 
  3.8715279224054117`*^9}},ExpressionUUID->"4a9044f2-c06b-4a46-85e5-\
530d36ed6308"],

Cell[CellGroupData[{

Cell["Take all but the last two layers of EfficientNet", "Item",
 CellChangeTimes->{{3.856880823756659*^9, 3.856880838931673*^9}, {
  3.8568808708151197`*^9, 3.8568808732676897`*^9}, {3.869371384597739*^9, 
  3.8693713941199093`*^9}, {3.8715279064947147`*^9, 
  3.871527907084618*^9}},ExpressionUUID->"74a465b9-4c4f-4c4d-9552-\
910749e2cb51"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"slicedNet", "=", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
    "NetModel", "[", "\"\<EfficientNet Trained on ImageNet\>\"", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"-", "3"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.856790559578916*^9, 3.85679055958146*^9}, {
  3.856880886252421*^9, 3.856880910644513*^9}},
 CellLabel->
  "In[108]:=",ExpressionUUID->"d80328fd-3073-446a-bb7d-bcdead5ad06f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "stem_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 3, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block1a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 1, 3, 
                    3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 32, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{8, 32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {8}, "$OutputSize" -> 8, 
                    "$InputSize" -> 32, "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 8}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {32}, "$OutputSize" -> 32, 
                    "$InputSize" -> 8, "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{16, 32, 1,
                     1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 16, 1,
                     1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 1, 3, 
                    3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 96, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4}, "$OutputSize" -> 4, 
                    "$InputSize" -> 96, "$InputDimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {96}, "$OutputSize" -> 96, 
                    "$InputSize" -> 4, "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{24, 96, 1,
                     1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{24}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{24}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{24}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{144, 24, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{144, 1, 3,
                     3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 144, "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {144}, "$OutputSize" -> 144, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{24, 144, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{24}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{24}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{24}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.025, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block3a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{144, 24, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{144, 1, 5,
                     5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {6}, "$OutputSize" -> 6, 
                    "$InputSize" -> 144, "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {144}, "$OutputSize" -> 144, 
                    "$InputSize" -> 6, "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{40, 144, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{40}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{40}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{40}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{240, 40, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{240, 1, 5,
                     5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {240}, "$OutputSize" -> 240, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{40, 240, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{40}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{40}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{40}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.05, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{240, 40, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{240, 1, 3,
                     3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 240, "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {240}, "$OutputSize" -> 240, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{80, 240, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{480, 80, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{480, 1, 3,
                     3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 480, "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {480}, "$OutputSize" -> 480, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{80, 480, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.07500000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{480, 80, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{480, 1, 3,
                     3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 480, "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {480}, "$OutputSize" -> 480, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{80, 480, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{80}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.08750000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{480, 80, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{480, 1, 5,
                     5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {20}, "$OutputSize" -> 20, 
                    "$InputSize" -> 480, "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {480}, "$OutputSize" -> 480, 
                    "$InputSize" -> 20, "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{112, 480, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{672, 112, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{672, 1, 5,
                     5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 672, "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {672}, "$OutputSize" -> 672, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{112, 672, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1125, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{672, 112, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{672, 1, 5,
                     5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 672, "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {672}, "$OutputSize" -> 672, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{112, 672, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.125, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{672, 112, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{672, 1, 5,
                     5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {28}, "$OutputSize" -> 28, 
                    "$InputSize" -> 672, "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {672}, "$OutputSize" -> 672, 
                    "$InputSize" -> 28, "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 672, 
                    1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 672|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block6b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 192,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 1, 
                    5, 5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {48}, "$OutputSize" -> 48, 
                    "$InputSize" -> 1152, "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1152}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1152,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.15000000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 192,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 1, 
                    5, 5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {48}, "$OutputSize" -> 48, 
                    "$InputSize" -> 1152, "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1152}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1152,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1625, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6d" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 192,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 1, 
                    5, 5}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {48}, "$OutputSize" -> 48, 
                    "$InputSize" -> 1152, "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1152}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 1152,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.17500000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block7a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 192,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1152, 1, 
                    3, 3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1152}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {48}, "$OutputSize" -> 48, 
                    "$InputSize" -> 1152, "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1152}, "$OutputSize" -> 1152, 
                    "$InputSize" -> 48, "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|
                    "Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Times], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{320, 1152,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 320, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1280, 320, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 320, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 320|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1280}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1280, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {1280, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "avg_pool" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "top_dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, 
                    "MeanImage" -> {0.48500001430511475`, 0.4560000002384186, 
                    0.4059999883174896}, 
                    "VarianceImage" -> {0.2290000021457672, 
                    0.2240000069141388, 0.22499999403953552`}, "$Version" -> 
                    "13.2.1", "DataTransposed" -> False, "Alignment" -> 
                    Center, "Padding" -> GrayLevel[0], "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Method" -> 
                    "Stretch"|>|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"stem_conv\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "stem_conv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "stem_conv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "stem_conv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"stem_bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "stem_bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "stem_bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "stem_bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"stem_activation\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "stem_activation"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    RowBox[{"LogisticSigmoid", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    " ", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "stem_activation"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "stem_activation"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block1a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    TemplateBox[{"\"(\"", "6", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 16\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block1a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 24\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block2a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block2b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 24\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block2b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 40\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block3a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block3b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 40\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block3b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 80\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block4a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block4b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 80\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block4b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block4c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 80\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block4c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 112\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block5a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block5b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 112\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block5b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block5c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 112\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block5c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block6a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 192\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block6a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block6b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 192\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block6b"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block6c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 192\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block6c"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block6d\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "11", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block6d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 192\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block6d"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block7a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 320\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block7a"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"top_conv\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_conv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_conv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "top_conv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"top_bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "top_bn"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"top_activation\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_activation"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    RowBox[{"LogisticSigmoid", "[", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False], "]"}], 
                    " ", 
                    StyleBox["\"x\"", Italic, StripOnInput -> False]}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_activation"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "top_activation"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"avg_pool\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "avg_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "avg_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "avg_pool"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"top_dropout\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "top_dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "top_dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.856790563551114*^9, 3.8568812780931377`*^9, {3.8569389419118757`*^9, 
   3.856938971545083*^9}, 3.857056033620617*^9, 3.866462155524769*^9, 
   3.8665585713735733`*^9, 3.871443397828858*^9, 3.8758983166769743`*^9, 
   3.876460569428987*^9, 3.8780485081983137`*^9, 3.882586863031385*^9, 
   3.884234708380702*^9, 3.8882149302760277`*^9},
 CellLabel->
  "Out[108]=",ExpressionUUID->"b2e116db-028b-4a56-8a1f-f4db4a497061"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Add two layers and a decoder which decodes into two categories, one for \
Spider and one for NonSpider\
\>", "Item",
 CellChangeTimes->{{3.8568809487818336`*^9, 3.856880985297408*^9}, {
  3.869047903690292*^9, 3.869047907196096*^9}, {3.870484594800027*^9, 
  3.870484607047988*^9}, {3.871443394530342*^9, 
  3.871443395412677*^9}},ExpressionUUID->"76422034-9a58-4c41-9c03-\
6ce0bb70c9f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"mimicNet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<pretrainedNet\>\"", "->", "slicedNet"}], ",", 
      RowBox[{"\"\<linearNew\>\"", "->", 
       RowBox[{"LinearLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<softmax\>\"", "->", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}]}], "|>"}], ",", 
    RowBox[{"\"\<Output\>\"", "->", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Spider\>\"", ",", "\"\<NonSpider\>\""}], "}"}]}], "}"}],
       "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8567905665834846`*^9, 3.856790575605584*^9}, {
  3.856880919408009*^9, 3.856880941759584*^9}, {3.866462177563452*^9, 
  3.866462178693439*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"14020dab-667a-4cc9-9767-30a4bfa30f02"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "pretrainedNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "stem_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 3, 3, 
                    3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block1a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 32, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{8, 32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {8}, 
                    "$OutputSize" -> 8, "$InputSize" -> 32, 
                    "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 8}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {32}, 
                    "$OutputSize" -> 32, "$InputSize" -> 8, 
                    "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 16, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 96, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {4}, 
                    "$OutputSize" -> 4, "$InputSize" -> 96, 
                    "$InputDimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {96}, 
                    "$OutputSize" -> 96, "$InputSize" -> 4, 
                    "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 96, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 56, 56},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 144, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.025, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block3a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 144, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 240, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.05, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 240, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.07500000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.08750000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1125, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.125, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 672|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block6b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.15000000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1625, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6d" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.17500000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block7a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 320, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 320,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 320, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 320|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1280}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1280, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1280, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "avg_pool" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "linearNew" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 1280}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "softmax" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linearNew", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linearNew", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, 
                    "MeanImage" -> {0.48500001430511475`, 0.4560000002384186, 
                    0.4059999883174896}, 
                    "VarianceImage" -> {0.2290000021457672, 
                    0.2240000069141388, 0.22499999403953552`}, "$Version" -> 
                    "13.2.1", "DataTransposed" -> False, "Alignment" -> 
                    Center, "Padding" -> GrayLevel[0], "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Method" -> 
                    "Stretch"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"Spider\"", "\"NonSpider\""}, "InputDepth" -> 
                    1, "Multilabel" -> False, "Dimensions" -> 2, "$Rank" -> 0,
                     "$Version" -> "13.2.1"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainedNet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "24", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linearNew\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.856790567637018*^9, 3.856790576442831*^9}, 
   3.8568812786001062`*^9, {3.856938942621558*^9, 3.856938972247402*^9}, 
   3.8570560343470488`*^9, {3.8664621560825043`*^9, 3.866462179247697*^9}, 
   3.86655857701115*^9, 3.869372943606154*^9, {3.8714433906072702`*^9, 
   3.871443398551413*^9}, 3.8758983173571177`*^9, 3.876460570177869*^9, 
   3.87804851048219*^9, 3.882586869232325*^9, 3.884234709134836*^9, 
   3.8882149310450077`*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"9cb84ab8-7bd9-4073-98f5-708e6671e665"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Train the net. Use the commented code if there is a GPU available and you \
want to use it, although it won\[CloseCurlyQuote]t take much time without \
one. (It took around 10 minutes in an average laptop without GPU). Run the \
un-commented code to replicate the results shown in this notebook.\
\>", "Item",
 CellChangeTimes->{{3.856880997912631*^9, 3.856881025484881*^9}, {
   3.856881064521463*^9, 3.856881151350203*^9}, {3.8568831803225946`*^9, 
   3.856883181003577*^9}, 3.8569412424620743`*^9, {3.869371432008762*^9, 
   3.86937146559783*^9}, {3.87048462666339*^9, 3.8704846355154667`*^9}, {
   3.871527941089826*^9, 3.871527970779324*^9}, {3.882331502249844*^9, 
   3.8823315818577137`*^9}, 3.882937400068248*^9, 
   3.8842347199188223`*^9},ExpressionUUID->"7c48fdc0-d3ab-45bc-8bbc-\
b763a6f405b3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeedRandom", "[", "680049", "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{"trainedNet", "=", 
    RowBox[{"NetTrain", "[", 
     RowBox[{"mimicNet", ",", "trainingSet", ",", 
      RowBox[{"LearningRateMultipliers", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<linearNew\>\"", "->", "1"}], ",", 
         RowBox[{"_", "->", "0"}]}], "}"}]}], ",", 
      RowBox[{"TargetDevice", "->", "\"\<GPU\>\""}]}], "]"}]}], 
   "\[IndentingNewLine]", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"trainedMimicNet", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"mimicNet", ",", "trainingSet", ",", 
    RowBox[{"LearningRateMultipliers", "->", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<linearNew\>\"", "->", "1"}], ",", 
       RowBox[{"_", "->", "0"}]}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.85679058516357*^9, 3.856790590295535*^9}, 
   3.856880995603416*^9, {3.856881031236219*^9, 3.85688106222969*^9}, {
   3.869371418782461*^9, 3.869371420534504*^9}, {3.8823315927054987`*^9, 
   3.882331596694797*^9}, 3.882937418586162*^9},
 CellLabel->
  "In[110]:=",ExpressionUUID->"0bad5f36-f449-45b9-8d83-42abb54157c0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "pretrainedNet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "stem_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 3, 3, 
                    3}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "stem_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block1a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 32, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    1|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{32}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {32, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{8, 32}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{8}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {8}, 
                    "$OutputSize" -> 8, "$InputSize" -> 32, 
                    "$InputDimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{32, 8}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {32}, 
                    "$OutputSize" -> 32, "$InputSize" -> 8, 
                    "$InputDimensions" -> {8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{8}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {32}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{32, 112, 
                    112}, NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{16, 32, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{16}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 16, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 112, 112}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 96, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{96}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {96, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{4, 96}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {4}, 
                    "$OutputSize" -> 4, "$InputSize" -> 96, 
                    "$InputDimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{96, 4}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {96}, 
                    "$OutputSize" -> 96, "$InputSize" -> 4, 
                    "$InputDimensions" -> {4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{4}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {96}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 96, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 56, 56},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{24, 144, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 24, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{24}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{24}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 24, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.025, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block3a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 24, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 24, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    24|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 56, 56}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 144, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 144, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{144}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 144, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {144, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{6, 144}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{6}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {6}, 
                    "$OutputSize" -> 6, "$InputSize" -> 144, 
                    "$InputDimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{144, 6}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{144}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {144}, 
                    "$OutputSize" -> 144, "$InputSize" -> 6, 
                    "$InputDimensions" -> {6}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{6}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {144}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{144, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 144, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 144, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    144|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{144, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{24, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 28, 28},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{40, 240, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 40, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{40}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{40}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 40, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.05, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 40, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 40, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    40|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 28, 28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 240, "KernelSize" -> {3, 3}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{0, 1}, {0, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 240, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{240}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 240, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {240, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 240}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {10}, 
                    "$OutputSize" -> 10, "$InputSize" -> 240, 
                    "$InputDimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{240, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{240}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {240}, 
                    "$OutputSize" -> 240, "$InputSize" -> 10, 
                    "$InputDimensions" -> {10}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {240}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{240, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 240, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 240, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    240|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{240, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{40, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.07500000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block4c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{80, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 80, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{80}], "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{80}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 80, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.08750000000000001, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 80, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 80, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    80|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 480, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 480, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{480}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 480, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {480, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 480}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {20}, 
                    "$OutputSize" -> 20, "$InputSize" -> 480, 
                    "$InputDimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{480, 20}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{480}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {480}, 
                    "$OutputSize" -> 480, "$InputSize" -> 20, 
                    "$InputDimensions" -> {20}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {480}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{480, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 480, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 480, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    480|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{480, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{80, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1125, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block5c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 14, 14},
                     NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{112, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 112, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    672|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{112}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{112}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{112}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 112, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.125, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 112, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 112, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    112|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 14, 14}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 672, "KernelSize" -> {5, 5}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {{1, 2}, {1, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 672, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{672}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 672, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {672, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{28, 672}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{28}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {28}, 
                    "$OutputSize" -> 28, "$InputSize" -> 672, 
                    "$InputDimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{672, 28}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{672}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {672}, 
                    "$OutputSize" -> 672, "$InputSize" -> 28, 
                    "$InputDimensions" -> {28}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {672}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{672}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 672, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 672, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 672|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{672, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{112, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block6b" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.15000000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6c" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.1625, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block6d" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 5, 5}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{2, 2}, {2, 2}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 192, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{192}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{192}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 192, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "drop" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.17500000000000002`, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "add" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus], 
                    "Broadcasting" -> NeuralNetworks`ValidatedParameter[
                    None]|>, "Inputs" -> <|
                    "1" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "add", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "drop", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add", "Outputs", "Output"]}|>, 
                    "block7a" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "expand_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 192, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 192, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 192|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "dwconv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 1, 3, 3}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1152, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{1, 1}, {1, 1}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1152, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "bn" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{1152}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1152, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1152, 7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "seBlock" -> <|
                    "Type" -> "Graph", 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Nodes" -> <|"se_squeeze" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{48, 1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{48}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {48}, 
                    "$OutputSize" -> 48, "$InputSize" -> 1152, 
                    "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_reduce_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[# LogisticSigmoid[#]& ],
                     "$Dimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>|>, 
                    "se_expand" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1152, 48}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1152}]|>, 
                    "Parameters" -> <|"OutputDimensions" -> {1152}, 
                    "$OutputSize" -> 1152, "$InputSize" -> 48, 
                    "$InputDimensions" -> {48}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{48}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {1152}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "se_expand_reshape" -> <|
                    "Type" -> "Replicate", "Arrays" -> <||>, 
                    "Parameters" -> <|"Specification" -> 
                    NeuralNetworks`ValidatedParameter[{Automatic, Automatic}],
                     "Level" -> 2|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "se_excite" -> <|"Type" -> "Threading", "Arrays" -> <||>, 
                    "Parameters" -> <|"Function" -> 
                    NeuralNetworks`ValidatedParameter[Times], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[None]|>, 
                    "Inputs" -> <|"1" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT], "2" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_squeeze", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_reduce_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Inputs", "2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_expand_reshape", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "se_excite", "Outputs", "Output"]}|>, 
                    "project_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{320, 1152, 1, 1}], 
                    "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 320, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1152, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 
                    1152|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "project_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{320}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{320}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{320}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 320, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "expand_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dwconv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "seBlock", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "project_bn", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{192, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_conv" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1280, 320,
                     1, 1}], "Biases" -> None|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 1280, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 320, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 320|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{320, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_bn" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{1280}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{1280}],
                     "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{1280}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 1280, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_activation" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[# 
                    LogisticSigmoid[#]& ], "$Dimensions" -> {1280, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "avg_pool" -> <|
                    "Type" -> "Aggregation", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[
                    Span[2, All]]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>, 
                    "top_dropout" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.2, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1280}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "stem_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6b", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6c", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block6d", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block7a", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_conv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_bn", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_activation", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "avg_pool", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "top_dropout", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>|>, 
                    "linearNew" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 1280}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{2}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 1280, "$InputDimensions" -> {1280}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1280}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>, 
                    "softmax" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainedNet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "linearNew", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "pretrainedNet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "linearNew", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "softmax", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, 
                    "MeanImage" -> {0.48500001430511475`, 0.4560000002384186, 
                    0.4059999883174896}, 
                    "VarianceImage" -> {0.2290000021457672, 
                    0.2240000069141388, 0.22499999403953552`}, "$Version" -> 
                    "13.2.1", "DataTransposed" -> False, "Alignment" -> 
                    Center, "Padding" -> GrayLevel[0], "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Method" -> 
                    "Stretch"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"Spider\"", "\"NonSpider\""}, "InputDepth" -> 
                    1, "Multilabel" -> False, "Dimensions" -> 2, "$Rank" -> 0,
                     "$Version" -> "13.2.1"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"pretrainedNet\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "24", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1280\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "pretrainedNet"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"linearNew\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "linearNew"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 2\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.856790809841847*^9, 3.856881477632544*^9, 
  3.856938946061768*^9, 3.856939172925609*^9, 3.8570562401961203`*^9, 
  3.8664621711156273`*^9, 3.866462720395995*^9, 3.8665591304611*^9, 
  3.875898811177362*^9, 3.876461611115453*^9, 3.87804939168296*^9, 
  3.88258769837175*^9, 3.884235463120879*^9, 3.888215755184917*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"fadc2af3-5c6d-4097-b58e-0545a7006caf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Store the trained network in a .m file:", "Item",
 CellChangeTimes->{{3.857056506905692*^9, 3.857056588072617*^9}, {
  3.8704846594088593`*^9, 3.870484662849333*^9}, {3.872256945344198*^9, 
  3.8722569639227133`*^9}, {3.882332129736326*^9, 
  3.882332191516357*^9}},ExpressionUUID->"52355b33-bd89-4ef9-bd40-\
887c440a2a71"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<SpiderClassifier.m\>\""}], "}"}], "]"}], ",", "trainedMimicNet"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.872218605093733*^9, 3.872218671712055*^9}, 
   3.876460577437469*^9, {3.878048521735324*^9, 3.8780485245919*^9}, 
   3.882331621962167*^9, {3.8823320934692583`*^9, 3.88233209996262*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"1899686a-d53a-4dca-8a65-b0da824b82de"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Check accuracy of the network as the proportion of images classified \
accurately and visualize it in a ConfusionMatrixPlot:\
\>", "Item",
 CellChangeTimes->{{3.8568811574601297`*^9, 3.856881229066081*^9}, {
  3.85693936108974*^9, 3.856939387581236*^9}, {3.8570567981161747`*^9, 
  3.8570568148586407`*^9}, {3.8665591555374537`*^9, 3.866559216347602*^9}, {
  3.866559249319149*^9, 3.866559338431123*^9}, {3.866638093495545*^9, 
  3.86663810333664*^9}, {3.8693715249400053`*^9, 3.869371591488393*^9}, {
  3.87048468009691*^9, 
  3.870484701701174*^9}},ExpressionUUID->"209609f1-d378-4dd0-82b8-\
28dd7761267e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"netCMs", "=", 
   RowBox[{"ClassifierMeasurements", "[", 
    RowBox[{"trainedMimicNet", ",", "validationSet", ",", 
     RowBox[{"ComputeUncertainty", "->", "True"}]}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.8567911193954477`*^9, 3.856791154726544*^9}, {
  3.857056604869124*^9, 3.857056622652647*^9}, {3.8693715488914843`*^9, 
  3.869371551675112*^9}, {3.882331702406698*^9, 3.8823317058832893`*^9}},
 CellLabel->
  "In[112]:=",ExpressionUUID->"d12b5764-4194-4ffb-b9e9-226ac200cb03"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netCMs", "[", "\"\<Accuracy\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.857056618471898*^9, 3.857056635390696*^9}, {
  3.8665592354325733`*^9, 3.866559241177844*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"77341900-008a-49a1-aa25-d08d79a3f72b"],

Cell[BoxData["0.9902912621359222`"], "Output",
 CellChangeTimes->{3.8570566357107687`*^9, 3.866463847582349*^9, 
  3.866559179916218*^9, 3.866559239066889*^9, 3.866638089345023*^9, 
  3.86904094279665*^9, 3.8690472435799513`*^9, 3.8690474260529537`*^9, 
  3.86937156873805*^9, 3.875898886349402*^9, 3.876462061344862*^9, 
  3.8780494769810343`*^9, 3.88258781796432*^9, 3.884235514890708*^9, 
  3.8882157890989847`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"db6145f2-fdef-4a06-be1d-fb12e4a89a1a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"netCMs", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8690472404024763`*^9, 3.8690472428548737`*^9}, {
  3.869047320287943*^9, 3.8690473225455008`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"b0dff684-fe4c-4aae-bb1f-355fc882391d"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{0.884627131518526, 
   0.6654658629094516, 0.21666232645908604`}, {0.9344192128648514, 
   0.8706314532118129, 0.6708860590602362}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["27", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "27", "\" examples of \"", "\"Spider\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9642857142857143`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9818181818181817`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{27, " examples of ", "Spider", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 0.9642857142857143}], 
         Row[{"FScore = ", 0.9818181818181817}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"NonSpider\"", 
             "\" misclassified as \"", "\"Spider\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "NonSpider", " misclassified as ", "Spider"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"Spider\"", "\" misclassified as \"", 
             "\"NonSpider\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.013157894736842105`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.03571428571428571`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          1, " example of ", "Spider", " misclassified as ", "NonSpider"}], 
         Row[{"Column fraction = ", 0.013157894736842105`}], 
         Row[{"Row fraction = ", 0.03571428571428571}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["75", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "75", "\" examples of \"", "\"NonSpider\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9868421052631579`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9933774834437086`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{75, " examples of ", "NonSpider", " correctly classified"}], 
         Row[{"Precision = ", 0.9868421052631579}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.9933774834437086}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "28", "\" example\"", "\"s\"", "\" of class \"", "\"Spider\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9642857142857143`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{28, " example", "s", " of class ", "Spider"}], 
        Row[{"Recall = ", 0.9642857142857143}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "75", "\" example\"", "\"s\"", "\" of class \"", "\"NonSpider\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{75, " example", "s", " of class ", "NonSpider"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "27", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Spider\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{27, " example", "s", " classified as ", "Spider"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "76", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"NonSpider\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9868421052631579`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{76, " example", "s", " classified as ", "NonSpider"}], 
        Row[{"Precision = ", 0.9868421052631579}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Spider\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"NonSpider\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{1.5, 
       FormBox["28", TraditionalForm]}, {0.5, 
       FormBox["75", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["27", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["76", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Spider\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"NonSpider\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->181.2,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.875898886495615*^9, 3.882332548792392*^9, 
  3.882587819788239*^9, 3.8842355003860893`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"d7b061c7-fb60-4814-825a-96fc8525f97e"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{1., 1., 1.}, {1., 0.42, 0.}}, {{0.884627131518526, 
   0.6654658629094516, 0.21666232645908604`}, {0.9344192128648514, 
   0.8706314532118129, 0.6708860590602362}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["27", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "27", "\" examples of \"", "\"Spider\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"Recall = \"", "0.9642857142857143`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9818181818181817`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{27, " examples of ", "Spider", " correctly classified"}], 
         Row[{"Precision = ", 1.}], 
         Row[{"Recall = ", 0.9642857142857143}], 
         Row[{"FScore = ", 0.9818181818181817}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["0", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "0", "\" example of \"", "\"NonSpider\"", 
             "\" misclassified as \"", "\"Spider\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          0, " example of ", "NonSpider", " misclassified as ", "Spider"}], 
         Row[{"Column fraction = ", 0.}], 
         Row[{"Row fraction = ", 0.}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["1", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "1", "\" example of \"", "\"Spider\"", "\" misclassified as \"", 
             "\"NonSpider\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.013157894736842105`"}, 
            "RowDefault"]}, {
           
           TemplateBox[{"\"Row fraction = \"", "0.03571428571428571`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          1, " example of ", "Spider", " misclassified as ", "NonSpider"}], 
         Row[{"Column fraction = ", 0.013157894736842105`}], 
         Row[{"Row fraction = ", 0.03571428571428571}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["75", TraditionalForm], {0.5, 0.5}, BaseStyle -> 10], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "75", "\" examples of \"", "\"NonSpider\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.9868421052631579`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.9933774834437086`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{75, " examples of ", "NonSpider", " correctly classified"}], 
         Row[{"Precision = ", 0.9868421052631579}], 
         Row[{"Recall = ", 1.}], 
         Row[{"FScore = ", 0.9933774834437086}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "28", "\" example\"", "\"s\"", "\" of class \"", "\"Spider\""}, 
           "RowDefault"]}, {
          
          TemplateBox[{"\"Recall = \"", "0.9642857142857143`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{28, " example", "s", " of class ", "Spider"}], 
        Row[{"Recall = ", 0.9642857142857143}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "75", "\" example\"", "\"s\"", "\" of class \"", "\"NonSpider\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{75, " example", "s", " of class ", "NonSpider"}], 
        Row[{"Recall = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "27", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Spider\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "1.`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{27, " example", "s", " classified as ", "Spider"}], 
        Row[{"Precision = ", 1.}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "76", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"NonSpider\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.9868421052631579`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{76, " example", "s", " classified as ", "NonSpider"}], 
        Row[{"Precision = ", 0.9868421052631579}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Spider\"", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"NonSpider\"", BoxRotation -> 0.], 
        TraditionalForm]}}, {{1.5, 
       FormBox["28", TraditionalForm]}, {0.5, 
       FormBox["75", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["27", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["76", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Spider\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"NonSpider\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->13,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->181.2,
  Method->{
   "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic, "DomainPadding" -> Scaled[0.02], "RangePadding" -> 
    Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.888215789271861*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"3cea4176-f1c8-42b3-8e50-ce34ff18fec5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualize the worst classified examples:", "Item",
 CellChangeTimes->{{3.856881733067737*^9, 3.8568817597843437`*^9}, {
   3.8568818058597403`*^9, 3.856881814348146*^9}, {3.8570567762455997`*^9, 
   3.857056778528126*^9}, {3.8665593435757017`*^9, 3.866559382198576*^9}, {
   3.866559443009634*^9, 3.8665594867248774`*^9}, {3.866638119055902*^9, 
   3.866638128154771*^9}, {3.869371599128705*^9, 3.869371636663661*^9}, {
   3.882332596271999*^9, 3.882332633693606*^9}, 
   3.884235556513255*^9},ExpressionUUID->"dbcd9f92-df59-4a88-931d-\
8ac74581f82f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"worstClassExFile", "=", 
   RowBox[{"First", "@", 
    RowBox[{"Cases", "[", 
     RowBox[{
      RowBox[{"netCMs", "[", "\"\<WorstClassifiedExamples\>\"", "]"}], ",", 
      RowBox[{
       RowBox[{"Rule", "[", 
        RowBox[{"file_File", ",", "_"}], "]"}], ":>", "file"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8570566424028683`*^9, 3.857056749517716*^9}, {
   3.86646383507751*^9, 3.8664638364734488`*^9}, {3.884235563170083*^9, 
   3.884235601180257*^9}, 
   3.8889826551372232`*^9},ExpressionUUID->"6e576d47-6f2c-400f-9c30-\
050c2989c6e3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"worstClassEx", "=", 
   RowBox[{"Import", "[", "worstClassExFile", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Thumbnail", "@", "worstClassEx"}]}], "Input",
 CellChangeTimes->{{3.856940731168769*^9, 3.856940748583699*^9}, {
  3.857056755148924*^9, 3.85705675888028*^9}, {3.88233256197721*^9, 
  3.882332580766592*^9}, {3.882332623926207*^9, 3.8823326292268333`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"f3ffa729-8cc5-4084-a1ea-407cd9aba223"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxcvAVTXPu29nvq3DpnJUhjcbyhFadpd3f3Rht3aKdxd7dAgru7hejK2vvc
r3XHhL32e+5b9WTWpGsllZUfzxjP+M8xSS5tMlT+53/8x394XsDF4Azw3W5n
0BgJX5gbPTVVjRXl8kZvRVWFm1b6/8CHi/BrBn4h93db3ccf/Zvj9VsTjXvT
rpW+qq5S5US9Y6+rYa+tdMdv2WqUr1UKtypEO2XCw3LxSY3ssEZyXCc7bVBc
NKsvXZrzJhXorFEJOm1UXjYqL+oVZw2qswbNaaP2qE5zWK89atQfNhn3G417
jeb9JtNuk2m7ybTVaN1osm3UW1Yr9R/L1FMF4n4jq1VOahYQKxnofFKslhgj
TUXxk8IZ8eG02FB6XBjcgNgJoeyEEBA3KYyXFM5OCuWmhPPR4YKUcCE6XJoa
KcXHKAkxCmy4joAy4EMt+PACYmQBEVWYFlZBimzmxLdqKSOlso8++2Zf5cFk
0/Gs52zed7fS8XWz99tW/7ftvm+b3Xef287nvVcf/befgnefWr+stH/d7Pq6
3fO41X2/1fOwO/i4N3K/PXy1NnCx0ne7MfKwNXa50nu00HIBf87+4J9no/+8
nHzWX+fj/+/5xD9PJn4djnzbH7nd7L9c6zz73Aq6WO2A6+mn4MVG581O38PB
yLfjya9Hk3e7Y7fbY/e744+7E4/b44+bY182Rx42hh63RuC3XKy07043H816
QVtDdctB52qwfKetfNufv+XWb9XJVsv5m2WC/QrxSZXsqFr6zAswXbm1N149
6BkZEDwHiM3qi0bVeSPca8+a9ccN+uNGPSA7ajbtN5p26o37Teb9ZvNOs2W7
2bbRaF2vN3+u1E0XSoBXUEFyCdNqWZgScryBGCNLQQmSAA0C61nAi5mA+t/I
niVIRQlTUOLUCGlKhAILvF6piTFaQqSRgDLhQ+0IrIjijMiy3Oha+ruggtDn
4M3W63d6Kk6mXKez3pMZz8U8oGn/ttmHaKP3cbX9etF7Mee+XQp8WWl7XO18
XO36ttn7dav3x97Aj4Ohx/3Br/vD3/ZHvx+Mfz+c/L4/9m13+Mf+8Pf9wZ8H
Q3+ejPx1OvbX2difxyM/D4d+Hgz+3B/8Bf/93uD9dv/NZt/1Rs/1RvfNZu/d
dt/Vetf5Svv1ds/t7sDD/sj3k6lnZDfbI3c7o48744/bY49bo182hx42BuE6
21U211W2Ndp4MNF8NN68O1Cz1Vm2GSza9tm33cbNBuVGuWDdydsuFx5WSU9q
5IfVkpN6OTACfwGsW58BrsAOvnzWeaPyiab+wm04dRlOm0HG4yb9QaPh2WUH
Lsu+y7Lrsmw1WdeAV7V+sVQ17hB26+g+aVYdB+MkJ1gy3qiwUaLkMG5iCDM+
5JkXGA2QsRL/L2Th3MRQPjpMmBwuS41UpEYpARk2Uo2LNOAjzPgwC/5lPjGs
MD28JCeqmvHeJUpt12cPOoWLbtNuX/n+UNXxZMPVgu9uOXj/qfVxrePLavvD
59bbJd/Vgvt6wX2/7P+23v5zq/fXVv/PnYGfe0O/DoZ/HQ7/PBj4dTj0+3js
r+OJXwdjP/cHfh70f9/r/b7f+/Og78d+3/e9/q87vQ+bXfcbnXdr7fcbXV93
Bx73Bh/3h4HL/e7Q/c7gl73h70fjX/aGgODVVvfVVu/tzuDj4fjD/tj11tD1
1uDt9tCXnZEv2yOPW8NfNoHXwOPWoLtYZhemDdQbV7vKVtuL14JF6377arN2
vUGxWSdbKxdsFHO3nPztUsFBpeSoWnZcKwNDPfO68xufkV17dEDtGdxZkxLx
msdw7jWeuPSnbtOZywTX42bzsdt27HEcuq17zVAYzev1pk/V+nmnYgJKopkd
kOc0CggVjGRH9gctNlqKRvESETT0uJBnWM/63y7jJYeDoCSKUlDgL3lqFIIs
JUqNidBhUUZsmA0f5sC9LEoLc2ZHVFLfNgiSfaqMbgdjrEa+5Ddv9ZYcjVRf
z7kfV4JfV9sePrXcLweuFzyXc83Xc01Xc003866HJe/P9bZf211/7vT83O35
ddD367D/50Hvnwd9vw8Hfh8O/QJb7Q583er8stH6uNn2ZaPjfq395nPrzefg
1XLg4qP/cgnR7TpUy6FvR1D3xh+Pxh92h7/sjjzuj/55NvMDPLU9eLnZfbHR
dbMNRht92B+/hZK72X+92X+3OXC/0X+/3v8FKvbO4LedoWC1uViR112pXW4p
Wm0t2mwpWHeb1ptka7W8tQoO+GuvVHhQJtorF0FhPKoBfyH9C+gALED2DOuZ
2o1Xd+s1XHt1lx7dBVRLr/HMZzpxm86Bmtt06rEeu61HbvuR27rTYNio0yP+
KldP5Iv6TexWJamRj69kogtzP+gJMdKkcEFCKCv2BSPuJS32b2QJKODFSoxA
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
RcD0L2S8XKOQApnfJMqrtAhHW8o+DTdvTnrOPncdfWw7XGw9Xe68XO25XANq
A/c7Q18PRx4PhkDf9gdv17tOPwZuIN77n3a2/WZAduq1QN44dJsOms1bDYaV
avVMiWDIBrzy/DJkUaqMjnbkxOmIb8QpEU9HHM9hHnpZKPU9CvT0Ax+Q3QBe
IkqUFAkjGER6Fe6VjvhW+/Qusxn/5C98JPjLjgl14EIL01AlWTEVtLg6fmqj
mNAohdiQ51ZkN0nS3LI0uDppiaXMZCc72Zr3brhCvhzId+vI9Ypsj55eJ831
6pnDFeq+YnF3Abe3gDVcyh2tFI1XSydqFN35XEDWZmd7TMwqGVlHQgvxrwT4
GFbKK3J8BDkukhwbRUt4Azc5716Q3v8XNe4PRjyK8h5FehtGehfOgiiIfiOC
cZuYyMbHg8t4mRg6PomCifeW2fOVfJ2AquFT7Gq+ikc2SZh2Ocepkxi4FLOQ
BsjAaOAvfk4qVEUoiRYJHT4EcPChlptjlVIB2ZC/ZL6v9mCh9eRz98HHdtDR
cufJSs/5ev/l5tDNDrIE/ng0+u1k7Ov+4M1GF0SU/43s3P/Ey2Xch8jRaPgE
eaNEPGxndhvJfnkG8CqlJRaS4gzEN7KUSF5CKCs+5O/5C26gQkaC6LEhjNg/
uMgKYiSYS4GJgREM/GVIe2NKe2VE/BVtI0TZCREwMhfiw0uIqNKs6HISTM0p
9eK0WnFalSCtUZbdZqIHtSSfLM0jJfrVeS55diE13slK7neKAUGdPLNRRWpU
5nXYxUELd6JGO16lGi4VDjs5k1XC6TrZgks3VCpsNTMCBmrQxmo20sskJA0J
zcVEsrERhPchKa/+MIloTGIiOuqlnp1tYOL5hGgRIYYOufdtaEbUH7lvwvJi
I0mxEXkJUaT4KHAZJy2JnZ7CzcQ55IIKkwKSP4JJzVdwSXaNwAD9y6Yp0YjA
ZYAMnAVoIHKA9Pw88Bo4DhqZhpMDX5pEFKOQVGUV9XkKVsbcJ5+6jj/3nK0P
nK72H3/uPV3tO1sbOFsbvNgYvNoZut0f/nI0ApPa/U7f7VbPtc944zdf+iwX
fuuZ13rkMUGk32nUrNepF8sk4w5un5EaVGY38LBltKQC0gd9+hspJoqXGMqM
f0mPD6HE/kGNfUGNg5EZ+YEqzPjn95pDBc8riFikHkL/0uBfGwivTOmvzcQY
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
gA/UMsALMiEKrolH9ip5IZ3Yo+TFzdKxpONgqni50nhxMP3havXz47UvT9Z+
uV4H8duzrd9f7vz+avevbw/+7Su4d9D+6/8JnXh2Bnj9tpr5spR+PxN7NRZ8
0vRcVRxHGeMa8NhOQdvAzCvJUQHWw4JbaANGEJR+wAiqZSAf0gfNzK/zADdT
9NBIADoETSFi/pNXRojKChEFCbIogeeF/SXhQFUyVJfBu2rchIE8bWKMW5gN
G+Ow6X65WQW8vjxafrFVX0zp5uLy5bhsL6+5bFjvV43XPfuLKe/jnvu4aGra
yCcd+9PFyNPF8INpz+WE/dGM56Rl2cpre8DDBKVTEcVi1tAOytJmZi+mjVs5
ShYs7VXHPSaDXEzGYUfx6BEsQsii2XQKDhk/jLqDHPgG1f8NZvAWGYcYQfSz
MQNC/ICZiXZz0T2frOLgd8PqiktmZuN8clZQxRdi+nV0fMKsUNPxDhnLIqIo
6WglDSWjINQMrFfNMwopwBkChw9SIrCORs6oXUR3Sdl+Fd8tY+edqoWy/95c
5eFG593Z4s8PN/7ydOv3Z1D85ekmuP7tzf6fIF7v/fFq929vD//+7uif7w//
Azqi5+z3tdyvy5lPi6l3U7HnHf9V2XGcNm2E1XMeccfCKajIUfGwh42CDtmj
gprVp6P1Gej9RvqA8Wb3ivVfTy3hXmi9FxXkYMLA0vNxMS4qzkMAfQFeOVC8
RMiyCLTM/XXRQFeMnFDiZk2UOTt7wSec8Ai2K+7X2823B72Pl3MfLuderFdW
UlpQg1bjkv2s8qppetA0vhhzvhz3POw4D8u62bB4v2q713IfNZwnbc+9pvOk
7jhvuTZS6jE7YxEoyydq+eU28SifNGBT0G1ajlUvzKf9M9OdSr2o0MgpDNLw
MMZm0RnUEoWQiUcNDPXfQg7dBYEY6iNgYATEbT4J4VbSQwpywciqe6S9iHa7
EeyE9CYukY+HcVB3dMxhHZsoB003HS8dRYpHYBIiXEXDuuUckDNjFkXGpTML
qQCoQ84yCaigp7MK2TYJy6VgpZyS6bJzfy734mT6zcX8D1fLvzxZ/4rst+sN
cAW8/vjh8NOLzU/PN/784ehvP977+49n//7p8j++3P9tJfvzQvLHmdiLbhDo
6yRr3gK8XKKumVPW0JKSYT8PC5KemQJtUYHG6W94mRmDpv//U0voFA5UgI0O
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
+nI+f3+peL5UuL9ePVsqLJQcGTMzY2CkdNSqXQgq8nzKst0KPlitXO/U3x62
f7qY+ngxpSffBcggrd0gM1MQDjrKxUB5GEjfzUawmzcWYRN8XIKHzgAnfzOI
WBCiiyJUQYjIC2FFMbwkQ9VVww0dqWdlL8U1hy3/g/n864Pxz4/W318uvT6e
/ni59OZgfLfpXyvat/LOSbe8YWIvRjUbGeNe2XHU9O6XnUsxzXrR9v3x2G+P
N17vTdyfK6wV7Cs501Jav5wxLGeMuzXXUdt/0PTOx/QLKXvFrdpqJ64WKw+X
yqsFR9HEAoa5YeUDofUCqtm0fakYGI9ZGk7JVFCTUZLtzEEduDkZWLuIrqLh
2ZgB8tAtJgYWsmjjbrNFKQg59Ho5z2vTsKl4OPCHfd+ihu7gkAN8FgUgI2L7
hpG3hXTAC+9QCyxSOgNzlzz4jYaG8ohGgyJsUIj281EAmZ+PCwoJYeloXEEJ
iUccTISHh3EL0EH5cN7K6YSUcznLWtVzNBa/nIOQXS6XLlbL+1PJXlyXNDJj
akpCQwWJohtQrxZdD5YKQFlvjjo/nU/99mjxy6MFgAwE9KoOMgiYBZQwOtrN
RENncbBQoZvj6KPQ6x5QadAvQ2YDUxCgi2L0Da8hwKsixzY0I009ZdzBWwwp
N3PW/Yb/ar5wuVh+uN58uNmeLTpP5/Kvdjrn44mFqHYKFJ2gatYjWY+pN+Lq
5ZhyMa5ciCpW0nrwz/vLi53fnu78dH/l5d7YSsk1nzGtFKzzKd1CSr9ddR13
Q+C6XfIsZpwzaddiyb9W8e+2QuNhFShhAFnFyG5YeW23tBPQzmbcsxlXJ6Dq
+hQtlzRrYATlRK+Y5JHQJYQBAa6Pi+ljIu9KSFgGZlDFoah41BHEHS4FqxQx
MfA+PGqQyyBJBSyllKeVc1QSBo+Go2AG2MNIGQNvERHloEOnDwVl0JC/gzkE
kPl4yKAQ8MIDTEERPigiuIHPZwwFhLiwYiQgJ4SVxLpXMp0yAq1t1nzHE4mz
+dzlSun+WmVvMjWZMoMOLqVnpXTMgkXQi+i3m8E3++339zo/nnY+XUIvA/rt
eun/IaPcvDYRGEUaEiDzc7A3b5jCRjmoOBeV4iEzfFQOmEM+ZDYgPy+Eg3xY
VaDaevKYlTlu4yyE5BsZaEFprxbYqvjPZvLLFd9CxbfeDi0UnQftyHRQOe2W
HhQcF63AXt68llBuZTRrScVsWLSTN++Und/fm/7l5d5vLw//eH38fH9irREA
v9peO3jQDhx1w2eT8Z26d71ovz+Z2awEF/K+maxrtx3ba4cnwmrQ6+X1jLyG
VjdzG1ZB3SnvRsxzeU87qK7YhTWHOK4edQuRbiE+KKfLCP1K4pAI389G3iL3
f0Mc+HZk8BZh4Dts/7eou99IOGQBh4ZF9NNJeBZ1ZAQHp4zA9QqOVSuCEiN9
RMEaNnCRBurtsBgVlWLDUkJQhPFwYAEBGmTIr5sfI7LhkATnZMM8gKMYF5AR
vGIsSI8hxUg7pFwqODarPvAvP5yIny3kLlbKRzP58aQ5beRmjby8kV/3qWZy
9oOJ+NuD9k+n7S/3O78+Wvj98fJvT5ag7efkPjNtyMZA2ukoEC6IFy7Ex0d4
uAgwilwkdNwN7+apCrQ3FtoeWxQBXnBg6RsqfNfMGHNwJz3ixZhuM+84akdP
JlKzKcvFQuV0obLZjV+sVHY7kaZD2LULdrLW06b3vO07rtn3S8adnGYpLtmt
mJ8uZl5s1T8+WHr/YPnL062PVyvP98YerFbvzWSulksPFgv3F3LnM9n9TgRo
aq8ZnkvZJuKWXsSw147eG4vPJvQVC7ugo5V09LKOUTGwqzZxN2xYrYaaPmXT
Iy9ZBFkDM6Ya9YsILh5OPdKnGR3SkOASAjAk39EGbpH6vhsdANRuoe5+K2IS
FUIWcuA7PKpfyKW6rDq1jGUziJ0GmZCKp6H7WJg7MsI3bu5QVIxMyLAeLhxI
LMBHOpmDDsagnQFtMfYJMD4hxs0F7AghCT6iGPaK0B4R2slHhlWj7aBio+rZ
bYe326HDycTRdGqtHiy7ZEk9J2PgFS3ipl+zUvbcX8y/PWj8dNr65X7v14fz
f1yv/Pli/eYolSErFeYCfp6B9rHQAR42zMeF+ZgYdLzefx7XNpTmDeYFQ3nB
QE7YX5IigN+oq4fbOkrbwu65ROM+5VzStpz3n0yD/FxZawRP5ksvDmcebXUO
J1Ogw22buUsh9dVk/KTpPSxZ9wum3ax+J6VZiMhPphJPNqu/v9769Xr149ns
54uZ7/fa3x/2nqzX7i+XrrdapzOZs9ncw5X68UR2r5NcKvryFkEnqJ5NmjYr
nu2Ke8wjbNo4JS25oqNUtJSCllbUs8b8qtW8pxfQtVzKvJZTMgpqVknTIc9q
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
3DjhS1ZeVr2wHlSteGVlIwOhbCtnOah60d8Oq76liHq3YHu2VXixX3572X53
0Xm+V355UHl/2vwERqeNT+fNd0fVj6eNH+53Xu0Wnm7kbpYTkN7davpqMbyD
86fkuV3JPVrOPRxkH60Wr3rJ1ay1HzcsZcwrBdvFIHm3Xny93/z+YvBuv/5m
u/x8JXXXiz1o+od3zyqrHhkCeEhJcYjJJgEZYdYsQOaa82u491frz3Zbv3++
8x8/Xf/2w9H3L3afn3ZqQZVXQg5IqH7JvEdB8inJ3qHr8Kko2MGfwDRi61fP
h7XUpJ6eNrIyJjYqqWdAbqiolj7qk+iQSGpuJcUpn3Mq5lzKOYdyzqkkuVRk
lF0+Y5HMfl7Rwo6GPa1lTBg5U2jULhl+6HzUyCx4xBWfDL1iMaLpRfWLYS1O
2u0ici6QBTDIHq3nYcJHJuSqnzhpRPcqgd2q/6gTfbBVvF7KXbQSxIc0DRIn
vUjRL8452FHlLCJezyFqmNkFLaPjUeAgbxdcB3nPJuyiT7Ee1pyWnG8Pa+/v
t18eVq764ftL4Sc7mae7qRcH+Q/nzffE58R1f3jQe31YebFbul1NPdsu/HSz
8nSrsFdxHDc95zX3ScF20wnf9hPPNoqPVjI3K6kn24UHa6nLfhj2/vlm9vl6
5sNe5Zvd8qvVFCQGavWAuuiWZWzCoJrqEE0bOZN6zoyZT7KKKFbRfCvueHnS
e7ZX/rsny//y6fDff3v554/HL46aBZcIJ3ZESUUFieRFDeM/9YyIjh7W0YNa
6ohdQLMQ1tESeuLdyGkzOwPfQqx5MqJ6Rpgw6uBFQRcl9EUsPJLsUtQcYrJd
BrlR3GqqTTbshxxEvxmieDNqxoSeOW1kz9qEZNhOJPSghpawsMteKbpKP64H
rLpHNlSZfTmpO276Hq6koC+o7JqY/smb1ez9fvp2rXDRT21WvDv1wPVy/qqb
fricg2fbLDu6CW3KRE+qKYtOUU5JySgpdbtoNWHqJwzE+0ZCxMfE99yitpW7
GlQ+6Eaf7BQf75SQxZ7uFp/uFl4elt5fNL990H1/2frmqv3pQff7m8GPD5d+
uN//cNr67qoHZ3La8pxWLZcVy15MthOVnpYMt4u+b/YLP5zVP51Uvztr3K3F
vjmp/HTdebYWf9QPPlmKPO5GnvRjt91YPaQruGRRA8ctJZs4xO27Ova0iUA2
75TRBznfzWb+uOV6vBH++xeDf/125z+/P/vfv7/87v5gNW1OGZgJPTGqomh3
OkbSyEqZOHETK2JggBp4BbRUIEuaWCkzO2XhYJswMvEnIRSQqRe8Qz3CtNgk
szbJnFVEJtYqBRhkxAgbuREiqrPGdawxLfOegTMhp/xSTR2zC+cDarZHTvXI
543cMb+anHMIGkFFN6qDcx4uJRFdcSNn2atAa170RrREmEYU8D3frd6s5U86
MfzbYa6qXuUxBn0zQlwezVuXkwYf8ckFU4jkRTQE2VzHr1zNWHspYyeuw85O
1nqQMWxH1St+xVJYfdwOP9oqPz9oPj+ovzppfvtw6TfP1n98tPTNVee7m/5v
nq79+m7l1zfL0Nf39zHsuh/PO4/X4icl3bu10IeV4IOK7n5Ve5ZXvl4NfHeQ
ebed+Pag8PGk9O6o8N159cNh4c1O6rrp2iU+5tK2nbaW/dqMXRrScWwikok3
ZeBMG7izQOaQ0twKZkjP7yV03bCk5aI96Nr/+LT3L293//vbs//zh6t/eL3/
aDPbiajTRrQ7ZsrAzpp5OQsf/j82pIYK6+nYJszspIWdMLNiRmZETwPNUaFt
uhUkl3zWKp4yC6dMglk9Z1bLIi67GIdLxGYh2YB+yJ02sO5Z+FPEwouC6pYS
t0w7JeSokQN124STTul0SLeQtnIbQWU7pGoPL0/D/p0vImT5oDLAQm+EvkYX
+oHv5X712W71/koua5OoqV9HDdyNome/FkAo28rZUjpa3siJCGdSUkiMmtUz
Id5dxLROaKvp328G1zOmvbzhUT+ylTTCrK4WXQft2HY1eNSJvTnv/frJzh9e
7P79s83fPFz67rLz8az5w1X3d483fnu3/sP14NcPl39zu/rhuHZY0L9bi77o
Ok9zkgdN7bOe7Zut8LvN6Me93LcH5Vc7udf7hTe7uY9H1Uf90F5av5M2byRM
K1F9KaBP2WUxs8ijZNgk8yjoyy6hQmIeJbH8G1LPl2ysup1W0E3t57W/vmz+
8W7pPz4c/vcPF//84fD7B0v7Fd/wmXHu8EPJBRkbL2HhgA7AoeJmVtLKSdm4
2GI/amT4tQs+DYrqUVFcQKYg2aTgNQU1qemTKhpCNPGAvJ4LWGQ9l2zizeqZ
XyEYRvUsZMOIjjl6LVvcjB9BD2hJMTMd3x8q60S1yynz8B221vWsFchOWv7j
pvdmleAFcKPtcdN/UHcftwJPtqsni+l+yrOc8xx3kw/RKhdj1eGbYwtGTlZF
y6sZaSWtG9Ks5x2Hi5GDfmynE9zvhHcqzouu+/FG8n4/upKzrVa9aYcUCaga
0Dw7bP34dPf7B8s/nrX/dLf2x9vVb4/rP5y1f3+3Dlifzjs/Xg9+erj8zVnz
quPbSSkPM4q7rvXdbvCbnfAPx9lvD/PfHpbfbOWerKXfHdZe75TO6969rPmk
6NjL2Y/Kvot2rBI25jyqpEMW1PM8aqZbyXTJGShIzKsiFu29mgWPihQxUItW
VllP34jJX27Hv7/f+P3zlX/6sPdPHw//+GznwXKyG1GVHLwS8dkl/IKVl7Py
UmZO2spPWnhJOz9h48WgPgsnamaH9ayQlhXUMIMahldJ9SgoThnx5knoyMCe
0tAmUDrmtIE9a+aRTJw5jFefgpyz8iHkTkSHfqvlfKGg/w+bZDLrEcZt7IJP
Uo9pKkFFM6wepIirnFvEXfRQWfR6KX7WCd6sph5v5h4sJx5v5u8P4B5jhxVn
zsB4uJx9td95uFo57RV2GtGTdmw9aWzaOTULM6ejVa1csOuHtesZ23rBedAK
HyGOrSTur6ef7RXeHmSfb6We7xXenDUf75UHWVPawu1EDPvV4Mfz/k8Pl55v
pj4cln993vzhtP79UfW354s/nS9+Oqp9c1B5DQUdFG834k82448Gvvfbifc7
yfdHmR+vaz9e1d/sZ5+ux1/vF98c1m6Wk2dN/+1y4tlm4eVO46ga2sx5qxFT
IaDLedWgFjELQwZBSC+AUQQvbP0aDnFPvhLqm0GqqluEFTOjHxa9Psj/dNf7
5w97//7dyX//cP3nV/tvj+o4OCspXdUpKlh4JZuwYBNlzIK0VZR1StMOSdIq
jJv5MZSRh0YU0XMALqRlE0uOMJmw9whighkje0rHGNezJrGDMnFmDOwJWJSy
U1qwCHarga2av5XQRy1si3gy75OWAopySLmYMfVzlmWY5OHz78tJMxLW/UHi
yVbh4UryyVb+/Wnr7XHjxV75biP7dLtw2fJvZczPtquPN6v3B4W9RtKrZMAz
E49R2NgVI7U2fGVE0y0+aQT3St6divesF38Aw7mRfbSdf7FfeHeQe7aVen1Y
fH/eeHtaf3VQfjhI7hU8Oxn7Qc7+ciP9bjf7bDnyfDnyZj3xYTP9bjn5uOm/
X3FcVZ0PGp6zsvm8brnt+5+uxL7ZK386qn84rr7Yztytxm+WIrdLEeJzKI7q
L/fKjzezrw+rrw9qz7bLp81wL6JvJe21qBlay0JrTlnCJo0YRUEdP6DlYUs8
+aLhulUsNEyfbCGhZGb1jLyFPogpzzv+N8flP73e+s/vLv794+k/vNn76Xb5
01Xnfi+6mba0/cQTXjmzoGCX5p0KVNYuS5pFqIRJkDALkhbhCFxEz4bcUD4l
1Y4ELQCjceCLmwi4bhncxYQdY8UA/UoHSeteM7K/GNtuhvo5Wy9rW0yZlwr2
QcG2VfdtlFzd4SfjVFySmJaK3ni7lgEvkIJJ+3TZRYEd/Paj5dirndK749bz
3fqjjep2LRoxECvqFRtv+MIWbt3GhcrWEobLTux+L7ULY1l2n/cij8HroPTm
qPz+qPD+sPjhtPLd/dan8/qHg+JV3b2TMF5VPOsB6U5c8aDpeL+V+riVftEL
Pmt733SDz1ve67zlLG08SZkOYsqLrOYkoz8rO15slp5vVS8X49e95NPN0oud
8rvj5u8eb/720Rp+VdSPD5ae7xRvVuJPNrJHTV875WjEraBWDOjyfk3Oo05Y
ZXGLdFTDR8wEbiXLOXyUKaxgRFX0OPEyNHrFyX22lfn3j0f/9cPFf3x79n/8
+uqf3u3//tnGbx72PxxWXu+VEIiWElri5lgvkEkKTknOLkZlbGLw+kwtauDF
jHzshHUsj5zilMxaBZNop2E9o+CRln1yNEy7YDYgo1ZdSjSx6/XKRjWwWQ9u
1AODvHO7Gd5ph9drnt1WEGMFjbHmkyGXRdULWTP7fDEMWT3fLb07aX5z3kHB
68KzfXveeLlDoHy537hezl4sl1YL/rxNVLUL6jZWy86pWjm9gHwbA7EVuVhE
ZItsZM1Hdc/NavztceXTZeuH6/b3l004uh8va+/2oanE06XgVdW1HVIcxOW3
TfuLtfD3R/k/XDW/38t93Eh8v5n4Du2uG3hQsp1nLadp435MtRPTHBYch7XA
aTuxknSctuI/3W7/7snObx5t/P3z3T883QKvp1t5mBZQ+3Baf71ffrCS7KSd
EBqo1WOWcshQ8GkzDlXCKk/a5HGLDIoLE48dsTxahg/hV0OLaJhJAxcuseoU
fHvS+K+PJ4D1r98c/vHFxt89+b9rus7mRLIsu79gNzp2d9pNd1dNGZWQqiSV
DEhICIGAxHuXkCTeJyQk3nsPwggZ5KWyXb091RM9sX9vL1WzESdevFDoA8pz
z73nSMr3gu/6xG+DwNuG9X3b+WlIXFasfUqbd0t8SrrpkKbde6JlPVWzFpV7
NDVrCaBgLih2FuU7NCkDWINW+TPYP97atybklYgOlvJ7BwwpZI1N++Fw8QfD
7ksKFbWitoCRl3Kr8n5d3CEvBA0V0phwS2J2hLLwk1ahZX5lGM3Ce6nefuyV
bRRdIhDaWcExSVuAOBDadc1zV3MdJw19Sl/1K8G0F3wGq5ipZS6Y957b2U9t
rCc29kJUtZ3FeBWXvOCQNYPqikdcciGQp8B1XJRt1zUwEo6ztG6WVp8lZOcp
+YAQDAnJCQltUHKRUt5WTB87zv/puT+1nJ+ajrcZzSwsGnsFHfthHeNU4KPq
2RHNbgrjl32KDmUue3STtOe+E33bj/x2knjXCwNNFyUXTDQYOrOSE6LBJGkh
dSyXhgMA4kBuOHRI0baet6liryrBRu4uS3YWxYwFwdZTAf0JAh1s62+ijWcK
xqJuj4ZxaZMk+s9Z9vNZ8qEXOErphxnjcRG7rtvedJx3TdvbrvN93/O+533X
D9403Md5S9En9mno6OGSeu+5dn60CE21R1MwQXHLqr1l2fYz7qvvdJwlm2gj
65SVgzqrZDNk4tYjZr+ay3/5sx6qiL7gVR6EzPywBUl7VWUSzfjUzQRWJrUJ
pyiMstFDmmjte8XmI/MBTbb+A8ZdKLqQflQ7zWBXVc9tM3jTCj30yLuGcxzX
DSl9LwI2AKUsQuHWY9HWI7BMKLgs1mO/bDODHVZckqJdlLcKCg5h0YHUvOIj
SjuMqu7rntuyG3zFBIRDAl9z4k6TiruS6V3d9qGBP1TMD1Xr27r9Q9Pxa8t1
kzfVLHsllJk3MkPitbSOVcBFUQM3buKlcOFZyXtZJ66rkXe91Lt+/LdJ6o/z
3Pte9Lri75GGnBVp+FVHlLnolIW0+w7xplfP8xn4sLq13K9yA62pOaty1jK4
EfHOiy/v9y18ed3vBQLmZPOFjE7T7i/bRa9TOOfDEfn5NDVI6IP6rRC6E8H3
ko7DBqkapdEL6Ak1O1D2oef9/Tj6+Sz1YRK76RL9BJqxCcIGtom3ot5dVDIX
gS/N/ivx1lPx1pNayJTEJK2w5aGXqZFYO+noJJ2VgMmn4sAc5K8+yjhVxZCO
wA4TbmkuqA6auRm/opU02WTrcuYv6OGihbekZz7nL/4Xd+HfVfQfY4bdPqke
x/UgrtsWcVrxXTaDVzXrMKY+jpsGEXMzjJGYEGqSTvuWs/FItPWLfv9ZULOX
sSJVn7TqElVdSM0jrrpFeQtnEFKMSeUwpOh4pZOQvO8+HPiFp0njfQn72LDd
l80PNcubpu26aL7OmWdpwyxlGIakDef8RpW0gZVGD6DZUjo2PP88lCVUnUc1
zbnv29R1lTyi8I+D9B+nxc/T/Md+chS3RnVs8HJ+2bZPxlBvP4OAo2UveXSH
QJnfKIAV9qA4sCIa7hpQJtqe6wuhLwCEjBdfX88EPyljgDqWnNKtoHo7gR0c
Z/F6UJGy82JWbsTC9mmYxPwdBE4a54GjnqRMZwXLbdPz6yj6aRL//Sz9fhS7
bROzirdHmXwKhvFgSc54rmW9VO4sOiS7RylvzqHoJ2x33UQ/7ThrkKfV8KwW
bVFWmH2HK3+tEuiw4InakBB2mPEpUx4Z7JNucdTKM/GXQ3qWWzr/7Yee+UxF
n19j6pdvDWJ66IFgPC4q7oua/6LmnebAM2umCRNUb86l9OkFioP1189/YNB+
gnQDk9cj30yYD0Chda+4OT9OStT0S6sOXs3OHRKyuoNTc+yfRMTTEH8SFk0i
8vOE9l3V/lDGr/LoJK46nkM9jWsA3YCo4xe2g1IY/ccZM/TnoyTWDOkyNknU
yAXiSh7lJOO8KBGTlHOctJ3knGWvLI5y/VK6hTM/gRwgW/+rhvlMz160CF8D
R8AUUBZAEVhhD0NNz9+YJzXGc4T+DGgS79AAsr2XAClzSbpDU7GWcdGGV8XU
s19omU9LHvkgYWlEjEmHyCreMhyuURiSd8nnN0EH1f24YZg2XVZdb/vhj6Po
+3Hst5PMxyPqTYc4y1nLbjFpZLukW4rtJ27pTi2A1oP6fhy/6VCzRvi0Hrru
xYG4Yd6LS+kHK9+zlv9iFq7VSCNh5JSC2kEWZIin3NK4XVT0KSFAmTjLOP+V
XzU/9kHLfIYe0BqEZpBAh0lwd56HThg+ySCubBOSI1IXN3CR1Z/460/Fuys7
y4+Xf/qGufCdbp/mlKwmMHbBya97RXWPIGtm5S3slgdpe/izhPYqoxtHkHHw
YOTdnxBI3X7QdPC7XlEvIOkFpW2/eAL1kNRCdhvHVOAtZzn0ooTfNjw3dc9N
w3vTCkxyjm7U3Aob60Fdm0Rh34/ibjHdI9mKzf/Nkh/WMI2sZzh3ybD7RPjy
v/W7T+zCtSB4YMr0VWXAV9AkBMAG2iOENUhqiv1lxf5L1cEaMCVnvYINQM15
DauWu4by1y3CDRzZUG4+Fq7+mLFL2hTm07A4Kz9uL/ynTUo/ytiPc85R2jZI
46cl9yQL4QXthBQNUj0t2h46gTct70PVcVnAjlKakg9J4pySR1b1q0cpWz+B
95PWYcEFOK4FzjvRiy4160S9BrZg62fW4jdW8XqF0JaDmn7KCpSVwoaUW55z
KygTH+evWYVrbhk9oN6TbjxCVn4KGzhtylgnVO2wZla0X5Rsw5S6H1G0A4qi
Q4ZyVmCMqveXDl8/2njyH/yVbw2sJ17VOqGlJ8ysgp2Tt7KqzsOjkPwqg17D
84+rphFx17tft6w3TBtV03besBcWr+YMe5RiI6rcPI4bLvMQiq03Fetd1X5f
d8zypsu8+TQF0tbdN3xvu8RNg7iqhc5L/kHMUnTJ22Ej2EWXiJ40C4ouaZ9C
q16ZT7bul29krby8XVDxSOHh+DXb89hu4AVQAWEWhjBR2CIJYWKYa2BF5u5R
sKnnb+rAjRyswao93PgXeOt63rqRv2lG6LiQ7hDS1Tsv5IynSbu0HbPGHVKr
jE6gnDqpH+dst11yWvZeNYnLqrfqFVM6RoWQlwIwreRQhE03p+XnTAuqSVbV
o+RNQtYkVI2QthHWdeOmJoWOS+5uxjouec+aoXHZC+hl7bhonbfyHRBRCep6
cfwo45xWiWHO3SBN9TBaDWjdCkbYeKDnLIvB6778ScZ4moUf2S+vBWTHSXSc
AG+mHcXmt+8NImgtqC/7ZFF0F0deGTkLToQWUq4lcXbWzq0FRP2IfBhTnoCy
cqYZCCcqn4bFPQ+3bN7KKJfjwoW8hp5QMAgoEi7tyzGS66SSMaR0tw3HfdP5
0HZfV61XZctDxTYmFRUbZ0iq30GALbl7FDbNe7qUJWUV9yhLI2DoR7FRwnqS
c8yKbrC4A8pQmV9gwZuksGkGvDfaCGtIEzsE0Q/jhzGEtIiiuCyCy0BrID2b
gvU1rAFHGu46UAYw8OlAooG3YeRvGQWbZiEDE22bhdtmhKHlrEqZzzNe1Vk9
eFr1Nin9IItNK/abbuC84jivOKd5G2nYzToE7bixHtHUCGnBxU2ZGEX77nlR
dVnRnhc0s4L5BpxY1X/fDNy1/TftwGUjdFoKnJX9JwVPM2zsxbDbVuRdN9UI
Gv3y3SQm6kYs46xr1gydVP3jguu8Ttx0qV7KmvMqMWQD0h+FScIorxNDBwnT
NGc5imm7pHya1F8W0POsth+WdAjpICxpebm9oLAXFA/DitOEYRTVDSMa0MU0
CSv0N9kkLjtJKPsBYQnbi8lW4tJXQf5CSLhcNLP9yEvF2ver3/yb+NW3PvmW
S7w+zVvf9Im7jmcGZLUcn478/xiRv/eJk6ShE5CfZ/ELMO1QgXlfyCTxaflH
SU+dmF8mNUxg7zrkH5P0r/3ofdP/0Ar0IpqTrOWy7DpJWQGEajtqFVA2Ucwu
oWzSr5QRZhEMNZhxwBp0SCPC+MqXHmgSbhsFdOOcsk1UsIWJGBbxjkW8a0Lg
6/A9q3reSjuB3fWjZ3XvdTf4dhK97vguv/zBqOKXUaaDvFtaCxuOS75xxlZy
iysupOVDjlPyq4r+smy4rdpGlGGcxM7y1uu6664TuGmTH8fZX8eZ6wYBPRbQ
j2ODmHmUxAeUqRdFpxl7P2kZ5Z1X7fBxyQMY5R2jHD7K2/JeWYtCT8r+Uc5+
XLRNsthpwXpZtp9k0eO49k3D/qaBd4KCll84ikjHUckkKp+l9TcFy2UWm1D6
MaUbU+ohpeiHxZ2gsO7htX2irHHXw1207vySkK+ltdtF7AAoc/OWbFyafO0H
G3cZso/5cOmi5nk/JD+OyE8j8u+TyD9Oon9OIr+2fddF633Vc1f1vO0Q9+3w
RTOacGmVe6/KfuN1PVx0yygDux1UT2LoacZyUXLc1DzQydsh5XnBNk3iRxGU
1O5SNiFQRtn+RVnUKiMwMbAGAw5s/xfPv2MQgLi2/l9omyaE/kVcc4nhEqZZ
uGNGtk0IMLil3F80I6utmPG6QwBln85Sv50l3/RDILSwfo/UH+Sd8lrI0k96
ck5lHOVlzPxOQDGKyz90IZlieRsrg7FrXknezi15+dWg5KTsvu/F7tqh06Kr
HzeN0tazsvs4i42Sxm5UDbiqufpJtJ/B+2nLHCnLIAMMos2oYpLHxjnLIGVq
RFSTguWkiI9SxtM8Pk4YBqRiElceJxQjSn5EKroBpGTd6fqRo5CkT0ibbqTt
lzY8ojzOKtn3y479As4OyV+DSy9b+HHFjoezFBa/armEo5C66Zbg7AX99uOw
ctsv3ZS8/l6z+7eSV3rb8n0ax/6cZf48Tf7veeqfk+injv9jJ/CxG/r7OPF5
mgQjNMp72klX1qufFgKfT8s3jVA9oMrhPErL7JGay7LzuuoGPYLrnqTM97Xg
Q51Img//DxMANMY=
    "], {{0, 150.}, {145., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Exif" -> <|
       "ImageWidth" -> 425, "ImageLength" -> 441, "XResolution" -> 72, 
        "YResolution" -> 72, "ResolutionUnit" -> "Inch", "Software" -> 
        "Created with the Wolfram Language : www.wolfram.com", "DateTime" -> 
        DateObject[{2022, 10, 27, 21, 51, 48.}, "Instant", "Gregorian", 2.], 
        "TimeZoneOffset" -> 2|>|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{145., 150.},
  PlotRange->{{0, 145.}, {0, 150.}}]], "Output",
 CellChangeTimes->{3.88233258177767*^9, 3.882332629523973*^9, 
  3.8825878278237343`*^9, 3.884235522663681*^9, 3.884235603601828*^9, 
  3.888215792153758*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"4f8bc262-0be0-4789-843f-f3eb001a7d67"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedMimicNet", "[", 
  RowBox[{"worstClassEx", ",", "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.856792216991642*^9, 3.856792218205021*^9}, {
  3.8567923166230993`*^9, 3.8567923197273483`*^9}, {3.856881800013682*^9, 
  3.856881800714264*^9}, {3.869371613239291*^9, 3.869371613698691*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"a44a817e-1cc4-42e6-8f76-b4fa6da2bc18"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Spider\"\>", "\[Rule]", "0.3618468642234802`"}], ",", 
   RowBox[{"\<\"NonSpider\"\>", "\[Rule]", "0.6381531357765198`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.856792218591728*^9, 3.856792320163095*^9, 3.856881801305347*^9, 
   3.856940753288083*^9, 3.857056767130568*^9, 3.866463885994102*^9, 
   3.866559230005446*^9, 3.869040943752446*^9, 3.86904745806728*^9, {
   3.869371610182482*^9, 3.8693716141285553`*^9}, 3.8758989185477533`*^9, 
   3.878049534073309*^9, {3.882332621195714*^9, 3.882332636564939*^9}, 
   3.882587832245379*^9, 3.884235532461369*^9, 3.884235606875656*^9, 
   3.888215794550165*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"75bb4f32-9d5d-4833-9333-63234b248da3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Explore the features used by the trained network to identify spiders vs \
non-spiders:\
\>", "Section",
 CellChangeTimes->{{3.869371660619054*^9, 
  3.869371680543188*^9}},ExpressionUUID->"8fb9c4fd-650d-4c5b-af46-\
f124f467c30d"],

Cell["\<\
Following \
https://www.wolfram.com/language/12/neural-network-framework/visualize-the-\
insides-of-a-neural-network.html, the following code can be used to produce \
images which the DCNN classifies as Spiders or NonSpiders with high \
confidence:\
\>", "Text",
 CellChangeTimes->{{3.870092536696219*^9, 3.870092566673894*^9}, {
  3.8722191257887383`*^9, 3.8722191271447163`*^9}, {3.872514225066372*^9, 
  3.872514263000548*^9}, {3.872515311590671*^9, 
  3.8725153451204576`*^9}},ExpressionUUID->"064400e1-5fe1-43f6-9c8d-\
eb23013bf153"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"jitter", "[", 
     RowBox[{"{", 
      RowBox[{"dx_", ",", "dy_"}], "}"}], "]"}], "[", "img_Image", "]"}], ":=", 
   RowBox[{"ImagePad", "[", 
    RowBox[{"img", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"dx", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], ",", 
       RowBox[{"dy", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}]}]}], "}"}], ",", "\"\<Periodic\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"imageMaximizeClass", "[", 
    RowBox[{"image_Image", ",", "channel_", ",", "loopCount_"}], "]"}], ":=", 
   
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "featureNet", ",", "netDims", ",", "newImg", ",", "offset", ",", 
       "imageList"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"netDims", "=", 
       RowBox[{"NetExtract", "[", 
        RowBox[{"trainedMimicNet", ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Input\>\"", ",", "\"\<ImageSize\>\""}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"newImg", "=", 
       RowBox[{"ImageResize", "[", 
        RowBox[{"image", ",", "netDims"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"featureNet", "=", 
       RowBox[{"NetAppend", "[", 
        RowBox[{
         RowBox[{"NetTake", "[", 
          RowBox[{"trainedMimicNet", ",", "\"\<softmax\>\""}], "]"}], ",", 
         RowBox[{"\"\<L2_norm\>\"", "->", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PartLayer", "[", "channel", "]"}], ",", 
            RowBox[{"ElementwiseLayer", "[", 
             RowBox[{"x", "\[Function]", 
              RowBox[{"x", "^", "2"}]}], "]"}], ",", 
            RowBox[{"SummationLayer", "[", "]"}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"imageList", "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", "image", "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"offset", "=", 
             RowBox[{"RandomInteger", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
               RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"newImg", "=", 
             RowBox[{"ImageClip", "@", 
              RowBox[{"ImageAdd", "[", 
               RowBox[{"newImg", ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"jitter", "[", 
                  RowBox[{"-", "offset"}], "]"}], "[", 
                 RowBox[{"Image", "[", 
                  RowBox[{
                   RowBox[{"Normalize", "[", 
                    RowBox[{
                    RowBox[{"featureNet", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"jitter", "[", "offset", "]"}], "[", "newImg", 
                    "]"}], ",", 
                    RowBox[{"NetPortGradient", "[", "\"\<Input\>\"", "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"array", "\[Function]", 
                    RowBox[{"8", " ", 
                    RowBox[{"Max", "@", 
                    RowBox[{"Abs", "@", 
                    RowBox[{"Flatten", "[", "array", "]"}]}]}]}]}]}], "]"}], 
                   ",", 
                   RowBox[{"Interleaving", "->", "False"}]}], "]"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"n", ",", "loopCount"}], "}"}]}], "\[IndentingNewLine]", 
          "]"}]}], "\t", "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", "imageList"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"imageMaximizeClass", "[", 
   RowBox[{
    RowBox[{"image", ":", "\"\<Random\>\""}], ",", "channel_", ",", 
    "loopCount_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"randomImg", ",", "meanColor", ",", "netDims"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"meanColor", "=", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"trainedMimicNet", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Input\>\"", ",", "\"\<MeanImage\>\""}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"netDims", "=", 
      RowBox[{"NetExtract", "[", 
       RowBox[{"trainedMimicNet", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Input\>\"", ",", "\"\<ImageSize\>\""}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"randomImg", "=", 
      RowBox[{"Nest", "[", 
       RowBox[{
        RowBox[{"img", "\[Function]", 
         RowBox[{"ImageEffect", "[", 
          RowBox[{
           RowBox[{"GaussianFilter", "[", 
            RowBox[{"img", ",", 
             RowBox[{"{", 
              RowBox[{"6", ",", "2"}], "}"}], ",", 
             RowBox[{"Padding", "->", "\"\<Periodic\>\""}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<GaussianNoise\>\"", ",", "0.05"}], "}"}]}], "]"}]}], 
        ",", 
        RowBox[{"ConstantImage", "[", 
         RowBox[{"meanColor", ",", "netDims"}], "]"}], ",", "4"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"imageMaximizeClass", "[", 
      RowBox[{"randomImg", ",", "channel", ",", "loopCount"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.869043442790674*^9, 3.8690435144646378`*^9}, {
   3.869043566237838*^9, 3.8690436374125853`*^9}, {3.869043822479595*^9, 
   3.869043852018792*^9}, {3.8690439021725492`*^9, 3.8690441326673727`*^9}, {
   3.869044283808867*^9, 3.869044344146763*^9}, {3.86904453337958*^9, 
   3.8690445389865437`*^9}, {3.869045549203043*^9, 3.869045549664352*^9}, {
   3.869045580193554*^9, 3.869045601356164*^9}, {3.8690458099780283`*^9, 
   3.869045812019177*^9}, {3.869046775218211*^9, 3.869046776549999*^9}, {
   3.869046808478488*^9, 3.869046857953596*^9}, 3.869047552467507*^9, 
   3.869047640499732*^9, {3.869047752717073*^9, 3.869047789479907*^9}, 
   3.8690514894676657`*^9, {3.869371697654183*^9, 3.869371703842403*^9}, 
   3.869371753102462*^9, {3.8693719766407633`*^9, 3.8693719774238234`*^9}, {
   3.8693721400891943`*^9, 3.869372154355419*^9}, 3.8693722769449863`*^9, {
   3.8693723635889072`*^9, 3.869372367807911*^9}, {3.869372492822246*^9, 
   3.86937249667198*^9}, {3.8693725712486677`*^9, 3.869372572993176*^9}, {
   3.869372729839623*^9, 3.869372769243021*^9}, {3.8693728488236027`*^9, 
   3.8693728802682037`*^9}, {3.870484823331211*^9, 3.8704848275055313`*^9}, {
   3.8704848707325068`*^9, 3.870484885822171*^9}, {3.870484927484123*^9, 
   3.8704849501417217`*^9}, {3.8704849945615263`*^9, 3.870485041589013*^9}, {
   3.87048522435773*^9, 3.870485236099593*^9}, 3.870485281349731*^9, {
   3.87048539725879*^9, 3.87048539829513*^9}, {3.87048543243439*^9, 
   3.870485433619051*^9}, {3.870485482114197*^9, 3.870485482569384*^9}, {
   3.87048552619597*^9, 3.870485527220368*^9}, {3.872509520450396*^9, 
   3.8725095209586782`*^9}, {3.872515393394568*^9, 3.872515435531045*^9}, {
   3.872515497496848*^9, 3.872515507484406*^9}, 3.8725155750313377`*^9, {
   3.872516274331407*^9, 3.872516301895595*^9}, 3.873537632782539*^9, {
   3.879408081441745*^9, 3.87940809846659*^9}, {3.879408241848922*^9, 
   3.879408293640955*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"f801c586-80df-4ed8-98e4-07d1fa498977"],

Cell[CellGroupData[{

Cell["\<\
Creating a random image and modify it to look like a spider (to the network)\
\>", "Subsubsection",
 CellChangeTimes->{{3.8735438231240664`*^9, 
  3.873543859507203*^9}},ExpressionUUID->"5c4fa209-896d-4b2f-b147-\
dd92ef33638c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomImageToSpider", "=", 
   RowBox[{"imageMaximizeClass", "[", 
    RowBox[{"\"\<Random\>\"", ",", "1", ",", "25"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.873543872955289*^9, 3.873543887701442*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"13d4f005-b07e-4580-a89b-0143ff5594e5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"randomImageToSpider", "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}], "//", "Thumbnail"}]], "Input",
 CellChangeTimes->{{3.882591017744451*^9, 3.8825910190988007`*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"3967b252-7804-447d-88fd-95c8b5bd6619"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
iXEz1OTr+jCa/u8eBtVi4na7kfrrKzM/VbCrSQyZGR5M9NATa08tcahzITOs
Dr/rzUXvej6XGsp5vjabvjejGD2/msELYsjqEYxzka6M8dSU9GEJmK1rJAsr
m8muQxriOVlxsPFl5LoXYnven6dr4ljp6sWFLrk87eXPgqWOuP1Xg7a2I8kf
7hGhMJG2XwQrW72n8eByfpn68yrwAwNnVLBH4YsLr17jsbeMFIcE6pVc2dOQ
RPPKDAyGuaOWW85u5VzdmuMNeVn4F8XxtJ0tUlvF09IGsiYHk7a5imkfNMRt
Tj5Ltlix41UKQzoHcOZeEt1NVKXl9HD+UPJZd3AzOfykkGkJuZwdqirTOimc
trkaq+sq8tk0gCWKR29T9mBiMxccW1Xyt5I1f871ZH+2Lc/0A5jSxRM3yzSu
tMthTXI510x9WWWVStzARMxd/Bk0I4HxbuE47Uxk7SpnTlf4M3a7miz1aCKt
rwZxe5+qOJiUY3AjjRmf6tHrVMvs80VMamIkHY/qyfDuIYTtrWPq0p+s1HRi
pHkVz6PT2Nrem+rROai8D+COcya+F5OU8/mMnCERvBudwonyStYd9WCx4nn5
TonE2UVg07+Exs1DCN1VypjpvnRbkMbhv1JZtzuMncFqsrqPN06G/kxaU8KL
o86s3RjEqyl5POwfT83OeLatr2bxUE863w3FdFwp43Z4EPooBFVdZUbGBFHp
V8mtRnXorasltiSaSL0g1h/MZ2nvaIImKr1vGUqPIqWbHNRk7Ig4/mnfTCbY
FxJiF8Wd43pyd34a61sGKn2iJeUzs9A08sCyUzLT9PIJ8Y3nYl4+zysTeX41
A9mQQb+/8ummuNPhrpWccVTmo20s3ZZX894ykPkd0pmd8/9/Jxx1J4kTNpqS
2SKDFeFODEvRkV4KQ9ZdSed4lIpEn2ok2jfiWKCc9b0nNGVMVhE6Ooay7qiR
/Gibzv5uuvLd0op0FyuFe3Xl7GAvWpm9pLiijLBGbjxQUxzIQ5nBicnYz80i
XKea6VVWzF/2g8L4XHb/48TcPZ6krdAW5xtVjO0Xw5pvjaV6u5b0exGPQU4F
Z25nEVnvid1TFdlhnUOyWyQHP7UUt1NKFj92JqebnmRHqsv7ilh+/dfAlHJ9
GdQ+l4pHeUy6kkLg3hgMROnYhAL+GJ7K69pKvnxvI8ubpfHRp4TzC5tKxTV/
6tMamN9NR4YMDeXKtmi2GqdTWu3EjauBxP7lhddQL2bvq6Vbkge9lLyYXlTK
mWdJmJyKxfFYCkM/11LoVI75hDxeDFWRjvEKS9/KZnJUDLnjQ+k/qpBLD0sZ
ssmOvDf5jG6jKtVl3zm+NJvya5ncy4jhmMIkcyqKaGNqjfn9HP7plI7VOFe+
3VOR9tsa2Ng0lf7+avL2eAZDC2P56ZSK+WJl5pMzGXopD639wWz96M4gtwI2
WuXzef4nVh2sYuWoEE7t9yYkIZ8qrSj6f8/gtlRhrvDn2aERLP8nkvNTi1jS
SMnZFkXsv52IZ44HD43VxCvAhWkznDEIMhSteF+aacfyw6CxXJVgOptH0eNV
Ce3jMqi9F0hVahYvU1OJKAxkjlo97xWP/Ss3SWHxAhp76UjQaT8mztQQg05q
kq0wpOPjWsZmFDCnSyJrQqvJTstmUAt/Uv0V5l+vcNuJ31zppHxeTVN5npHA
9I9xzN2eztwpNexJjqVf05u03BCKuWcyfunJDHii+JJBHW4rPfEyUlgk1kiu
ZGpJ8rUI8lu2kbOL0jlc78fdzqryfKqGzIr7yrVfemKzqpksS/Xh0SEtGRdp
JKeuqsoLj0bS5oGK5Eem4T1FT3o89cX4YCyJzxs4/aUGP8tcuo0oRW+LuvhH
5NDoroYYfYvmXIQfoZY68lFhxgfplhiX1tO9QzIPlYzq/FVDvBbH4Bnhz/W1
UfzOy+PiRl9WJMTQs2MST44E0GxDBd4bCjn0wYKMCi2Z5uLKxfhArrSuYajO
Z/odsEdtXh6xzlYMehNGcraaLPEqxKK94oAvK/gyUkfmHyzk27UMhmcncnGk
D7eVzDFopyLL+nhx81UF7xxysf0ZwOrf9TS55MKT/S9YfaCQptv8aN/4C1/f
qEiRTgLa/V1oH57DoU8NRJoEEzJd8dl/FcfUCKHfncbybFE+k44Fkv1eU5bZ
qcny9X7saFHP+Xet5VRhBCaOCtMuyGRIbjz/tcwht6MN3Yf4Kt2RRca6DN5t
ceNQ5zCWKQy4M8eXwqIwDH8EYPPlJel2vvQ4HETtOS88DkTT94/XRCV85leZ
0uf1r9Ev/kYPI0uuqjgS7udGjG8Ojw8qTFHxnewhiSQVvqF263em2Plwf4gZ
D1fbcptsuvl/wKqXLV+muDFi9A+uTg/gaXQESdfcWf7EhyUKq/2KvsbOo66Y
flYRyz0FXLXJoPStunx91Ej27qrE9nUhnS0MxaEii7Gjc3kztrHk3bPHxlxV
tKwNpJeDF+vu1/Nwcjtps9earR9ay8o1/WSshTJDf3QUq7vD5FS4N+PeqUqW
fiMpbZyIXk49jRJqyFa6p4NnHnPjWkqrg9X4rfMmbZgNfWNi+ZQayGW9h2Tt
/o2bow98CCc2w46706Jp75RA3agCBqclsGNTCCs3JLDaXkUmj09ijVowt9rX
4WpfT5KFPX/kV7PKNJP1PvHMjsxksHoyvhYBPG5ewJq30ezfHoLd+ygWXXGn
2cg41r5K5qKKsseNbBiqXUeSe2MpUlz1zrBsNPfFUGsWypiIAl5WpeE5PoRO
hh5cUXg6LSCI+QfD0M7XFtW5zhx+GUtfT39O+TjRengiGke8KbrynqyZKrJ/
RTVU+VB5sZn0GtBEln3+zrgMPbFKaSbhQx3oalTM7vDGolOh+N6hejYXxNK+
6BtnG2J50SMTnaXW/H6cyiTtROb6BaOWX0Y31XwyHUPZcENFRuq60aPiByGp
SZx97MZgJa9CF6bSce1Png+Loc6vhsFK9+1v7Efc4GTuqZdQZunDFQt10ddV
l3j/FFqhJk29Khk9OZuOpo3kytj28t2ohPXKOdq1px6jNj94NiMdt5/WHD7s
hOroTJzP29JoRATHq1P5amdN4mEvxtSXoTrIgWU5dsxc44VOhTV1HX6TVBeJ
vkkGh7MC0NqpIt+Lalju701sbhUPVySwNtCdm7/z2HXkMyn2dvxnrCtX/KOZ
utaTjtP1paxvLN2dQ8hsqiU2o7NZFqLwjF0WqwMMJet5FrM8wxkxKphj7aJ5
+7KA3ncN5E1yKMssknBbWMJG5axENa7i/udiwuY4896qipMPo5mj6ofJ9nL+
nh/KdpsgYtuWsm91NGZvrLisW8s6/0J+GNtyvlJF3ihnoPRHMj771SU9pIV4
tPXmdn4DM+yr2WeXwt4VdZifU9irNpatys/nskvpQts47E7Eozc1F+NEb2Zc
SmWWTyiTnroxY24VC2eoSM9EJcd+NjBKWdMHbim0+6ojEX/7cP2VJ+tvhLJ7
Tw7dwlJ5FVmIx/R6+in7bp2oJu0cqji/xpkdug00LA7nylkXbiiOVWIQzH1n
e+4qHPvsqheb08LwmVBEyDgNafivlKToaCYpOfheN4CX29I5+NSTJxqe7DPS
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
Rfn86R9M1/ElrHfwxyDDH/ORkTjpnaN8uCteTerRHZyMytUgeq5OYnaFiqjN
cOWMubJu41Tktro7g6YUcK2tigwxjOaHaSbzRxUzr/l3kv9Sk2qzcgaOtcdd
8etDf3qS/SyK2UmaMjA9gY0tY/iknCGjNE8OPrBmRny9slf1XD3vzgBlr9a8
KKZ3RSwLuliyYoMP07SsGLhR4fj3yRz/ZUelnrHcWlnO2J2erP1LV25ev01b
v2A2vagnZZWqfFV4Y+/USCpbfybRIwd7xauqO4QxKdeaXHNdaWibyFaXAPZE
+TNLeb3UcYHMnhRIr+AU/u7pheNSPfHRiaHotxQ65NZx9kk+k15kMLFPHvcf
pNJtWDKFY3Lo1zeSjqH+qF5OYv+eBHb18WGmwkP6L+Kw0LEmal8ZNy7/YtcW
BwJ9UrmwwIqpjlnEvlEeeyOVKfsVh9kUSNa8Aipzk6nbri67nJpKerswdl1q
Ijl6hrJsrgNjzI2k68RWUt0sjxhjddH5VcLRgFjebvRnWosSptuEY9iplr9r
VaTLX760rqnkm30p0/cH0k1x91anUvn1RXG3ldrSEKomb9YnYRFfy7DsKhaE
/mR65wxMRsQxvZ/yvAvi8Ejzw61lAi1vFvEsKB1LL2scAnxYOj9cYWUH1miE
sW93ICNLnHnTUV3eHkthQYtg3OZoSW4/HVkR6Y2nWT4RvbXENyIE296l2Hwr
pluYF/pzCjj+M4sTrd4xMrmOqx3jODrCjZdt4rHWVhH71T9xWFWIZ99Mvnt4
Y2hYRMuQHB4HOnJXmeGhNd6kb4zhv6k1bAkoIHiGO1lGVTQ+d+NqiTcr3pSx
pW8eB/sVY2WcqTBCHjO9vhNa7sngfrnc6xvIvT9D0S8KI7CJE1cVfviyKpzq
x1E8/r2c2/ujSWjtjdXQDMJ+qUqGiro8qaumelDN/3/+SYJaDa0GJBD22Ip5
S0PJexKI8bxEEr2r2Hi9gZJTDaw43lYsmveUeuNUcrqJvBs+XTru15ZZD0v4
alrK0dlpXDmdSaDUcyo6kIs2yh4O1pNfdcXM3FhIj1XlRC9JZZ+yBmpRAQS7
2qF1tpEtYytYtDeEZRoq0rpUQ3xtythRoSsW2SaSuzQOuwhN2RRUSeXOQFSq
nDjcOYA803A+6Gfy+kgxg3LtiLYoJmVQCY/WhnFzlb78UjwxJj6a/ls15PeW
2uK+KYZf7yKpelFA2kNP1jWNItAjmMQIXzqVFPG8vhiLpy40O1TFo1IPWq78
zrM/y/h6thoW5tH/SyYH/wrjQcdg/MoSeDznK+OVrmnjn8L4zSk4pPtjorxG
nwRftHI9+eYeRbPcROxKXRgRXskAn1ImXYvliMIT61KduZ7mxb3EKh4sVZOh
7b5z9XMhGzrmYHLoK1ee6UuCfyYNN5T3+7WpDBnUSf6bn0nfSyZy8XNfiYxQ
lSeNtWwpr2BrcQ5tHLSl84cSLivMVXQtkxLfXEIOeuETXci3weEEqMaSpDhZ
j51VBCqMtme6gSRe1JRRqzx59DiVf4vy2PbRmvJJNcx/Fcnvlz6gN01Hltj/
ICjGiyrl2hMiHfGuSmSyUwJBAzIxqbMk1TaLoxpBjLUMx9hRQwoVttA6n0rq
RnU5dDiJ3BAvDB5rilO7TI5/deZjk0ols6Io1AxFZZyBqJ2sIfhBDv9mplK6
0ZVp64KZf1VXHHyKyV7uTecO2vJ3ailLzRVnVvZluq07c/0cUOmrIba7bQja
4MaSURqyfdRPLFvY0X9JEZ1TArGM9eH2//4vxGZ7rHYrf7wL2NLBk43rAriy
uBb3Wh8uh7hyPTsDn/mJ/PbCkfwVneTv7T1kpqY3HVa0kjdP24hjahqn14fw
8I2ROL3yopdWCjt3l3JZNQjj89ks66CcxRkBdHKJ4vL3DI7ei8epJIzjT5JI
VeZ0+fEv/FjwgXFa0cy64MvSZW+xWvuNAyUe3Hh0i7yFd7i+PYLNha/4UuhK
z/WuvJkczvHB3sz1zGfAgFhM7yvzfC6PpNB0XFqG8MA2mJ09ssla8pPhMzPQ
fPSE6s/vuWSrI/Pso5hY8BPNU7pyNiuC75ss+d9nxWUMfU0zz0i2nvXgicYP
mp21Y9z3OK780pDTDY7Yz3Sh/YVI3ij73vlbJGt8G6gbGEJau1zer08g/kUY
QRN1ZfWsGibFuWO5sBibbhn0ig2gZlAFcXfsGeHvzCK/OsycqihZE4W6BFNS
8oHrIeGs3NFEnG/k0kLfg01vdOSXYxGuZoFUWzjxbpsr5xRGU5kXQZ/GVGwK
7bkwsa0s0Q1jb1owpzTbyr0od+6MiUGmN5HLhyq4HuOGg9JLWhMD0fw7j7ad
g9mguKTrDms+nszhamkMuV3CmTG9SvHQIpqf8qfqf58NuisRy9MetLuuI8NV
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
uz+gUqImv/6twmvKJ8Ys0pFsxbstd32m3StjmTYonz4u4ZyabSizx+XTziuY
cr1a9p7zJfCCM8sVNz7YKYRWi4IpUjI57JOGFFlG83mEjjQPaCHaQ5PwXKol
EQp7JPT67z0dyghRraWiVQwWMxLxTUtn1Dx/PHwraaOmIzUL/WhroC7NVbK5
ti+OYzqKr6u85amHO1c213Kx5B3PSt8xXbOeH1tDMLiWytovCm/NiaNfhwK6
jSjk8aB4kl5lEFUSz9D27jw65MGMEnXpuTyMknsfsfugKlmjtCR4yldSfyi5
P0Rhwh1O9L+uKp3zdGW+QyGLDdIp35vIW2d3yltqSbzChZtSnjL9WhOZfq6M
xYOiuLPXQN4llHPzXBHeO/IJfljNsH4RLNYP5mDvQjZ5mqOvMNDq6XkM+zMa
u0557NuSzia/JJY1ppF2No4xXdNYUKYtnWYo7vbUjS252mJ3IQ9bqxDqQrVk
n2Mc5rN8+UI9u256UeWawVqfTHwUx5GZbiTdLMFGJZ2ZCz3ZFaIm85LiOHjA
iXMRKnKsTSJHczLJditDZ0smT7dHM/dJOcPHhnPT3ImPyvUOGNVEtjpYM/1s
HofPqYp/Sj1HdNL5fqIY3dXRWG8swHF9JM//iuHKVS+GV9ex6XIByTMaueVS
i3l3pdO/Kzy21gGdcfGUNlbwRJlfs3Yx7NZWl+5/OtO9PJbvTYzlySyFF67E
0eOqhkz2qKYiLJ/9pZqS0V3hftNYempUM65rLac3p7P5YwNXIrTEv589v3tU
cC0pnm7ykz2PNaUupJCI074YhqtJVoaGtPzyiyXB6uL4II9pB/wYsrWByaa1
fFwVy/ScOOpXqIvXMAs0tqjJrPs5ZOi6YrulXumXKGKVnPv5XEuKtRSW+BxP
r0IdeeuUxsgxqVwbWMnyaem4zorH9Wg9k/MzeH0mgeVvm0uXE40MXhXMy9W5
fA2wZWZcNBtcsuhMDk9fJnDxbEu5GGIqk5+G4Xe7noW/HDl9PYHbG4p5vD+M
fVPS8bfWl5FuSt4fy8fnWiN9L1UzROGDC6PUZMKPOO4oPDdxcTEpSs4fTnVk
nU8Byx8pXGLhwTW/RgpmeZPsmc78i/qiZuvCCTcrbtyuoVemO27BVrj3K6bB
MY/lJg40jM3m8qYI9hwwZ8K0YH61iCTnww+Gr3biQPYP5lywxO59NnOeeKG6
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
w1l8P56g3ECKAr05LWfkRW4ETY1j6LKkjlnX06m8Lc+gqhAHj2IGp/qQ7JdI
7M5A0j1zSbqcidHqVM5kxWOqYyZqpmiJnc7R0FshcPnIE9vfxEw3F30fZbOu
rx8jg4zEJwvJWdtCOfRc8lpNAd0crfjpKrPwhjcXLjmzzSeVUyaZlJ1PZ/Lw
KForVKhHuOK7IocZK3LZmFzMmMdJfN4XwbBjv+haksqLyd60uehPwzMGIvlF
FrtvRfDMM465/lF09HTDSTLc5h8KYdfEgxMPGgmfPU1FxhEVmwY0EQ/M9UT4
6mB6NTYXeRvV3DVVMqhPLVoKJRteJ9CILCYNT+Vi9zis+uQwOF/O65lfrOmU
QuBQDTM0Sha1LKRibzJNx4XRTFGK984USptm0n2Wjmj7voiTbcKZPVZHbJwk
feS9P+/7RLJA8sBZ6fzTFqTRIS6ceackp63NYsOiHD63DeP17iLeTUqly7lw
Mh5ksUI7h3MWMSRMLKP4aQWKDr6En43BWD+VS/oqOpJM8HHp/FHxWHeqZZWD
ifCdmohORi5bWoWyqvgzE+rrCZjji+dka9rvKid/ubaIULvifk4hjtkk0fSu
N92eytd6Iq+zeyiXFkgWGlzD8J5RfFXn0CCqCNXyAPq6ptPU1p1PQRpaDs7k
fWItVn9IDjTREVZO2dgs/cHyCYU0lvzxaWKEZPo0jsbLXfviwtz+kVhfLqCJ
0y8WD2sgtvduLPI+qXmz01B87plATztXLg2opcnzQroYOeDZXFecupjByho3
OsRXMG5qNf4umVRtjaXdGW1x6rgLjcclk+mXxuApv7lVqid66mRxY6WaYxd1
RGR0NJvygtjXvZgm6hIemv3C/HQxR99G8shEhfkuY9EtJ44ZielMCjUSAYUB
+GfGE93UVBRYufCv+gtfvzUTNZ8VItTEl6/aLcTrlbpisut3Hp8rZF67cuI6
BUi/K2L+I7XkjQhuHzMUV5PK+Z4dzKBdVVje0zAwKYyDUZnodCqhm9pf7mMd
ERdCULiGccxBS3y2r4CyWMzna4v5R2KI0/bk7r4CRus6UiezolhmVPgNfWF9
QcWeEWr+apdD7iRvjN56Y1et4UxFBqW1jcX0AQ3F6//y8NbREsdb59M9WjJF
nZrkNp4MmhbDsmwNvw6UYhDqSLtTBqJmSRJ9ToWysaSEESOyKK2I5pZOOGVa
ISTFu2H9y5fhh95wtZ3c+Z7plA7O4OCDCDw8jcWzWRnsWBpAzDoj8TVLzfrO
iXgkp3N3fyYLvSr4s0LDkTbu7N9jyek3RsKzaSnHnEKZLefibpMKMgL8WJAX
z9YBhfw6nULAegPRrqRQOn0Ys1dW8mJaKX2a/uSoXRmfCgvZoYkm8JqxGDTe
QoSH5nD9RBEX2hTRYXY2+msUomyynsjL8uSEm5bQH6onPLOVFD/XEr8+a4tO
zb1Y9E0hkheXUroggHs5dXTdksXmw0lMu6Et2kmejZH80cu+DHvfQkxl15ec
LuNmiZ5oNjcUu01G4uAhffFCusbaGHMxv9Rc5B9KZbOzQiwOzmSXSwRpiYU0
/1tf7BviDw0VovSlmqwfMSRPNhLjN6Sg/ieUOdJz13n/5GSoK8vG1/G0aSiG
p6JIalPBhsJ33DRy5KSymsVm+QztnsLwVSF87xnA+AFJKN9mcXmPHf2eJnFb
MlzzM07s25+NlXs6r6aGY2WRwnGTIvSK89kpPdKrVwGubTwYecKPo9Pr8Gz/
g8yNfqibGok/cgq57iq7ySCaqY8TmDUtnE4/yvn6TIVtYSKuy+MI3hWF9iJ/
vk7TFb1+JWHRwY+8ZUUcvh/FrW5R1FbX0bBtHI1PBqI2ryAh14GTGhe8JHOa
zwlkQGAAk+Uz3fe0GsUrB6Jc1AxbFMC8/V50j6vGdYB0LtNYvvWqYqPQFhuk
S51Nk+eoZU/ppgRe+dcwqCwO8cuak1fSyd76judKO8neGrqNTOaPAyoanIrA
y9wFU59EdiRn0KyzRvq8khFpCpFZpaH/jnSUt+O5/DSLe7nvme9azrMmOYx/
6oD50xyq5I67JXlgcMmLzZ8KpcvJjk8tpfNThRjZ3JvUa7kc+U9b6KV5or2g
BNtbRQz/4MPJ28XMK/fC6qELhZIdz4ckceZOLHb/5rKyaxW+HrlEqcPYcKGU
qXIvro4u5cSGPNq9+M7kNjpi1pMEkvTVPMyVvdQ/kyX+X1iTH8vOpZIxLX5x
2cWfofaFTJ8cxQtTbXE4044Rh+xIlp1pvzwe45AgRu8uJX56JQ9PO6NfHkH6
XDlj8aG4DlGIohshGMqMG/ZXNbrBOfT3ssH2XhYX9ErpN/I/xt+KxXJTEcZv
fzDF3UCETCrG5HoGASfy2H5IiUN9ENbGCvFPcQL9zySz26iWPrcCqTTN5Pu/
WUwuVjMzVEWZVQCH4hRia1kQl0ZVsX2JkSh4rSakXQG3X4ZRfCKK7J86Qr1W
V9w/p8HBoIEY11LyZDNvSic2ECqTIAZfCcA5wUTc+K1kX24od/+owWaIki5R
sUz5r56/lCl8bZGHjnky3calMqdfMJkHy3FxjMHKzA8H6ZHe42NxfpDEoTW6
os/JFGYUqnEdE0HLUQUs2R/FnuGFHFXJTFlpi38nLXGvbQ1+dT6sv1LKyjkZ
DN7kxuNtYfxzSiEShwUzxjCOFesV4m7zMH7+SufIpji623vTtqqA5kXSGfd8
IrTIVJj2iSfxvAOjvpWy9G/JC9WxDD6VzSbTQuaYhXOymbxuwzo2zQzioOxC
7Ye1fHngz7WB0sGc87hqbs1/roVkP6xAxy6CIq1SXraO40ddBPop+fz3KYtm
FWGcXFBAvylltE93YbK2luj0VxX370QTrlNN605FmE20o8k/WsJ/eDKWLdS0
UGsL92217J5rR8rkhuLEyGiqbB6xYUYz0bh3EGXKALac1hcB6/LIvxlFjZu+
+PjNh1eyO1v66otTGY5c2ZHDhZEmYqFDNIUyD3N6JzE7XMly6ZgX/1WIw3kF
VHX4yor/zETvayE0uh+OZ42u2NPTk9J/o+kSbiimOmezuzSYL31Kad84nrRK
yUsJpdzoFsb05S4YDCllfp8YUp54sOXvKn7tD6bfbw9mPs/jaEoqqxqEc3x4
MYe3BjL4qzM9jumJ53m6wifzN1e/K8SwTHORM8aHo78S8LZMo2WED24rqvl1
KZTMHkHyWo3Ekq2GYlF2AjUHalidUc/iNWF4vc9lX7EXKR6OvJesOKNCesdV
pfRpXzrpxTLdXEVhy3AaqkNol/yN8ZpCMh4WYPunIx/XF7F7YgZHbntyXc7J
6AGO5H6KZJu3oTj9JI6JMV6EjCuh7kQOEYtTqO5awp47JRRvCeBB+wSCRxbw
d5NgbDeEc2rqb7YH2dHoZhDD78XTJK+IMQa53PbVEUfPxXF/gp4YOkdHTNtm
hXZeCrdumAnLpa60n20i/mmvEBWjvPn8t0IoVfrivaGK6Vu1RahzET19ohnf
po62V7SFhyaefyYmU39NId46uRH2Ko+V8uv82/jxUtFAeMmcn+URjdkAA/F8
m4qs54FoNS/j9UDp3cujsDHTEm22lzL4cgB9juiIoNlKEn8m8vdkhfB8oaLl
j3jaPKih46J6sv6O4bm7mo5nNbz1SufPtjm8kjtS+jmcH72KSJIs65nkT9nJ
BsKxbWNR1k5DkpWFaHXTXITc9ie7ZSfx58DGwneaEs/55TTfFsvP8e4EDc9g
V34KKf9G8WlOCh61X9h72o+uCVFYXcrkZ8Mw+m9I5ennXBpGRnLRpggxMoKs
kkgaelRwrzCJ+y5eRDzTE0fWthEdzcJYNVJXtFZ5cCjjN/0qdERCsQdra5T0
7ZfPWnlmNgd+k95HRzS1y+dPlxjaf8gl6IQLWV3/93dqqlidn4zV/hjObDUS
b3O9aFUaQv83CnG0VRgG3yRvOJgJ133p9J0RRZM/K5gbEopNfx/MRxdy2r2K
y0OTWHFTSzxTWwhNXQ76GsnqfrGs6RtKwM5yVneN4XeLaK5nJrHowQ9W9HxD
ZkwWNmdCsOpkj//iKKoaelIWGsHzVTb8rRPBnDo/DE/qi7fDjYT5zwhyzItI
7JLB8uV+dBsbzeieyZQOVHH6oJ4wNg5i/vdc7FfUsU8VivcNDzS3c9BrnMkc
Qz+GdcziVoKR6D8mkljdYJxyk/loE47Xah2x2tqX0JYh2LTXFV8lF1tI5uk6
N59r3zxY6K3G83sEv4/bk9wsHdsoPbHKpZKp8l4qXhfSt1UJQ85GcWi4llBr
FCL+WDTDbcoYP1tNtGMOzXuW0EzHl5+RvgwtiSNa9sYO488ce2YqOo8sptHi
GML1ssgbHsBTS2sGPsnijx0xHChz5fbKCmb1jibysxcNemTT/2Ey3v4hJLco
YaKcwQaDP9NOZST855Yyd8sLqtZpiYlTg/h5xQuPlbVU79YwS/bI+vkmYrie
rtD/nshMMz1hkhVOM2Mn7hkXUvjVlvyU3+TuKuPq3wW8eRLAif76YvGnWhov
TyRfOnRggyh8y90p+iIdVjeB1K8e7EpJw+V0NeMqPFjTsZYLS+LRPm/D3EXl
1N6OZpEI54mn7MHsQNqXB/K0TUNxRruSqy382PJVW0xGQ2RuJC13VtDWKJrf
k2Np0zuLnJeFqJL9OFag5OXnFJqcUqJITsSyphLbLyGsv68Q3xfF8+KcC2Et
DMXop9ncKYjnlexDPVHF4qXuzDogfck0j7J3MvPqQ+jSIRvrq844/e999b0z
uWFgi/aRfD5pCpg41IuRs3VElHESIaUBNOmhKzyLZDbdcqJQS1eMPpOHJCWG
T9US73pn8GahA4U2CjEnsYipY7049TaViYappPv8ZPIkLbEjo4DW862JLsjn
qbsTGduyOL0/g0130vm9y4tH59LYflbN5WxnlH2zpbdIdmoawYGEetZvCsWi
iS2PtmhQu4Tw5o0NZi2SmfUli/Cbrgw8V0Hk8liUCe/48tJQ3AvJ5RJf2H/A
WCQHJOErXWvnBl2xe2AGHsuD6BuhK0rNq2l3UOZzsLEIOp/PUek0D18biWML
i+m2JVT6nJy3jzXyjIJp98qHzquL+BIeSNrTKoxzVbxKsqRPuZ4YdbMWY3t5
hksS0V+g4anMtMVXDITjgERGdfrf+wUNxVrZbwn2avavKif0RjwVXpE8WBvL
o98Z2Ax/hV1CHtNkJyelxhH5Z2Mxyiid937BbJypLwJbxFJXFU67EhMxsb2J
UN1K5pxrE1E9a5x4278SVX4xPuObCvOeGrY/NxI3hliISt14Pi7JoeP8WJbl
K9nWspre64pYOl5JVp6GqSkZZLcKZ1jzHKbNiEDxyYn7LSWb9EjHJs0b7btK
shukMNlJOuzDejr8MBIjs/3ocNpAZK2PobPs9QcLzcS9bzoiuEkoOxuYiE2t
zUS3M9LTOhqIA84FfBgbStukasaGZ7OwfxRmxdpi4rkiLCYE8Nf4MvzPKkTs
xgh6L5Y+3slM9Cp0wqTKXNzdVczyvlGcSDEWi13biIOyxyynaYuNnQxFwfUg
zmqbiGs5JsK/Mou2DpINNusL+x4RKM3KeVpRxcqGHnyZUUfcHF1hty+c0cNq
WDcmHNMsFQt35vDHMR/+kW7z5GoJF3X8aH/TB7Uyh5aOztzd6UibfTnYRH3j
Z78Eno3TsLynByXjvbiYlUN3/wiamKfwR1ohRoMKef/VlT7NoyiNiqDhSNmh
UeWc3p6N781kTj0OZGqViuxJ0hWOaIsx7VqJ7d7xlDkVoMgux/GXBz8zG4im
1xuKxiPteflLxd5Groxr7sa1vlqidKs3N477kD1NcsoNNWnLoilXFjP1dz5T
ihKwmR7P8tholBesMRypLV6Hx9K+KJBO/bXFiLWVDB0SSMnuesz0tERhMyUr
zlax9a6h+HdVKK91GgpdCxPR8nABw0/qCG/pk0keAXh9jOG+nw9ac1QMC9Gw
8E0WA2JSsJuXxLgdYZRfcCb4USUuuy1puj2IDjeriDsmGWK9K5+lPzquimR6
zUs+FmiLUhsPtk5xZucEI5EYaiQeH1KIVcbVvHKv56B9JifeZHDguIYZYzwZ
3bmcXmuecGSvD0/3qiRLpzKkMAbXZT58bRzA2n0x9HPzoNzfnrhXKixOFdH1
vzTqjkXw5Y6pmPNJWzxz8CDAK5O4K2riRvxiS0A1SyWzqPUKeRVaxVArO0ST
31w7nsP2KHeS17mQ39NQPAzVEZbeEYTFq7FOSiVxTjRjHYKYfC6Dcrc07lk1
FjfahJA3JoNlDloix9WeS6ci2d9dTUb334yda8vQ+ioqBjhx87MfFnMKyXWM
4maNCuXgbH6YuWHRLZoE/f+9J9xInG6WQWGHENQv5Ln3LkB92hsTo3BUKjfe
TI6nzy4zUVEmGSW4lLvxqWyUnTVjTgFReSWs6xpNi5IgXPr6M7JFDm4HM9nv
n8yUHT48dpMOMa6huBjuSxv5/DYX23P+9Rfqe5qLieZqetkoaedvKGad1hIH
Ze9nV4Ri8iyN0X8lcy++kn/ifCno647eXC2x+L4LVzYk0OWMjtgxV8WfJskY
diti9ZQSJt9QMs/VUBxapi3+GyjdeZkaw3A1Zz8pufaoghLzGu4HRvAosBCb
ojQ2vc9B1aGSYV+jsdsewtYTBbQqj6TqZBxNUwto0zMWU7lDF97oiNP22dRN
s0fRpQoPowSmTEpk8TlDMSo9kRV1sRx/Jl97Rgz2Lr4USV9+3KAEk+ok9vnX
8CVdT+iVeHN3YSW7i2qpLYrh0IgcLDdH8L5fJtHNcngwugJ1+0iWBSWSKFm2
masKmx0KkZ6YxPMTGXRQ1DLndRmd9gXjskRXDG9YzksrFbvvl9KzLJO118MY
NEpL3M3LxDIxhTVd9cWZNdKdNbL3I/MZfraUDT0COPk1jyybNNpKP6+WmXfU
IR+fevmas8uICwum9okzG7YVIvZqi679PEgPrmRSlmSLd9b8sNER+1oYiLvt
JHutLiZvQhG/41IoOlnHLWtjkdMnEmv9atrUG4mLA0KIDKzFZX4aaVN96bux
jk5Ha7GaGs42y3SeyY8neQRxarO2yAr348+jvjQNNhL1tSGUN/7f75UV4mRT
ee+Tqmh+tJonF8PY1qKM9LoSauvSGP8whJl1hew7X4nVeF/2/VGBgUJH5AZJ
pqnUEuPr5ay4ueAqM6ZrpDsuW6IZus5AjDqSytEeHrhmlBI3vobqnUrmrtYW
H/NC2bs/jm6DtcWgl0lcva+i69lMHFdrmHn+NzqLC5gfqye0Bofz2KeasNUJ
fIotpaVtKW13hXE4N4RjR7VFr4pihl8IZfjVcg58NhQJM1R8G5nCmNn53Cj3
ocZEIfTSTISpXQbrcpLZqgoh9WcKM6VnP3AOYdX2XLp66ghHOdOjbqRwdXIt
Rz4m0/qokqVDdETLvgbifRNH9P/KYcJ0NbuS7Zl4yo/la75jvcyBkAZa4pTk
Wjs3JR+GlLBlnPSKrxl8W6snHjhriw/x/hyxLaHjGEORtimXbzdkPvs1Ersa
qVm4xFxkJeiLcRGJ7O2pK97u0BIb5zpSLJ9RgyBTkdPamhGfdMS46WW4LTIU
phNKqHRL4OSTECZalNOp1ES07+6JvnU+XRxTsJgZgcO4QDbHu/H+4RfK/LTE
mK/pKCp8eNdJIW4v96KlZLytQwpwMHiDz3l33D5ruFRsScfxofx2jydmgopz
V/Pxb+nGmfUfGHXHkvaHYzk8+RMahQ3D/s6jyQoHTI1i2d00GYthEXRI+8Tu
Q5msHlbJ+lXfyPKUvd0oHSOVP5v21NNjSCRvBkXTMctARCpzyVkcSX+LWl5X
FjCrlZIR5wvoE2QkHItz2LginfHWgZRO9pGvm4mij+T/OCU9flbSYWI2Gafc
8R9VTLyuQmTsCuXZzALWbY3FyjOYxm8KKTrrz+2X7oyvrmLzaCWb3UI5UFXK
gmzJyWEqsCxn3LpUxvsGU9YklpnSoY1X2fOXaTWe48PZcTSViC8mosLXl+WO
qfwrYvD3kX0wOYKlw124sD0Mk/5hLFsbzrrpHigvBaCcVIM6MYZJ0UF8DzAX
y2V2rzvtRPdYhXB59J09Gz9y7pSWcPKVXTe5iCnzGosO4S3EzZpSOu9Rk1BV
yeCr6Zw1z2PFhGB+Dn1OxfI4+vVL5Y+ICAyfeJFvVsKRReHcNPZi6UI75rf7
ivVjDT1DIllxwIu3u4vJSK8m/rM/296ZiWvnqvE7F8iJR+VsrQwnY7Udfz8r
ofNfMYyQs5snz2/PUQ1eD/1xH1zPnt5qFhxMomiLttCWM1nxPo0LkZlk9yzE
Z1kMS1pnc+xxAq3mefNQOl5za3sunAxmdKNSmpj5sT07DmVUU7Eypo7mpmFM
yskkKcyXARu/ES2dd/ocDecbRrPsUwHTboVi5hKNhb2GD3dNRdvzkaz/K5VV
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
dD6fcmw4YW/D0ydpNFvzA+0pbzn8Sk98Yivofc2VCRGGsmG9nhwam8LbDjXs
WF3I77rBHN+qFnzqmHv4G9d6GsqfY6LxbOfDibXVBPkWYyTR6A6pY37TXAwN
bbg9sp4lxbGsb+XCH00MRO+diWweVcwmJVM6Rtvic8MX7S95rMwvpfUuB2Ip
4phzFVXjIzF6ppL9jfP52TwEnR75DAiooYtVOJ/f5jL8kjJrCyP5+14lf1dp
ya6sMOZYqWXLP+U47bKn4alsYs/UcvK4P82U4z06EU1npev36NYy5HkoM6a5
MeB5DB9PFnL/r3e8ccsm6VsxE1Y7op9fT2VhPMMGfCB1odKnbZw5sNeJmtZ6
8mZzFWb7vPjf8SrmzMzkkdIjK/Uq6a3MwvJXMZx9aiwzt4XTIMKcroe15Fj3
eDLiXTgzu5JWp6OoPONGy4Y60uFaDls3WbCsVRknNwWSuCuEEU46Uh1UQHDj
cJqeUUuQVSEeh/NJH6CSbyfTGdi9iNWnismaks+6cn82zmsu49foyKS2wSyM
ruLMl1Dq7rhTv0Yj81e4sP6pB9eblbEizJ7hjb9Rozis7jxdmbkrDuOwKvya
FHBjkANd3jSR07f0ZbR1KCPCsnkwOoVdSvZud6sidLi2PM9P4uo0Q4nL15JV
5YlYTszkTGk8f84KIH2rtmx72FjCh1ai99/7JforfluUiGONSt4q3lW/2I3A
ETrSeJeSIxPdWKtWSYeGeXSp8qZsj5b874iu9N6g+KyvjgxtV8PMuhh+b1nM
+SXlpLaJZ1VtEJ8dcxnUyx+T9iopzU9X+CiSgjPagnkGoymn/TRlZif7UNcq
CUfbMpbnOjG4gTIjvxrIpA3efMn3xs1CIyOTApid9BlfH31ZcjWdy44vOeev
JdvrG4jVLktCmlZj2jQdrQ5+9N2hJXcMsjDsV8Slbam4P2sp7dOyOThWR67u
15bqpSF0/WYqTwd0EmuFW08G1GPzykSKbxTw14AG0mFbAbNPfmbp1kYyu52+
DG8fhlWdSox+86Pkai42ClMdi1LYsSScedc0Yl9Sy8RHUWwaUcCCbUl8Ujy2
5dwy1reoZsnvyaT5B3P7TCn3DmcTpNGR90ss+OduECNHVuIV/5XOMyOoMVA4
YKwn5TOKULd3w9LAFn+Xt7z2qWZ9/xIezwznyAVzFjaOZOl0d9bfr6b6u5F4
7ipgo4+W7J2vK8f7BLHsUiznD9ZxcogfXd7bcqJXCnuywpldWqHMRDqeanue
9tSSjHN5mLmG8/BIItb/5PJupDfH98UQVleF5ps3pxQ3qD2aycoXYezalkzs
zQBOv/DD3a6Qf4IL2TX/G/PMc3hyvYbJD5wZO7iMUVOL8P4jieb1hnKo3EjS
LrrRzKkczw319AwLJHiTSgLORtPjWSEBx7uIlFWjPhzK2SfNpH2diTj315aV
XU3ljxtJeKxLJ2RjO/H5konDVE/Cqs2kPN+DXdM9cBqinO+OMkpO+PHnb4Yy
oaiCD22CyJhnpDBXKb98zuDwHbXYlhhIi9sZvH5bTf77eq7+L4Am2mV8/hAJ
8d48cyijOiAF+1eOXDyskjuxFhSVutHdOAbVEl98TP+lsUkOBzuU8PKMJ7XX
4ll4NY6Y4z6kL8rjesN83is51vCSgRhc0kjEc1cct5Zist+eZ41f0ya0jqEd
08iqteDWmQICshPYuOULHb4bSDMPXfmjxJPtvuU0ed9YOuzKYI1FLQVtW8rK
Vb5MzDCQ3u/MpMnGOhanVNJ1YTPx+FnOdGuN9FZXcVbJq9mf9aWbkmtxrfxp
szyfSNM6Wr+NZ3TbVFbO9aFml3L8SMXfqjQSrPrJ6vJaBtlrZOPeOCqvpbNx
UD0tkhzwKs8jTruObn6R9CpXOl3J9PyT/tTmZmM7TSU7Cv0om9lIFmzQkdPL
05jypELhiTCqpzvhk+bLhWtVJFm6EnYsnF634kmam4SNwhl350fTZE48Pbek
81nZO0kDwzAdXY3l5jj2nU5hQY9CjlrqyvIsVw4uUXLxfj1eHx3o2CmFTkFO
rBsQSuttutJfv4Y2HoH8lWAk3Qy05KKE8/PXPOw3+/K6lyWH1pUqXBtCcE4o
D08V4vailtgdkWzJNJaaeWopn5KJjVtnadWppThd9cVslanMczGSzVFRtOhQ
Tk18JJOvfuOXJxoZ0EI5xs8oYvZV03iGPTYXXOm0qZr7i+MJeWTL2Iv1OLlk
UhxgxS8utTSziWbsb86k5Cis9NqHTdMjCNGv48TcFK7uSWJF2zy2bgnFIvGb
si6VnLOJ499b3rz6pY5N+uVonQzgXu8KpjkncijIl/H6mfzPNJlPz7P5uCAN
39xwKiY7cbaJnvy2LYGDpjZM3qcjPw6q5MwKC5o6VoPiiiG5QQyraCRb7BNx
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
//9xdJZhUW9vGx067e5O7D7G2sfu9uixu7u7j93dLYqooKhISXfX0N01NEPD
u//vN78wsffz3PdaXhc//lOIpzp56M1QUXVWU3TWDyG5qRu3JFOt0VeIr099
2CL7NPNHDeVz6vA+byi+dkpj2s0wspy0hPdRTaEqs+JaUiHb/w3icy9P7o8p
w/2dG+UJSkaN1REepyswmePAF+meqsnJbPB143NBHIFXLdDd8ouB0Q2Ea0Il
Hs1s+XmslqouCtH2ZyiFqZXcyS3D0jiX0G6l7FpSQwNVNM0i//f7RhY822rL
7IKmQmd2PfMlQ3JVIcZubSRGvU9hzZlyGqw0ElmVYSwNLMOxpIivpkUYjSvE
7rKK7lc0xeHVodRo/KH6ZB6b3dPpZirv6sQnxntKvmrkzC7MKW9WzfDIDNZ0
DUClU8jREdE83xZOTxuFKJigYkGJH1ZfG4n3RbVYJNrge6uae+npjP6aQrul
WXjLbDIMzKDGLgvtW3H8yQ/D81wb8fh3PYedknj/SU/UaCm5sDSQKWlFuHlk
cGuRkpOfNcQkk0qGbvUn1SGTiZ8i6GzthMNOTXG1JhK7dS74NZfevDiexxqf
eT40jshGsbT8lo2zVh1bTsUz7nw2jkptsfmchjD3CuXx/Wai5099cbSvL7oa
WsJ2TTpZJtE41QUR7VuD+nsMm05lsqpBNRsvuXB1ZQNRubmeSevteHlKIRYV
SN4OtSTeVE1TfUcWtvGnbYcM9lyKYrpRCG+P5dOsLoM5e7yJSqykQf9YAvta
YP7Di9H/RvLsgy8OPWIZXxjPD98QahoWMW1jOB+NfVjRNI+3JRriRaANDkcz
2Lbdn93H/7Ano45kWwf+TLXkkaVChG2MxPlEAoefJvLlkiXnPGx43jWOlOgI
Wnr48lsnjYJ59fxy8ePuiXzmGygJDrJiz/Vm4ntcE9FlRqw8w8ai8kQ7sUwr
lgXndcW/7eS83fPBwbWGh0fT0NrqIO+4gu4V0pn/CuXMK22xZpmeyPOX2bqg
jn32Ffw3Jo5tHpLZ76Zh7+vH/LVJzFiXy/xfdjjapJAg6pgou3PT0RTi3+Ry
vKHM9oAypq4vIO2hG4tVmqJTpyI0zvzmVH49r/5z5vQUB1ykixbqKUSDuZGs
fBdPzcEimpzxZdrxPMI2FhA+IZySn5J55Gf952kUDqMU4oNJmXydVFZ+K8e+
k0L0tfaXXlfNRel79cNtMPWspVtCLI88A2ic2FxcCY9h2glnJg0zEq9+F2A1
zYfE7uU07lXBvsWRHD4fQsVshXieE8au9FpuT47HZfM3Vt5XiJ53Mpha60y1
j67YvSJH5pszvZZXEzM1iwYhasY0r0NzcwpJjz9xZqWG6JT8i7eHzZhnV0Ou
nGPXqli0fmYyzc6b2MYODKyW+fSP7MexHpKrgtm5/yvHcrwo9PUlztSMjl6R
NPirgrAaL+q0v7PjcjX9vsYwptQJpbOmWB+XQKVdOMMWGQjrFonMfpJGTZdq
fJbE4T4zEaMKXTHnhTMF4XZ0diylfWEty+X59+4Ww52CTGZ3KGbBHDVme1LZ
KHno6GWFeGsZxJNQP36sVrPypcyFYmeWpSSzrE88D0540W2Ctth/Io0DWv5k
vUshJCmY1plJ9G9fQPd+CrH9ZT3WLvUsWORO7PsYSs1LsHNxw9tZus9ATVEq
O6djXjo2cp4VJaEcmJRK3uEK2nX3psOfAsKkBzw648n4hbb06JbFoXkeLDDy
Qnk7nUULwxiwPoqg2ARW9M2m2i6XosJiYqX7/jBL51FrNXejZdZcD2fSIG1x
50EiQiOc2mH5vB2v5nBQBPPmFXHsSC6FRjk8vZbJ5/75HHbLJKBfOMs66Iq2
51QUjZDMObOpeOhQRG7/amzb1fHtg5whJ23RQ/ZW9WA/FjorhDiTQaVlDNYy
47sdCiS/yJpVJSqWhdbBNCVJyhiKpL9HvwiiTBHD5XOePDIIYKCPmvkmvtid
jKXBtiqGXotA+T6e7NhcrkTmEvtUcpxBIfe9wkmTnNO8fyZ/WwcwODqYeLkf
8ZmltJMOeO+GiplmKh6bOBMYlUh4aCy9LnqxomsxXYbVEmEcRrNz9bh+juRJ
z8/MyU5g+5cQfPWUOLaoZ2G3KtQnY3AyNhRf4vw56/mH63m1zDLLYX9vd+yn
64n+Qk+U9wilb3wSC9aVkN/XGaNpaTAhk+vPi1k1XO5EaDEDjV2YeC2amCER
2LxOxWZ3KIuaVfG1/w+GT01njk4oqx9acuzvNM4d8SS48wsWtGwsiu57o0iw
YOx8XRG9L42Q4GgczEK4melDnzYBeBhX4fbIQCRKTv0l+crif89xqIvAurO2
OPIqjFcLvnKrqbHwNKyn8yZvbO5qi4xoHfG8oTM/A0upCVDxaK2Khj11xPXq
hkK3USqdL4ezK6KEHR3z2dk7nHZjfWm4Sb7+3EIqgvKpO/+Vv8bkYTTqAZlr
3/Lfj0Zi4t+5KN7Z47migOjmqZS1jeJbFyX/vfNjjqE1Za30xbp1dfz6Lvuk
fxonLbJx3eTP3yZ64see1qK4dQKWGuX897GMop6eTBymLR5OCaXXnWQUbRqI
8f3KmD86mXa3FWL1+Eh2Xv/Fwp8K0bxLhnRNeyZe0RADAgOY1TGBng0biqZn
kvh2NAyD7CrGfghm5ll5/h0Sqd/uRqaOB3a6CjFkciYrOtoxTvr+7DjpLVvy
cGpewZ3IJLoMSmftZG0xs2U2a1v4MdVWX8y/ayjGvEsi36Sa5EZFJF2K5K5V
AavkbnzYFYmli74406+E+Do5MzMqKNvqQn+rGLa0iGPXfy7oTfCm4r88Wqyq
wfMvL27bqNnWTCH8FR4cd0yi6SRnnJZF8i6yggfLQtEvTiIrUCUZMZudFtGc
dFGI7zLTu8keoGU5bRI0xcaekqc3BZCU40hZt2AMe+VzR9Sw3joWy48VaKzz
ZfxsF46oU+k+1xejcD8GWhiJ/Z4peJDAM9kLBjpFrMt2peq2sRi2SluER0az
w1pDPHVMZ/XoFLIMykmbXMboqV70qKrjH3kOw3plcK6lhpi4ooIJK+LpJ7Px
vZM3I9dGM7KohrjBwZi9ka46KItB+bK7N/pwK15LuEmH7y+7b7BKzV5jD3wN
lWw3V4grn6PkfkXRYmohjn9nsq7Gm91aicxtH82LAQEUq/TFtuhoJkoPyTLV
EOd21rL2Wx5706oYOTyfK9tCKc2pZk7fJC5N+oPPuGK+tk1hgZY3Q4pzqGsX
wr4f6fg9i2f8nwgOFaYQcDyLLsVKLN768nVDAxG7Px67/GAmJWmIz1fDeb/h
J+q+dQwc7cGUsw7M6y/PZm4sI846YvtfPbd6pzCrlQPVfbREH8l1HaZ7U7an
mANL63nWJoR5NeXs2pTDCeNEJvfWERFfNETbIw4cDWolHsdpiZMFnsR3ainc
p1bTf08Yr28qxNTXRcxxlcx3M5IOf7mRtzQIm1dlbL0ewsR7gbSzL6NFRSLL
/L25OTGYwe2/Yu5shfOcHFx+BhPlLpm5SxavT8XyKi6JLaGydydWE/osjyvp
jYRzSSH7++dwxM9ITPkawYIF8Vya1Vh0b+7KZLPv0mVUrPqYxQNTW0LblnJT
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
qmMKMbS/jpPBKhY3lhxUP5/1434wXnLqEJFIq0GJjIgo5cLXEEbpedA5KoG/
5ifyZPgvXr2X7nI9TWaRN24+OpiaSJ0bgfjPVoidO6UfbbLH+V4U1tlZrPnN
EedpqfSxjmP+smA+J6WyLTqbc5Ue2DlUERAbxtC5TqybX4lzuIqsW0FENy/A
aEE5J5e68i4ul9U++qJPK+kvfaNYdyuZkXHO9E8q4Ma/uTyy+UafTYm8z86X
DqaiVddwVi6vYVZNityf1uJut0Yi9WgEg382EOfsfLDo+prnaoVIl/1/IypU
5kMe011T+SV5wzIuldNX0uUuqol4oeP5sUjOdMnCZ7TM0X/UzNjnQ3Wwobgh
eXju6SwMx4bgcF8hxGf53OpU0eZyBIUGtvQ8VkzEyQLSDvnT44iKun+XEoMj
l15mMtPCj0Z2XkzwzaFOmoHI2hWKl2kK2UaJvP4Wg3qDjukPMyi3dWfu1lwq
EyT/B0Ty47MXTQ+nsWNlBHeXpZN7II/h3xxZZZCBIqCIHpu9qDXPx65MQ1K2
LSZrVMwyLqVZrYohUdkc+6LmyZ7P+JmXMbtZMf0vOPD4m6korV/GgJ++jHxa
y/42ofzdUk37lzkckrxeMiKe79YlHFxbQWBJCoGuKfTeLfNzezqX+ivF6Snl
7H+txkql5fdHRVQo86gZKl/Taw1Ok+LY+yYU/amVLMpxpaShjt4zClEOduXW
0UJaS960vuLG10W+6Bkl07+VLc0P6olWQxN4UepLwMNC/O8G4jYxjKePtejv
VuFklo3jMGNR9DCHafbhrLLTMKG5insZsbT1rsZkSAUm82QWlero1cBITO4a
SOkpFYW/VeI0Io5OzhbCeEsm94o8+WxqKNroFaI1/MmIU+XUqUqhdmYw+XNj
2NKhklydJ2G6eKZsSyPkTiBDWpkLmwF5BE6OZKhxOTeXZRK12R7D2cZiuty5
+VFRtDlpIiKckpn/IQEjtVIcv53KktQw/O7UYhhagv4IR3ISpBPuL2CyYQQv
B5TQY0IcwjiBz9K9/20m+VLOQOtBcvYfFfLdzJEzI2twbRmDr58H9+tKDl2R
zRxPb2YMqpavS83xpyGYPtAXXeZl8mVHGJbSE1dejMHaKpTX88rwc81nlvy3
DVQaVHdLmDgtioXxBbyTu7fVOZpYI30RujqF3IkBvBofxoUpoSR/jWLSpwym
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
jolPVXSpSgW5W4MG2lM4r4otcYYia0MWJeP1xKm2RUyS3iq8qyjtncbb8jh6
39QTnV8Yi44LfLitl07EIwvRbIAzy18X4TC0iBZf0jEOMxQOZ/Po9TaBxzey
SO8ZTsNbSuZp64iovWHcvp3CtW/mYszGMNoP8MJtRgVt74YwSynvlfSkOp/8
STN2I3uIiVizLwmzF44YXK+ltG0eLRyCcD2ow/xyFe06ZpJ1MZYrA8pZMExN
I8mPLTpXyfv3hScztIxtkk2DnXYES4budEJfjH2WzWXDLNZulw5y0Y5A6XfO
t1Pp2D6IzpLZkkIi2PZR5vPDDF71MRBzvvlLFsrEMNONd9tTmCnvhfOHfKYH
pEHLXL5bRHHPTs1BpYGoXedK3UYBJD7PxkqVgtFFPx6vLCQjLJt/2yg51FzN
itJE8iMzcRupJ6x6p+DzQUXYRUOx5VsTsdLSi13P9ESbXQXYvnairnRv1+wK
3mXYYNxP9sipQMzPxKDaZSJU+iHoqnN4tqeccWv9uDfBh+tz8zmVXMjT2Qn8
/qcAq/efcTd153GPZA77BpO/zZkY6R4mxypYOMSP0V/zmRQfxqdbdgyd1UCM
kzycvvclPdsUcWuegRizVcWvHjW0Xx1L+3ZBbKwyEB+rNZxXP2OrvYnYscZE
dN/7nXeNjMSobeYiq60vKfPymPIxl94Gzty1MBErrxqJTW7ONM2rI1oVthFz
gwNpdE5fvDtaTtvTbnx3shD/5daSl/OLVgez2DU6huTfQWzdI7P8filZS1P5
UKChR5tKfuwNpqPMqLKzJWR+1nD4RSnVB0L5JX09cXM1dbbk8rAigWuPi7m4
v4Twyni2dyui7fxivsz3J1B6cHWNhuFRecS0NRYmLYJorZ/GsWI9kXUkmdZP
Qvh7ibk4URpH5mNfjsyr4OGcPML2O9I4UkfyrHSGPwrDp0MSDb9VEim7qZ4o
5NwIDa+KPqNqaSkig0K5vP4rqBqKuXNiqGgYj8PFfE4PrUAjc+Ph7xICHS3F
9HR3ng1LZPp/+mLmoCI85xXh1TqeereTuBFVjG9OFGELnKjeqBBrlhqLtCaf
6To4Gpc+FYzUxlPnpQ53awPRKDWcMWeLOdk7j5JRQYz6ZSZq29RQ7ujB8w2V
lPnGYtAzQLpGMVwPpvHwLD6uyeXcX9HM+0PNxa2ygyYn8q+fN36pBUwrd6P/
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
NTsJlykqmm/4xqQm8Wg7ZsveiuHiokr8jbUcEkr8ZTc2be6OmeQe8WcErxsn
cGv9D9T5Wjp0LuXScC8SvAroYpzKhuhIbsXn4ToymX2rYojv2lBcKnKgz/c4
bv6nJ6ZU1xL5MZmb5yqYdyQRqz6OrD1gKnrdtxQfMqTninrikbWxOHw6i/P/
VfDxVCilR/0Idi3nbngR1+8k0mZFKU2sw9Ac9CXj3zzO7ozCtZMbE1x0bOqW
w8ZpTjRbmkX/6hgePbDlZbahyLZK5NkzL/ROp1KxJoTfFz7wd98Mbt1T82Rk
EI3NDEW+fRy5zR3Y7ZjCt8epGBj+5v21VFxPV9Jpl0q6RhklLp40GB6E1+g8
Nn8NgQ86/pTs9yJHZla/FOImGonk2ixy1vuQa1ZJq3uRTPviwIZ7sfRbL882
4juDVZLF/svA9T/pv07FTOuspmebeP5SZjLyjwDMnkUwolcOm1aHs21tBGOm
GIrJ1b6sHeDBJkM98X5yPt/kzjbsm8mUPSZi4+oo2niX8PBtLeFvotmaUEuh
zKKWizQEbjUQ9TxKMJoYw/jDVTQ4qObbj2TGSb7sueI3XgfdKJthKPoOUXHK
NJS0uGrsr2fhba7kw5wslDs1qEfaM62qjMRR4bTeIfO5o57o2kAhHALc2fQt
lacP4+lYz422jyzE+7t6wnJDGF2OlNFR8sD90hg8zCv52cRcfJxazKTJBiL/
YD5vb0aTd8VIDH6sJzrfyGCjiaXY8iWdAG0st7pXMThZZv5JR9J/VvB8dRKv
I10YejqdjfGOrH/xjS6lqSS01hCZYItNRgztG8Tx3daeLjcTSd2sxKdrMJpO
4bxN1NHtpCfhES5oPR2Z0/k3y7sn0yvDhzVtfJnXt5RFjr+p6x3EmvbRPDT/
wc9rsjdln3s2NhLtZH+uPF/IOD+F+OKRzI8zRdxZkMuJIaHSYfTFHedsbC7Y
8yrbWIQ0KZPXKlntl4kYsd6b+8ciuaBSiM8LCvhUkSkxxliETizE2UDux12Z
Lcd8cO0egtsnhTC+ZMuT9Wq+dKjlpmE65dPVvPhQSbsZ8egmvuSIylCsPB/H
x0WenDNpIK4vTMT0jApTwxwuBuWw9HgsZf/ksHhWEX9auzOnoIpXfUKwPq1i
1Sxj8VEteaeumiauOaz9HshWybr/tJPZ818S/xq68/W4oRicUMSxyDh6fypg
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
vgSXBNNqezAeDgkcuxTJsxFRhCwtwnObH7NjvRlgW41DgwriRrlSd5ilWFus
QaH5Tv+R9cWr40EsbPibhOZhGB5PZOvyTzRbGUfU2VLWbrLDZbuRmCn3O3mY
D21M8tmZWUOjXxqMSjOJlJ58Jc6XiYZ53N1oLC6/86O/nFvP8rri9hkVV62K
5DmbivE3f3GnSQUtCvN47uhKj8QqZtfLY3etKDqa6nBvqmaHYyTP+0qGNFLh
t+MLWWuVouk2L3SPXPGQubHucgjrTwTT54lCNJF9WtwpjTnucudyw7FyDEIf
ayTCJgRJX/Hn5TAjcXpPLPfnOxJeN4tnKWl4jpB5pzURp3elSjYJ5PrCIukv
GWyMDkA/UiGGSjYSOLJug4EYcC+DoVMjsNJai2eNyhh0Momz///sab6hWLDR
mw/di5nhqBAloQFEzI6mTLp3r05fuNOjlP0UENXQGd/1ZmL6Oi0fIkLYGWcp
jpgZiFiVzGQbQ2EmczIvOw+XOQrRek4O4S3TcKxfxqmbCnE05DuR/RLYvyOQ
b9lxRF5NI7IylNLlWurI2buMmi2yex/dryWmL81FYRDK4GvmQie75P78QHoU
ZZC+MIslWe4MaldI43c+nG6fw4ugBJ7aOOKww4MGd6LYcyYWrf13CkeVcsQ2
GSxDWTSxgpM9tHiJII7/TOSWdPx1jWM5d17FU7n36c6OWJ5L4OW0GAJ7B/J9
gEK8vqujMELDBosq/nLKYW2IK4ul07pZq9h/9SVJ7vn4TIzG1MWOf98rxO8K
I/HPmXAeS9/5VCz5+7UPdiMNRJOLSYigFLStCknekYr2hjsfppmJ/tsTsBzg
SPEJM9FmkDu7GnzksY2KUTMq+DQymOozfvxXNx29gxeeT/Q865yKUctU3k+z
FKO16fA9kMiDpiLRpYyKACdMJ8oz/f+fuXI2Fvdr5ZSlpLCkLBKPVklYtKui
5VMnjObk0q9+EiuNHWmVqBS3zupYH/eQ9o+k+95O5fiacFzMi1i0PpX9HxJo
18pCrPtUhOaoN8s9jUXTPVpq23iw4HoKk7tr2FXbjzqyH/6srsBf40Unr1qi
eE8xcx5L55H9GXLBnpmXvXi5Qk/ZJwemZP9kRBPpbX19ONU+hMG7rEStpGLm
ZoRL7jIVjzYbiA711Vg6p3Kwk4p+f7ozxdJQTK+VjYtknqNyhld+rSJa5sVF
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
4zH5OFilkXQhl3X1k6jSL8e/MIWTOxOoN11D0+IMIuslUR1YA0e9ZJ/9YOgs
LRazUvH6bk+jniUMi0pn7wFPTMe7UvujA0Xu1qy9IXP3oIb3r4JY6RjP5UZJ
JAx0ZeXjKLpWJ5EWWUrbhHqi7whTccEok88fLUSPSQV0T0hhtOz7L/l5/B0T
yYxj5mJ5iqn4ODqJ1bJr0lTRZE9x43OUkRjrEsAfWgce5aTwqaGaHtbu3OuQ
wsxgLUP3J3Dv3yoOja/A3D6edStKuSzzvvqiG0mXyum9vYKNbgEMO1ZJ6fAI
TrX9ThfJ1msXpJK4TjLVVj0x/m0hLg09eTJfKQ53jmKWYQDH56joPyacTx5J
ZCp9KdznT+Q/KhqWZqOaV8bggVEstE1kfYJSTL1gS8R3pWhRO58F677R41Ed
seqZjhejggkSZfQqLCNCfp8WnxXCxUfD1DY/aDVCKfQLKqldE0aCh77o3SOU
Bs/TOCBn/nmnDBr7ubOvtZ74MSaLlWPyuLeqinFKLX07BBFSYCL+kNmbqJBc
EaQQX0cmsmpcMHnDM5icV8ToCg+GmClFreOhqA/bk59nKk50lE6wIpaaZo2E
x2sPbLrGcLmBgdgbH0OzRkFsNSzlvI1SXLfxZE6bDLYkJDNmhid9VxmI92/i
WPYujsv+8jqu1XB+vQ+LZ2j4mpVN6ER3dvysJO5GOTdTf/GyXyHug4zEjhx3
3vpFs7WeGwclo/oODMdmiDVfWvzki3S1J5eT2LlFnulshXj8zZmZMq/iWqnZ
cesX5WpbPjmH8WLbN3lPP2GZnCW5QSn+ex/4mWfNRYXCQJyOVDPzaiHTjLxY
2NqOI9Kvepj4orfblpXyPj7dn8ig8RlUtS5DSGc/uEDOueyZHWFKMbqhZIPU
fIbqqYiz8aZWLzXhKSHY3vrE9sfZjOxXSpzWjkXGnjhfLKF3P2ccJXs+2pxN
0sK3dLxSIjkzF++sH+jtyOb85DxGbPKX96yW2Pegig1DpHftqiusXPWFk8Kd
spxios/EkXP2AVrLIh7eysPo3gcM+hcyvImeqJ4bTJ0BFqLoVWNR1SuZzOE1
DH2Qy0alP+v8y7DtFsaoxHj2rzcQX09FM8ApgLRa5uLc7kT8q9JodLwI653J
tHhvx43RpZyVXmsV9pIbjfTE7XVO2NmEMF52gM2LADw2hfL5jJY+z1LI/fGd
pUszmNAkjdzZ4QwtD6X+9SSmx0ey6GIBwbEVWHf3Qe+robh6zlDsK4/G0VjL
lkOGosMVb/oNkblqaiwSX7gxLTONhce0fJwfyb6VWq5s8sb95Wf8h1ay90Ip
BRs9KZigFIm9Q/jb8TeRtTQc6/OFz9m/SG5nJKxuNuDH0LVsW9NBpG4fR/yT
rgyZ0Fb8av+D0sPPedPPQOj1TaDBJD+q4iyEwieb3T1+EpfTQHgkKMTiYxHU
3q8UB3rWFpYdvWj2UMOKJtKj34ewdUs1qlulXOgSyeNbGYT+aShSbaNoWjuD
qdKnGu1MZPjhCqbK+zfHW86Vazx9HxTTtJGare2ySbVMJuhYCPF/GYsDC43E
kh7RrI8wEYOHSGeyCGJm/TR2P0+Vs5rIyyYl5ByP5GPvWO490xM7eqr590ks
vSZX8zO4jBWdU1EuyqR13Ur+LMpmyYBMZm/Usn5LAJVrjURycQ7tT0ofb1TG
2EnZ/BEg7/edCsrOlLH7gJqsCsn52jTu+jswQ6Uv7tSKw9vKgSettYTnFdBi
XyTreirE5evVHNNGsVRU07p2EYv3uPKiQkdNrlLMe+vLH68NhOPEQl43iGBF
9zw+Pi1ghr8V6wvKMb1dQNMKTwxL9UXT8iw8h4XyoZOxUHVPYGc/OQ+zaov6
lwzF8akaomsZiTEnaomLK5PRdyrm0KkCts8NZZNkiqzTJXKGQym9YCi279GS
HRRCvTnFdMxtIKqkF7rYGAlDQzNh9C6Z2odMxd19BmL8ZBdS/9IXQWkK8eur
I35jc3B/k4VPvAc5lxVikkU2f5v5M/98MZ46U5GzXDJ8Ix1lYytYrpfBhWIL
4ZalFDM+yJ4YYywW30zHo9SWpkfLMDPW0exKLBPTNLzdksI/E2ro96qYvV9y
Cc2SO3Gpmi8dirn4W95rsxAWtM7GNyoMc2ctf88KYdn7BOpvKsZcsrTvEneO
fc/EXRlE4Nt7XA2P5XKIOyaHHLjerIzm13LI8HHh4vscbk2X+71PxRoMxL99
DMVBeZ5v7puJomcGwstLja9PJfqPK0iZHcCKRxq+RRgJy5RURi6yEFe21hFR
PVTcczEVwS3SmBzvwtuZBsLfRENKZjFtQkIZ/DWL5j0j2PlJMsO6KrTtHZgk
edb7pQab607smpSPbqQGF9t4um+uwrKqmtqznWk7phKVQS67Zd8Y9DUUDd9r
2Bwdg2efYkKjs6ioFc2zFRZi3at0HrQLo9WlQn51UzPGSUVh23wOi2j6TvlB
j3yl2FxRQDulOxZLzcXK4iLM73gTKSQ7P0olUO7sdoMq/riio6qXL733FfDz
hY4fr/xodjmNVPnxLsN9OLPXUFwM1KJXkMLOu/rC2LEI+3pf+fuPaFzGFdBN
F8u1+QqR1SWTS1Gx2M4s43xKBut+JzD4ZRaNwlIY/jSE5Rszua7LoaD3f/+L
qIQx8bns++bN1B0FXFqSyZOyWLa8L2T9cw8qb8WQ5WYslnaKJCgqkRH9lOL0
khD03UNwdtTxunMWrfvHsbGlmfB8rWbAuG90v57Hd+ssdPP8GGxkLJpV5FEy
05d96zNYJvnz4kNXmlpl8PmTL80/J3C81Jns/j/p1cudyl3JnLCP4vRDK7bp
suib8YUilTPhFTVUR9kzeqYKZ+tK6TkZHPsriS1aNWKvFfv0YrBx+8X2Ec7s
uuRK+y8NJCMpxMMHUUzbXU90mhaPebInj1MrGd81jKSbYRQuTuX9iWxWvYvE
aoFSvI42FI8Hhcu8SCFxjaFYXiuIqpQExlyvJC0kmTcWWayRM9NrXRzb+uiJ
B5LXh34MZt6TVGqel7FzuR0Nu6nYfbGUoEG/adNBX2zpWcTca/aMOFzDp8Q4
TjTy5ZB09Tx3D3q89+T1oQxe7g/g4CJXvCaaiH2Ds7gZ6oxFRiijXXOodcqf
yz4mwqm8jjiijqPDu0LcckzEJfNAYhXxHPkrjd7//a8xd0NhEZlMhz2JdFmh
L/wuadm/0x/beDPRbGwi95sHczMsnZAUFxYP/oiVfiZhGxK54hTGYO8qok/k
szVcxVULU/FCzuXopQlYmumLIe9V3P7uwPv9GrpGRtO8tprz73IY6ZLJlMRA
3GqnYvMmih55oUxdUUdMlTPXbKsj3sf0hePBOuJ8UibRETp8NFW8OqfCUp3D
0IMpDJQdWDrbWEz5M56vVQF886qiqKSUCSpXBleU8KNvKk/b+PLYro7wH/mF
9Z/sWK2rJT66XaT14ou8/91c+Fi/JfHIZpqebysadovgzbMfPF1dyfUJIcxc
707758YisDqdA6HhjB9XXyysVUs4m2bgd7Ya1wv6Im/9DzY8kG6wOQNbyYtn
9HLlXkRhMLuQOO9gsqoi+GNROLtWyey/nMf7AaHoTSkme1YhfxrIszDP5d5P
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
TcP1xY9xedj5+qOPsZhxyljkCH9ip5qLF5/1RKJxHOfXKoT3cWPRNSqX/v1M
xOP7euKnSwhP2xqL6Q9L6TTKjeQ7RkL41hZGM0LJ7GIshuytJcbpRzN5hZ6Y
n6SjpE0Y2fvTidrrDhd17DU0EK/3B3CoVwxeRw3EJ3cN7dZ68ii1kikX/bFb
lc9M+yzaZWXgvTiQFp0UoihCxbC7D4luqGNL3wjJoF+5dbyCeD8zkekh3Ud2
cbtR0hHmelL7Hw0LG4Sz1jiC6Xdl/0dlkbQyDtv1eqK6dx79LTzI7yFn5quZ
2F8ZydtXMqeH6ou2BLPmT9nLO0t50TmaFwtyOfFIQ/35dtSaZSKCDsiMNtVw
yicHj7R8Pq10YPFIfRFeR/qFtye7wlNplZvO/QOS80IkyxemYJkXji6rgpm1
Ckj+ns723GJS72ezfHE0O82z2L0pnAmzrCjMTCRupnTEEeF0+p5NpbGWL7lx
7A02Foe6pnNTE0zuDx3lVXmInRkEzw2ny9IEvEw9CRyQRrkuG63al4zoUuY2
0Be9pU/Oe5TDJ8kPDVZJB/tSToJkzcN+31jTtIofvnkMlhzuKkrpLjN95wzp
A4HSoYii5Rw1D2rVFdaqYrylU0Xpm4kV0q9bf3Zn6VUNO6+lo5/oRfqKKr4O
ziPqLxVdzhbS9H4EVz3ssCp2ZZtXNfldAv/3+q/+I5OYeEPD2X+MxbYB2bS+
HsaHjHbC6EsXMSw+mRvHjERu51rinz9UGDZJ50paKsv00zGS3lZX5uhsmR1l
6njWx4aztSSSlm21/NEon78d03iTl8KZTv5c3RXHFqd0Nkxy4tb7UCx2VfGg
cxJOtzyYtiuN866+OATFsC6sAON+KYyY7EebcWp0Zv58OO/KBEszkTYqmezT
GdTU5HCvUyLp+yJlx+mJvAElbLquZmh7Q5G5JJ/C4RrSvQzFh7YZHDrymsH3
DMTLf6rY3TKI3qfUfL0WRetYB5Y1riLfyJfvX94S4lTF0K4p/BMVh3P/Uly9
U2jbI4ywykK+eKawRvmZE1O96b0zk+vto1jtm0+o7Ou1f/nwx+QaRm40EBee
aDi0TcdghWS3D0mMzjQRtiYFrMjKwrugthgQksjOtolcNlQI45ZVpL2Mpm62
vji5r4Kacn8OminF/N0pnJ0YgLfMwQlTy/nn5A/yRhaxJ0Yp9pZE005dxarS
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
iEA3Dy5aR7N+dBodJMfM6hJEjFMGnTwSyBodwuVBcZz0j2fmH1/o0CiViw4q
1FPfEl+cRsV86brW3lxqmcAZ9yASJ//iZ2QkLYdGU/HQh3TbeHbW13FhXhzv
uusYcSuQ+Wc8sNxgLrb5+VF5Oo8xA9IpCygka0ESvZubiPb30/lm7szM82ai
ZHYg6tVJBKMnzr9Vs3ZtAdrOlby56oOftSOvtmdga+PJtrwsDgwp5obsjCZx
iZy6bCquNMij+s8AMksaiX/nlvLlqDWBT+qI1Gd1xM02sbQMNxfeRtI37CQT
PMjljmchyp9h3DdNx/hHBLO+R9O7KoiXR9VQk0yf9jIv9uVzuI03hT0NxPO2
GuY+8KGPsgDvuvFMq/DhRLKp6P1XLFc+RXFrdBXImRoflsqgxYZitvwZeSP+
j6OzjI4q67ZoVSouBIK7u7s0zI003jg07tC4u7u7u7s7hHiIu7u7u/u73/vF
gAEV7jl7rzXngFSFU+uDSnSHpzOkMICHkzUy2zKLPt18GNTOQLY6BzNVef3T
a9P5b/MXvpx05PbUBEZcC2KavZKx6ckErQzhbak3iYN9eBRZRCOLQLzz8ynV
SSRjdCxuenXFpyCbs7aOdHSK5PZZB/KnfWbZwzR+Zys8tEpbapdlsnmWP8Gn
Y6i30lCMDuSy96nSB07Kn1tQw4/hfyiyyqNfnLGEXQjgQDst2XfCmr+z7BiU
pZGNz7OYtcaZWYp/7DidyV59X/Zn6cm+UBNxrO3Nw6vxfDZTybDuqSwYWMNs
JY8ss5OYvLwKx5xKPEpjMbkVxVjrIFobh8ObBF41DKbbrxC6zijimEEil74l
U99UI4PsMnDxVLplupbYvDQUvx9/eJxbRoipkeRsLaNvY33Z1yiMsCI/tvWp
J9fL1OJfEYJ6dV05sV7p3VpOtJujcNSrKlIOhmJ5L5W265P/3xkXv9aS8c91
JM8+iC8TCvmaEM/6g+Gc6J/A69xInvmZ02FDFn4xDsRbP2GbQxn3HENYPfo6
zceWMNg0htYvnPFQ2KG6nUY8YkKZ/b/PRx6USpiVA2+si2lnlcKohT842q0K
m+ICYmZ+xrF+JXNssllx8ydVRdncGVdE8nZLtrXJxuRCLPZGTrxpoiN3XrnT
odSKPy55NF2ax+dp7mxoUkNVlJncX5vIwmCV7M8ppUO8P4dHqqTqRj7Pt/mx
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
d2VsywLqzsmhbs9o9Htrye6tahnQzZFNAzTSY1E5rdo40PeusdhJNRl9/Bmx
1UiKvldQ/DKdTa2r0Kyyocn2YAZez2LIzVBuOMcSHhPOz8g8tpdaMUGTh1mf
KEbqu5F+y5Pn+qlYt3fh4KNcXjTRk6ZJIZT8pSWtdyayyd+NgXYaOexcxn43
T8zbq+VJnloSy72YNi+V/i3LKGpkw+SiSF7cyGTeAxfiHLXlZyMv2tzLxVpl
Ku2/Kvz5lw9Lh6jEIzCXvxKiWKRwUajSBaHKvFzpl0lSYgh7JiUxqDKJiuEF
HK34RofzMeSXOlNqZclGO2Vu0x3IfW3D08M5BB9WPLK3N/ll+rLir3Jml/3i
mOLCtbvaYzHYkjCtXIYrs7DLw5JbUYnMMLRjdYQN145UM+yHtoytSSaymYG8
Nkljrrk5+xROuLEginmtv/HZLZ0D9+I53ded2SNy+aV04rvdTtjXKcCKAs5F
edG9SRV3WycQFBDM1LflvOmmluIH8YyNNpDcjlpi+MCH65e05dsJfemk8Jhp
r1hSumhLsSaCxXFhbHaLwW+YPzcSq3DZ4cLRiAAcDvqwJNkbsz3h1GkWweRN
CfR65EpvZX/rH/FiRqoXtmNKaNelhCC1C4ank5l5KYaT8wKYekwtK5Wfb3Hx
40asnnyrrmL3yRjmOuXRrH0A3Ra58ap7EsOXh1D225cuyxJ5WDuL7YcDyWyS
Sp/HKmn9wgtx0pZtewzkUXoY6/fk8DEonDAXd7KWqaTPD286fv+GmVsF/f9L
o8gyhL/icikfG8XapN8MOuJMz4BSShUWKQ2JY9b0FJZvS2LDlny2FNjjoGSy
k7G+xCoO09nYlm5PDCWlqZ4sfhFATbWR9DFJIfSB0mfTDaTSzFTqtAtjSO9s
dnQOJfB0NH1WluB/IwZvFC/IzGbu+Gq2RblSvM+G+/2yKVS8fsJmW6oWeGMX
GUHnNnqSnxiFb5Y3e45n8sw9nCsVnmw8ZyS/4gtYaeRIzwPa8qV7XelztRSX
F0Gc6lKM2/IYbAZW0mZmMclbXRg+xlDa/6eRXXGptAxWyzTrELQrQ9m2xlDs
FPaeXO3KjA5ZvG2fhsWPQCL/LcR1fRC1xlmwZ4COLLiYyE4lY+/8U47WvhQM
loXTdKSePDBIYV6eNQtES54e1Ei/Kw5UJ1TxrkBfGh7xofOsXKbWVkvB/nBm
2eXRKjWcdTZuzIoNor11GWWtFKeoU83AjERqrobjey6VRIsS6l6KZdKBWLRH
BtD/oJZsSlEcto5y33aJlJfpyqWKdLrEJtNsdxGUKOfoFMGvTdW8bqwW2x8J
WAWV0XWHgZjuy2Z2fx3p014l24+4stNRV1orXuZ5yBW3G3WkkWM1ca+V2ShQ
zuZqNeNXOzLeWFt6jqkjYePzqOtrIvsb6Ml+l3Sm9jQQv2mGMqVDOEWBauls
kol8C+OqWxjDIoN4tsKNlY2SuFrkDS3daFyRxyHTeF7e+8L6l7noDo5m1Vhr
wieH8N+XxP//t/sRB8P551Ix+kuSCVibgXfvaN4aOtB1WTwNnllwLe4HuYdK
qLrvzVvFhRvG53CndjjXe/lS2UFhH8dCNsxK5KplPhvqZmM6Opb0DQayKCKW
ki9+vLEsoXiiP/oaK7KPRpKQ4cavGc64WBZx5Fgg6QY+PNtcTm2nEG4rM3+l
rvJ6LrEUP3fheWUZKw9moB/txY/OelLQO4WMmAQeN66g9o4CIh76sLZMLbt7
pRHsF8/fPTQyblQkRoPC0a8qY8SAb2wPCWDxJB255O/Nzq6upL6o4dO1dL47
xqDjWVfGawKZFJ1JSXkOU0OSCLf3xuJoOvUXKt7pG8ynwRrZVJHBaJUrS25E
MvpvJwZ8dOfl8mSq4wOxehnPqNnxrFfyR3UwApNP2bT8y5F/1luwNl8lnX4Z
S0JfJzaeL+CAQSFxo6PxmqEr6wZV0+ie4q1NdcVBk8uomcp+3dCSV3XqyF+v
w2nuaiLH+8Zysl8kcTfNxPCCWk7rBHD/k7Y0LKojXWsFsbq2obRYpCN1Gvtx
IkBHdlR6syk6kHUXS8me7sD3T0lMbprKX9VpLNsUzY1aodSMKCLPOpRVrXRl
aWIN+utSsBpSV/anVBH4KguzWZm03+hB+Wg3kq/H07rAjgaK+89wKiD4P0dy
V4STf9YTC91oxTd9qHMmnNNDEgida8fztYkcTk0ke8Q3jg1UzlRPJUuSv2DV
TyM+Syp4M84K85t6MruDvnzp5YGPslfd2tSQZezIzPf+vP83hTUrP3LleTJL
n2Tz8oUP7or/vvkYjttFV/7MV0u/E7EY6niiLteRpS8T0PgEMd+6kiO5KUTt
CiTNoIJxlqG42wYwclo2LokZ7FrpwLSNWTT7mcXdlkGcJ4cxzXN4simCjDWR
fKmfxtb775h0TyNFfiqp755FcDsDCfsYTZvNTjxcoS3+ynNOXBLLEBuNxLv/
ouc1hUs7FrD3aDDry21o86uuNB2rcJrKjou9c7gdGsO033/I7p7H5XnK84z4
jen1RIqslVxT3POYwguWsUXU9FR6ZXQRWTbVhKQ5MEyjFsv3lYzsG8jVEXrS
7XYm1RY+zL9eSszheAqqvnL+dSJjor2ZvM2O14FV/D5qx5h5yrOn6krEq98s
TbPk/MAUtB/8YtbQNOLW52DU63/fM+TOxrZqmffeV+kcb3bVyyLJI5PxfhFM
UNy56+hEDp5xYu+wQjruT6D4tyM3QnSkSWYmideCWdekiHeD/ek5KZA/d2LY
kx3Gkdu21FM60/JrEqPXxOL6OJzHg9Xi1zQGf028krFV3G8XQMfnOaxTGGaW
QRR9nhXz7XIA9w77sVjhmahrHtxvbcvu4lR67omkzNKfhosLmG7mReBYB0Zc
TsfYORTnl9Z0sQ7GaX0hpt7etB6VTkuzLHKsXTncWSNm9q3ERenkRn/U0lQ7
C5574XGykZzz/x9PRpCj7JflIE+yw50xnKAjg18lE+PpR/fX+SQ8U8u/OlFM
6RtHP/8QWvs60/JsDGNnWDHCPpTHpwpoNiaU3EVBTJ1bxcc25ehussb4k1rm
rw3gQ44Htwz0pfHyWjL6v1S+5mSjjlJL2kU3jkTpS0v/Gv62dmbS7mqGD49g
5rjvPFilL237xTDHyoWCWH15onjC6QZx3GqrJ0+iw4jv58gk+ywslJ1KHPqO
00szsRxaxfuqt4z7rC8Rt1MYuTqDExlmYt4kje3Kbi6bbyT/jIrm82hvrryO
Q6PcaahzEP1+VnCllY7MKHflfm41dvViWZ32mSXR+qJeZ0uTi+FMvqIvb818
OITizsdyOLs4HudjNgx8pOSYWw4bN7qyz1ZLhhpEk9xC8Y9exXjWjaHqriV7
QqpwcMri4Z+P3DqjljcbivjQP5DgZnVln7+RrNiYyMUfKpmnVonBlWD+7agv
11rmU/NH8cAvtWTqOrUU1balKNFYKm6pRdc/h/6bdOXlICNZuD4S1yQDcYpW
SblHERe1jUQ1W/G3/jGYny+l708fCt7Z4/MoGp1h9rQ99hHjCxkM7fuH2sfu
Em2eR+vdOSy++puiuES0VoRx8vhb/vFJJ0BxmWB9T2zOFTFxRhytu2YzVmG2
pinROCo5E51WRNC6L8zc/4XhU0oRBwtejbalS8NMBhxwZm26H94zCujxQSO3
L4dS7p3B1//yOOPlyy0l/+duzeZUp0ACr1QS1Lma3Xss2JYdwtorAZx+ZIXv
GW2Z0Mafv75/4EoXQ2kUEsb1Zu50rasnv75kYR5oi6AvTb7EEz/bmqd9dMUi
N4aJv5ypNd1IZhqGkP3OlYOeKfw5mcD451FMbJrG8unZtP4SRI/T2rJ3dRDB
71KZovB/uw/efL7mRIa9sWyeEkOLKyHc79tccuOMxOlgGIta6Eq/pSppFO7P
4mSNGAzM4qy5F39v1kj4tVri2zGDDrVL2BNgSXaMDUefBGGYr3jqWn/uOGYx
dImRtNKPYMnCfObetuHNhnjCR9aTD59aSIFVCLalzcSYevL8VyD6Lloyf0gy
E63dubUnmddFUQqTuDNmbhop9SL55e3ECG8tmbe1gvEzrImtMBL1qlqyRNlZ
qzglh/toSRcjFxr9zwkC/Nl0K5JNJbVkbqsqnApSuNI3iccV7oxonocYRjPx
UASrA6yo9ghkwaNCXm4JYFeKck+9wlG7euK+u5yvHsE0uP+Vxw2rmTbelegy
V5Yv9WPm4WLOTonFqTQB29kJLFS6ySMokVm7Q9gZEsXQ2k7kj/FXWNeOYG03
EsPDSNX+QppZGGMCU8nr/Y7UsQlM1o4h4LTCZolFVPSI4l+i2WmqK3PPlHFt
yzfaukVQVWxD+dlQJjTJY7SS212tojHspyW1lZ5teicKy106Ul5YjCuR+OoX
cTI/B+0gP8ba53F2YSCGZpF0Vc7H1aOKpKse5LXNJORsBufrBZJd+of9L8OZ
0+MPfcMiWJVeSliVN0kXCgiYaMe7iU7c+i8L59xIBrjkUre2tpxqXYTtW4WZ
RhvIK4Ns6p6OZ+ueOhI6OplOaU7sn1qJ3b5I1isuHH03kaW7c1l8IZFkz1z6
PUzio08ygxrk4q24cW5sAgF31XIttoIX4Tk4LC5nxfwQAu6E8aKsnBlRFbjV
C2DGKR2xPqIldh3d2a+nLZtm+dDnWyDnzPIYv+QXQTYhtPLXFZvWDuwMduXx
1TwaHPqC00E3vq7NwqfLH9L0P+Hgo3S+tjWrWocwdFEea3Y50PieG29NFU4p
LGLB7XBejajA7Eg8bzaG82ZeEFeup2I+1J7xilNce+bL3KsBtJ2lIydPpBCn
5PVpX8WzVF6seueCemggN9eFYfnMmTlu8Xxr7seBhw7s9k3hRZ1Muq11obly
zu/stCXrdBxtYzP4NCqVxWaetGmVzvrbEcw+5EOUViUnBruyZeNP9ik+WHuK
Fx1GunD2dj57zzgyvb4nwy3KWaVW2Mf/G90PKo7lnUTUqkBWLivgWP1cbJ67
UfVGLeea1JY7rvGs/a0v9exKOXklhcsH6klRc7V89Crg79364n4qnznV4fR0
rWFeWSZhQ2OYnVxAL8XTZqvKOJSTQ4emUcw5741OSQENi5xI75xKQi2VrFPO
7GxmKJe2l9EsP5792/6QrqOSGTnJ3B7uR9PeGhnQUU+a3XQjq59anryqYMZf
SRRPyODdukjqFEVT62gC5wYZSLqvF5V1c9izTiXzS+MYcKWcQzsiaDEmkvBm
JvLzbSwtvXyI36kvt/al8ybeB5Oe2pLzJpvOd4No/FBLBrzSkXH7onGPzSHw
hJK5k4IxHGEgXoqHdnMNpWS9WqZuTQVNOIeOpHLO1Z9OXd2QDhqpHBGK7jEr
7gUUoLXNncoJyl2d1JPzg4LYdk1hhk6ZbKtKo+zKe/QdVLK+i0q6P7ZnxaUs
XgzO505lAQeHpdL6SBHb9zhjFaklLTurZeCuz4QtzyHqWQ7RV2PQPM2m30s9
qRzrjpaesbwvMJE3Xi5EO6TRqCSNqn5RjPiahaVpOc3H+3Eotwarhvn434nF
5oSJLFlRyEyjdD41zWTFMGOpXBNG41Y1uJ9y40MnXyYEG8i9ex85OuEWs9/W
ULHFm+0FL6k/uZrJ3jZ87fuamS4ZvBofyMTjX9nQX0uGnFVcbYYro/qp5M7P
ZIbtjqd2jwJOf1Qy0TSCqNF5+DZV9sHDl0YeZaQ3DuT4ZneOHi2hoEci2+Ns
6dAtGe3fiVgoOxlfoJLbNlV0n+7KV+W5Rn4o4/vRaLLqJuC3NZjG5pZYxit8
F6krV0KU/VLO32BIFV7vgzjlW0lVrg8ZRTbMPpXLh/1+PHsSQaR2OUN2J5Go
7P+AVbpilp/AzT+xzLpnKCaNcskMcUCG6YhHWQKjHfywvBWu5Es4Lrn+vHqf
QA/tHFol2FOnjZZkvsnjtuIs0Q1UErIhipv3U1k7VCOjvPwZ4+LIAM96Yr7R
SFps9qTfEn3xS9KWsYez6FVbLauaactoxQV716gkpr2pVK2OZObeBBIUj2m1
5ScmddKp56DMzvAgfKwU9/yqllirJIJaackUT5V4HIgmqkddmX2unoy7HcWT
By1k+sC2EqTMc6+qUgK2qsTMMJgtFyyZ+jqDrMIE3l0PJ7FNFAvme5Bxo4oH
y7PILXGhWU8DObtMV2pV++LdNp6B/Su4dc+dsLpaoje4gNSf6Wh21Rb1zRzm
7YhllK9KMl+m4xb6B1V1EgG5wfhbWNJayejAJ4nciPUjpYGhvLquK+GZbqzd
EclQfw92N3DE4ZKJeH2MYc3MSNxum0rqQB0ZPzuOrJUhBDe24ZGHJ6fqhKCp
DMV8li2mx8JYqGRbQyNnQqr9aZrlQ8rucJ698yCuMozZR2zppeRH27eROGT/
wNM9kurO7hi19WRvZArjxviye60DTd4UEDo4ncMhbvx4YCy5FxN5/kU5B8UZ
y/YVMu6LF39d0JGK/DRW/ONEkH45tS7nMHCxC/MwlVGl0dw74E+JtY60mp2M
87pAos7lcPhyCCU5jkQU57GseyDD0i0ZlZPP4d1m4jDAjTtZYZh/KafTW186
v4imx7c09M8r7KEw8JXbKhm8v5j3Ww3E+5ue9FudhM5dA+k/WiNHF/+hznJd
ORRWTWi2PzuV/PsxNRE9lcL8dmoZHFRO74MJXNEo/KYdwiQvPwIOqOTljxh8
ze1ZvFYj+y5G8fmUHfaVKrEONJBpVgFoFmXjFVpEgxb/y6Z0Em0UJzuh9Mje
Yny2RzFsjbOSQQnkn7Lg8nx/7Hcm4Jr+k6NDPZj0IYRN3h4MLjVHzHyJ8nBg
5YoQIhTeaWqdSc1cZ/pPiGfnFI10TQjhVY7Sb96RXDyTzlT9LA48ScN/iQ12
SjZ6LPFj0p6frDlvLLv+Tibzv+90Kc2j/psUAj0sGXMglqtnXDD714NzyUkc
fONCcfIfNnXO4P6kP7xXWTBqRgLaM7IYuz5Q8ftUfiv7288mm+eKh26zC8dE
4aoLFwtovc2ZdUE21HyPp85pH7a1dmXltFRuLnJn/RlvfB6HsuBVGLs7+bGs
biHeio+s6ejEtBllLO1VQqMV3jzsrZKj3Ur4+siFWREGcv69Stx6xmDXWEuO
na9gU5tKan3VyC5dbcmuE4zb/Bo2luhJxp4Q+rlVcn+CruitSePi4lL6KO6Q
Vh3FhWOVjNNyJePvNP76y1gyhkVyUCeG2oPj+KtFLH8FuhLxQEf2Tcii0V1v
yt4q/t7IUGJbWnE7pox/tGKwOB7L39O0pHpyAYNq/e/ze6qJW1TCov3e//8e
XJtKgzllEszL92pJ6R/NxdYW5G4M5ebWeGyfWSI9K6m8kEZ5kg3tzZXfMySH
j9l+7EuOZ1ePbDKeePHPLqWnnmhkjak3Tf4twXpwGe77XbjTTV+adktDdfMH
2WlZHFfOUK+OkkUPy/n9jx3Ot9zIHZ5K3dGx2JdasGuSgfg8qsGyQQB7XXIw
CUrlsOc3Fu8pQTswE70Vb/j8RiWhYVVsCPrFlymFfFIpnZrnQOgFbSltncH8
AxGc2V/J6eQKDg9M4JM6nXwlz1vsSGL8ulI61aviWNIbZtUq5OTzEm6W2XHw
Zgnnbco4scOdx3V0ZWFVHj9LLTmxRCV96+Tz3ucrZw+VUKuitmz29WPWfS25
tDafEe/cGL+jhI+FsfRP8KSBQQYV13yo7feZ7REKOz+I4VmgOY99FBc9GED/
Eh/umoXz9rla9lfYk9UkCuvvBbx748oYryyMC6vx/eTDtCxfnCJDWaVXypvq
OOoUBHJ2bCS2TZIIbxGKp5J5K+5XcLFG2Z2jfnzbopInP9IZeMKde/pVbD5S
RkRXB75dSuG6j0q2/q04b1Yc686VcL97AMtcqnEa602FQwYryw1kRlg8067H
sbV9Nvc7pbPymhUmP4pYei6R4htvObPVSLq0VfJohQ93xiZxrm8M+x8loh9W
gWtIFhX7I6llmUiKbimP6kfSZkQ+M+ND0VF4uPNjMxm4II85M35zfZyetE3R
lgM7XKilbqAwVQxLSu35/KKJDB2vJ+2fBjPxvEoy1ujJcOX1uqYYycnnjlQ0
SqXV7QKmd/Xnxj2lT/vryaMhubwfE0wrx1oyPtFI3jz04Ou0BP66a8X7sz5Y
rNSRAJNqfvgH8+pjDbp39SWnyo2OksnN3YGsU+5h8sYMvJeEYFbsSX/TDOKn
ZlI9KIzJf1uw8V0wfi0C6O7uxe89AfTrEsCaJnEcKvVHd2QInlUOjLGz5foN
W8bfLmHsylzabPBnmcIqGUf8GRAUw3avQt4qzl/riMJAv2NZ4F3JgTquqLyr
/v999JyvuXKrRzeRcW3kn0dB6OzqKCN/9pasveHKLjSQ/33m4p3HTnTb3lDW
Kbt0Ms2NOcXVbCoLZ81Cd2yc0vhl5M33515kaKJZpGRjXxcv0rbkcbR3CpuC
fMm9GMr8lExW3XNi4G1vGvXKIXVIEF+dc2ifE4LfQg+il6XjGujLMU9XJpf9
7/3jjWT/80CODqgtEbNqWJtixZBpRdz9ksrgR/Z0+hHC+4Acjk535J912aTt
UUmtsfGkheRzV5NB/14RGPfPZef5RIbW8yc7TlcuD4yl9zNrvHdqy7XEZLwc
bTk3qoy37Uv57WCJ+t9c6p3P5pWdJyn+GUTWSWXrgGDa2qXSJawIXdtMyg+q
pbxGXx797/NTkvMYs0Zf0r+7MjVUTxrp6sp/3xLp/baI0TXRLNfE437LUC7s
LiQ1J557DpX0eh0A7VxotVwjGw+6MlDhy8dKP9YcK6KpOpQ545U53WMs/RUf
Lmnvi/H+PNQmQajmlFCvQwauh9IYGhXDFDMPru9IoNuvFKaH2DDopjdZgRq5
t96cwm5/GPA2iYhbAeQOMsczNJzdMwIY1NAXVeMS7D4ayTnFyfK7ZzH4Sxo7
8sPweJKNlWsqD04qeT07A49dQez89BTvwzkse+RBssN3lqhUor2lkg8nbCgz
1pbUvyI4+tCCFr6JNA5WXHWuC8MCjGVNzBvuFf7mkrIfDHHC6+AvJvoW0V9x
0jpWz1jtp+zXlWrGbEulj0kZ3etmULg8CdfiZH5v9+ToRSt6pOXSY7IfCwy8
2GVWxaLvitNYufHmeAb7H0TTWcnJG39X8mdPDAYrf7IhppDSYQXkvf/NO8V3
mg4uYqV5Fj821DCtXRk3G3qzWpXOkCY1cDwI/fBqjqdUs+NDAp5Xspi82ECc
W8QQu6KSvt20JXphPolxyo9D8/DvHabwQhJXZ/sz41IBzUcbypWASGbNSmTJ
Fj1ZN8oD9TMPbpQqfdepHH9Xb150qWG2u0oSlnrz+YlKfjRLobKxIye6lbPQ
Tkeu9PSjZ5CWtM1x5c/EEK6uDqX7uygm/Q6gt30I/VNCiTr+lqinJdTYRZD+
XyDvj6dgcEotm2x8OTIun321KmhzS2FjJQcXXirj3KMoBrWP44i3Wpy9I7Au
rOHhs0q0+wXg90BL2udHc1LJ3s8r9eVLx2xijG1o7lDF0IZRbDr1hY0mOuLT
LpFYN29KtQp40d6Z1Sv9SdUtYIRNObMsPFg3voLkHQWMmh7ERt8KigpVkoOv
kjk59B2UzMRFH5m7LoegHdHsDwxiUu9ixs0t47+/nRgrKul3WV9KL/5gqZLb
XVKimLbfnVHFZTQ1S2N4zivMf6ilnUkh7qej6FZf4UN7XyI//0I/Iun/v6+y
JN4POy+VbBpQTLrCD4Vr0zDUrSD8jz1/BeVxsW8ue84F4Lq7mvZJEaQMccVM
R/HTJ45YLPvO9x0GYqGTTt3OSm9dTaW+MouaxvZka1exsX4a1jvv8MrAWCyu
xrFf6y4PJyZzuXEqdy8G8mV7GCYKn07oqOyfia502ZWPoZIt3wfXoFOilrCb
Dny5rZElf/sqeR/O72fZTEqtJma7M6NuZ2BWK5OKVbYsijEVnV6pDBvrwtCM
QvrcV8twFzc8WxdQ55CWeLj68L1eOpMWZ3J4pDva9Sv4OC9H2RV3AnsXUv9r
IW9++3D8ch4RIxUOr8zgzP0CHk7Kxeo/FwYpPDnAoYiHmkBKszUy53Q0Eddc
aPSymrX2+Wx95sDTCD3ZUG0sy0vCWOWXy6FIf4y2B9EkyVC2V0eyYYsXLy0r
GN84kUfG1jwabCyRme9Z1yMLq891xVNlIs6HUjgR1VA622lLYW8v2n1vLMZD
TKWzUyAvjcwkfVGlkueeDDxdTqsTerJqSBS792iJbbFKmj5TeLddMleOOXDn
sC8FpxROmuSCtr7ydQsycPQPJL/CneYR2diHldDsfgI3jCO5nBXB0Lah5Psk
4/3Gni5HHNEaEIXhmmLavHVhpJIVjWql8Om8Ly015fhcUYtn70h2TTaTy1Oq
mNPEU+EOI4Xnlb/nZHdO7WogbpV64vXpF5cqm8mMrHryT09vVCOaSv4hfdkd
50jbA2q5+T8ne/+TjaamEjlfLTvLnViuMpUZq/Sk5bEIzEO0pfbHZFYaJXK9
TyVbp/iz/+sPRncp5qRVOMVfo4luryM5fSPROZKA4eEC/Lql45JpB4qzZ47L
I+iYLZqZCrverUb7vww6/jYWw27ZdB2odP4HtXTfXUCZ7jtOTK1itL+xfOjl
w9lBWUSPK+LgIit+HSgkwTWaR4ucaTslh+ORVTxSHN3SM5XMIqV/ajkyeamW
pMTVln7R7lzoW0p8aABaq/9w6kYIW7p9Yae85uuyYuqNiWXLcS823a6hbXoI
W/08OOxRxtaWrhifSaGjdxGz/61hyK1UZr3XklFtU8jt/42EmwrrjYmnW6EH
GntTmTc3BS23EC7XMpaIfnk0PR/GkO0a8S/2Id3FDo+GBaxdnMiQBxE0v6mR
MUqGL7rrT5d1hZzSzkD3wg8SlByecEQtdYvdsTwTjXZoJvbuVqxeloGvXjQv
OwYzzUj5tfuhfM8K5O2+VB4f90Q1LRD/dXmkffeh+mcaG7rnsdc3i4ltQxg4
QE8MbeuIpXIPrZ9X4rQgDdtZmVwKqmFEdzfazPRU7iKGW/9YscH+Jjff1LD7
qx9dI5+RY1lMkeKxObe/07B+OKMGlDKz2FnJoGJG7XbmQWMX3vxXzaHbPzjr
5MV8S2+6nXQkaG+gwuRaciHoDVcqQ0g1MpRFZ3TkZqkvhtZV7HpUwN7/4unz
wZfi65F8qO1JumklIShnND+WKpc0Vi2OYnszH3z2lmNdy4vmj39R/2olAdud
qFK5cHR/FkebJrHuzh++tDYRC+XeV3t6YTtZ8ZU7cfwyjUfnjVqmTU5kmmkS
H/5Vy6v3KVz86YCX0mVObvEMux7AWss8br3IY8v8dCyUeVwwv4KUDWncXxfP
tV6h+JTY4bBeI1aBhZx4GUDavyopi/DjxdafbKqnK+eulDLf14rOm6p4V5RD
s0wLmo3Vkr8fFtNtqB+TU8pp0K8Aw/lejGlZoszBH74uSSE7MBn7YR9p6+TP
0+25XH3twaluVpw+qSWPFB84qWR4nXp5yIMo7uwLppdOFisDs6g9SmFLWyNp
eVAlPgcDSc2OY4Z1NaX1Hbj2Qvkay+JIahHOzglFnDilJbMu+FMZkEH4rSTs
RvpSt3E1HZrHsfOoD8eGVKGjG8KTIxbED9XIguW5DJ6ZypILCVxaGk/vfTY8
2p/LpIdVaDJ8+JKTQsL2aOo+jaHQT0/8mqslY5IzoQH6EjylgqVe7nhlljAh
yJJMrUBu71DL1cU5zN3tRVvnCrYmlrKqezzmFpWYXHDEb8NH2thXkr0inYIi
b1qcj+ef9xEEH//N0cZ60mRbAir8qb0tl5wnmYpHetFnaBJXwrXlcqwv924V
sshQcWNLJ6asyqb/QmWmZnjxQrmTXaogpmbFoFOtkREZVWzqWcoDq1x8stUy
qzyMHauSqNXq/zo666io07cPzzC0gNi1a6zdq2u7Xo9rt661drt2dyvm2mt3
rq2YgIJId3cPA0N3ztC8z+89/DOHA8N3nvu+P/d1nTPD10iYtQ5g7n8JHJ0Q
JP3Ki9fbcgmUzm89pYjUwWqGrQhnY1EwI/rVcPJlGRtee/Hyh7V49lTHNXme
c6+pxMuW5fiER1A1TUfk3Rp6jvfl0VmlWP9Ag0VEIDPk3okOiaftgWC2XjcT
LeorCdd8lV6gELYFanTnHbF7kIavzLLYdbGM7F5HS1sT8TI/mO079bw/Kefl
Tii9dFWS2w3E0uRI9gYYiIMTKrgY5UXmOB3qQxkcdn1C3DKlWHqvkOhR5VxU
lvJkvlI09POlYK+p2NPWQkwJjkNMymbfNgOxpLuO5euyyT2Zwrepn8kU+VTs
c6Gn3Du+Q+OZcSaAurNJNP1kKOrnKUSLtQnMr09mQKUdI884cWiDsShQp3Fw
tQcuuxTCTGUmyt5L7vrXQKjGNRZpk93p0SWBBp6+TDXXssoijR9Bzhw9EU2D
ojTyJ1YRnPEV8SGTy/0C6FQra7Atj2820RwaqZE+aSD+bKQUl/5Ss/aKhsi1
xcw66Mmr15V0nprD3Tf5dImtY98SA9H9rB3PKpPpvTeeiz29ea00EOsbxpLQ
MgSrpW1F3VRr0b2dN+fcTUTd23Ry1c7c/qwUs9p4kNb+Hf91bCreepYxzCmB
4QlK4eCdiCY/h4yGjUTdRVMx6O9EesZIRv47ixMrfJjsk8eFWbkopnhzI7mG
OVHS1/bE80djQzF4r5XYbOhH0GZZI19Dsdrak9WuZUx3CMe0sSuvbsfRzCEb
Jw8PJvQpwN8qmFLbV8SklOCW+r97KiYw/pZSWN7WkefvS8McEzFmtLnofOoH
YS0bC1uTWjqZ+HHduYFodMRaWA/2YORDU9Hz92YiUKPmTZMkHvVK56GrP21y
SjC7q+bpx3hcm0aT9ZNKFI3wZmRFNl/3K0SHpxGIY9Yi6EsF95YFcmBQJktl
j3vvD6Pgq5nw251Nj9la9s02FEP31KLvnkb757Uktcxj/p+JrHurECVp+Wxz
/sHt8lqGPTYUO6s8MdQbiorKTB7bx3DMroKxrolkno0gMroanzUVaG1i+Ty4
iAYPqzhW/IVHO1SiLCmNMSahBI83ErUmVWRvTmFDVCHX47KIW/ydo7MKuCT5
IygrjaR2Gozma7krOVWRKr1qSQJWb+NJStexU+blCFUmY2QWlZcWs+pdIUW7
LcT0MHMReDmZqdIfZ1erxJgOHiiN8xl43YNtH3wwXRuD5e1H/HU4hMGJZbS2
z2VDpCcnvKsovqnH2tOPSVojoTmupmNJDFWWxbwZ6UsHbw+mHExl2F5npijt
KTBOJraJdDvPXPpo0pn+1h/aRvJuShOxosJQhEb4kD1TIVruLCRkfhC7Oicw
J6SKhjWR/COz7X2SUpS3isbvgR63zXacPOWBzckKRlr5ca3rC456VhAn99HT
Rt7cti7h/nGlGNJDjdkkyTzlGfgviqNL81JWKLWMG+NP88l1zNsTgP81O2Z7
F3HotTd8dKXnoRIOfQnkTMoH7trUM2tUARYHnClaIT2gWwG+06I43KOCA6ap
9FF5YuRVTW/LbK6+TSNLV8NGtxD+ygvmvpOZsGtQyIOvWVwfbCAWp2Rw7Ogb
kmYlcCSijhdjE5j6PZnJF+O40yeJ3+u0rLD6ytVHQTxxraGN6gUL5thz0spE
nArVoq8MZP/JQgzeRlN1w4lcfTEP5Gzf7CY5UGEgjjrWU9o5GuXPlaTnZTFp
swtnvhmKp/4ptB4aQcJ+I9F7diX9e7uy6nAGY9Py2Fxpi0OTFKYWGYnAU7FM
nif5aHc54bb+JGUUYtotkbp5/ui3mYuPcl+f7lqEpTzPOxcTODbYF8sdxWw5
kc8+9wgGDMxHn6+jt3sADqPUONyJoqAmmbb2huK2KpuAcf48m1vJBY88HngE
YVqoZ9YP+Xc2hzMyRsvuvBoO/3iL2XkdlweW8M+jcGYrarn8cwaVOf6M2p3J
3w9y+DE5ie7zq/h0N4GsZ75Y2RuIgpnpjN7jx+vWZaxs4MvHpUE4f69l22SV
aDPak5vjk7lvH8WVuc7EyHPyb1dM3scfDHGp4tQlDWeWObPsfqH0yxR2uIRT
lOjF3ngdL0I17DgZL3PdQMwf7051yxqaHEzmc5IL+9srxM+3a9g/y4s1f1ZS
aJTKymMf6OtmKGauyMexbwizjpiIVuFaTv8SxacTdSzeoqH7dHd5LoZCKXvu
b8KwczIQ1pXGItIyjF9t6lh4K5gdraJY80QlujlEMWq7t9yPFWQFJlFhr+XT
wTqGBCTy5Wc1x2Ue1reUPngiCZWHSqR/V4oBbq4kS667Ln2zrl8sf8vX5DxG
ITqdf0OzHTouLYihwsWNJafTeZ6Yjal0fM94NX9/LWV8oB+XDnrgZmMozkoW
2tk7nz4PC/kzwot1RfVYDEynOj2Fcx9TcbyexacnIXw7HYtNUSCeMlf7N88i
Jt6T2aVyrh+ZCrcHRiJsfiTb+iiETW4Gczr60WSukTjtncZwr2ym/ZfEymo1
m14V8GVkOVtfq/GRtXYoUYol/dMZtzGI8dFl7F9fyuScTPqmB/NKnUrx82z+
sMohulEV/7vn2bTMLNJTanBa6c9V6Ti7liYScTccqw7fuPXRE2W6GxYPo7Db
XUzg2LeYSm/r/MhSNN0fJR2olDbXjMVp/1C0AxoLE29j8Y+cS8sqI7HJuxbN
Ug2vXuoxiVWIAeeDyN9WxTaZnbERTvjMUoqmBz8QXfoDl8kxTDJ5Tjv52Dkg
i9mSwR0KImiTocfLzpdCu1Au3jMS8aFK8fvzDJY5mokOl/RoW4Zh7VNHyG0t
//Vy47yvBr+tHtw3/87nvytI/99n8+U+rftPKcy2a1k0yI4tOw1E/Dq553p6
YXq+iXi9uBTVcB8OeZgKi0G5tO0SzOUDVmL1rUpOW3qQeM1SHDMtRne8hOt+
ZdzqlctMnxxiolTCU7pKt18DsDOtZ0aEHrNvKezy1DP9SihncSM+1ESEHCin
ck4ieYflzrtYwr2DP1jRsgSHBpK9U5N4s8tMrGmex5o6NxLnl2N+UL4GheyT
QUFcCi+lhZuWr2ZBLP29kqE9ktjkUY1wSOH6Ww0j3xUx/0E2v2zNQbWkkCpj
HdnBngQWp3JIq2XQ4VR6jjATGbdKWXUjlNkjrcSUGXl4lrmzcXoBh0zyea0J
wD4rnzYjysl6mMjQ1uHMeFNCxYavREqX9WyuEqvepLDQUSl+GZfC11FR9Nis
FKUeMr/OJBL7ViW234mk3uE7Fw3NxZ+FFqLoUDCn+hbx8+44zNdk0PwvT8xu
BLCyNgMP4yruP60kY2Io0QlGwq9VHKYpakoqFeJ1QjRGj0MoSUmn/ehoPkt2
GjOrjA4+vmSpQzF8m8IP1yBsHIKxeW0q6vRxLApMQ3NKKR6/bCguDcyjuEEM
cy6kYxsZgtOCUko/GAnfp/EomhTQwEnNgbmRfLFMw3GQM5MmvyWjJoOiOBMR
2isJ+ys6Dm1rKLx66biVXM6Nwwai6yE5l6+aiPk/R5P5dxANG6vEpk5+/PMi
mZ42Gdw8m06HNXYIrY7S944UPLPHY4JkEI93tLaJYczKNDZ1KWJS30CODNdx
wCWerXJ3l2lquSCZ9V7vcFy6KIW3zKSDb4Jovd1M3MwLINM9nZ/HG4rUuHz6
34ykzqCW6ftSqXuaiNGOOpqfjmTx0y/MPJDKRi9v/oqOQdu4llE9bJn0px2v
xhuLXzt5cO3f75jLzEyOj0ebFMuwHJU40y+YX6cGkfVO8vbvqZg8k+x8Lp+Z
RWXM2CmzYXEdC8aVckv28O6GRkIxM5LhE5LZ3M9QaIZouFT8nat/6nneLg1F
9yQ8LKtYvSWd20NzMVysFLtuqIQuPJpjA3JpYCp9vbWs7UbJqxM8SIrUMF6t
Eh9m53K+2JPg4FzMfWoxPZLOkxH1PJ0kXdHpGxvW51CjS8JakY73gBwGfYyi
YXU2XrHVdG9djIWJ5MjOKbzIK2b3jCiaFqew00Ypfr1jyzJFCIu/5tL8gi1V
IoVPknUKmicwenwtXR7l0n5dBC9NNeS8yGac3paF/1bj3j2V9vGObFurEm4Z
WhZu9McttpjBU7SyRlGoP+VyoEUlUzvkoJ4l/dpMIRxapNDQVCF2r08jpXkK
/a4bi5JzemyPp6MYnYrys57Kf2R2GeYQPiSCPyd4Yz5Xzl/vRAa7huJlKmfh
b4XI6ReJ/5ok+shzH/jCHeWWCrIP5nFveSYz7uvJ+JrC+tJYgtbWYTI5m5OT
3Gg/VDrcb0nUP5LZ29lMLNMaium238gZmsC70locJmhIW5nI8ug0mj0vpLeN
uXgjPTygXy7Hsmvp93sey5+mcaw8l0OfaqkY6cSbLEORXV3Cf1fiyJE96bi5
jLeORVwtlTtTcohbZCKf9uZz50Uus3OkU0+R2bApDZetwVwxV7Nnjis/Vnhz
pUcstZejce/9Gav6OOKV8vf/fUdEuZouKQlYvAmhaH8+sQ3SsLL0wt1X5qOb
H9OGSNadkEdiVQbO5j40mqXj6jM5N46OjO7XTChjjcT4pa7sedtAuMt9faiF
F+t/qaDvvmKudb/PUrUGjUbLBMnNgc2MReE1Pas9UzixJJN8s1L8lRE0rizn
zJcSHtRq0eRV0MZK+k1VOlM3a9GNSCVlXCguSblMGVePqUsy65+koutfSxtl
IYsychn5dx5v8vzxii9mTkAMLa54cniahbj9WbKZxpZNimZixcR0qhzDcJAO
9NPdMGyaF/BnqyQaie/cuR3LPmdnnHe+wcr6C6eqErgS6CzZ2Z/Lk+NodceP
e6XyOY3LOf0ule5tA3k0P5dev0fTe74TXYNS6Gvvz8W2X1jTrIgNCSbiyrog
Hrpn0tSjhtl2Lsx2z6PBiTwaE4Jtbw2xbYrYG6LFvUM4pQfUDM9xpNkfBTw8
oBBve/4gxLaCT95R3M/MZt0fjUVKkUJ0HBfH91ZNxExPhQhrn0DFg1xePY+i
65JwcKhha1QcATHRrLuvEIZ5iTSe6MtK33IO906h7G0iUwYUcu1ZGA9k1uwy
q2HKmWyWVkSyfXgVPjuLifkpkCnFpkJTmsO37e78lakUrx6kEPTsEyYdC2iH
Uhz74cW0xnmMXGYsFhbGYvvFWJQXZmPS43/35qrgS5mBON8/mTb2KtG/LJOG
OyXvGhYzpspEHIxyxfiYGvOOJqKJKpH5HVRi14Vyzv0Xxeq2hsJjp+SLRQFU
3FaIrYE5aNukMK1tFbe3qpn8JZ6MlQZi5vQaTnwrJWdAGV2rFOLoqlBmLLAS
O/9OoF9ACHZnylmQEo9DN18+ny5iWVUJFouS8VvaRNzyNxPnvmXg2tpABBz6
SP/+DjSQmX5NsteB/xJ5f9RYzF9XQewbLZbtdLQUKrF/bRaB0fWMMlaIPboQ
FtZV4bspi1GHv7BnWAEr3pVxaFwY6lt6anaU8MI+gOUexqJTWQrW36QPm+Xz
8nQt3q7RPN9bRPHkPC72CkK3ppR521Ui2jIFwwUq8YdkfM3ZT7zuYCpmrSmi
z/wA0rcYizWdjUX4FX9eLjYUn1Z9xWxxPjvTsjj7LAVdx1Ac7lcyb1c2nc7F
Yj+xjKvhZRzOdcZhQzF+d0oZZR2E+pSFMHsdiK8qgjrpAce+phN/rwTjmzF4
9cpn9+koVi7W4/g+gPe3wln8TCWuy5392jONtNt1fOueh41ktfqxhRzqU07D
y3Ecn1FE6aw4PJeHEWpRwLoSuZ+HRvF8gFLsfRHPQKNw1AvrmOHvy/4NH1DX
lfGb5P5Z/8bRv5WWJ/hy5kw8fRvWUDJczfjDoTwebS1WjMxkts6BMI1SZK73
4osygV9HJuGn1fONfLp+rWWBdLQd0vEdEs3FzMk13GoWyrdpyfy0Ss+MseHc
mWEojmbK5xkQyeukYuInVmI9Seb2PEPx4Gae5JdMmp/R8+5BGQnXi8gLrKZz
9zRMRsZSPttUfF+Zzvg5MQT0MBH+7xM52jGTms61zDPRMzD8I+9MVOJeZgH9
9dGMLi1jSycjMbEyiRNmBuKCIgeX1jl8Sa8iyr+Url4aIr0NxFsjHYGfXHmV
lcddTx3P2zti1F9NWRctWYY/SDJI47f13pTwmUGTw4lJLWajMoCGkgeDC8q4
XJjEal0832ZnYeroSYBW+sXkAhIHJlBzvpptijoOn1NzrpMew7MF2HzMI3Ry
NZr/3ft4nTf5Si1Feunis6X77K7ivGQ+Z3WSnA899uv92T9aw+SMAiaqE3g9
LpUDbgZCG5bKwqgShrar55cDsq7ditnVVLKBdLmmN/Vs3ZjNrBOhLBVaasv0
rPJPxOqcL6v6m4pThmouJriTds1cLJ1mKb4eTGHsgQq8JUdeH+HATbsolkxI
oZvw4cCTSiqzKzn6l0J0G2okOuh1/NoxlgEDzEX/sVU8aJ7B833WYkx1HFOK
HLmUUIv/xDyGBEZj2qAc1aZM4i/58WlwFEuvaoj+EsWIyZk8mxrKsfv2bNhV
yYpyf6Z0/Zfh15x4Yl5O00PvsZf7s7us78PLgXyWHnbyfDQP8j242UaP24lc
uRuD2FBWIHNdzW/t/XjjF4lyWjH7nv5Au6uM+skyZ+tTsJxmLPwPyu/PTKZb
a1MR45VERK43q86qxMgBgSQvyWLV0gp8SOVukyAeh1ZREVHN7hvJ7FsdSqdL
FRz4NY6p7tlMOVbAjo7u3LqvEhOayuzPldeVpxIRffX8/cCDf0I0OH/LJCc8
iKNbFWKdQTENvKJoctRAdPquEqV+P1grucSqn54L/T04+iCJJZeyqXYL/f97
GD6v9ietezzlW3Vcv+PB9JBw6nuEk77GF7uJKUTsCcTszQsaLg7GNkuD9zQt
x+bFMG1zLZ0XKMXDs9JpdyVzsX0kI2/Fk2WaRJv3EawdaE83dxMx8lEpHlW+
qDpZib23mor68DCOjzcRJ6+q+TbFkXuOGahrv/NG50xsvwS2nMxgu1cKga2/
M93TjSfrPmN7I5Etzx0Z2Vm69rosLB8Hkm8fT8tGKnFTVU7kQk/aexVw5Fkx
STbRGHSq5P4fETQLimJ+Whm1JZUYnwzhwzNnWS8fPMM8aXNOSx95VgtnuqC/
I2dlYxojJsr8WZmLvqCWht8KyPuew5GJ5VQP8CYw1kxM65uJwQ8/fFOq2LHd
UjjccORNto4joWUE9ApgxRdzMWWkG837RzBmnpEwdY3no7WGk12KSc7PIlyv
Jfq/PD5fT6Z3i2QGfFMzcbWOPpfUOAfGEFlYxALp44t35FKwN/3///f8pzMF
NDKuRzE4lf77M+kaXcav2YU4fMxAWV3Ow75a/l1exJpu0Zz+J42hcg4XndXi
1TCSjxstxMKXVVg/ltlfGMPAH0l06R7Ji+hsxh/NZdggH5Y8biLGLTERM6V3
fDyuZVl8Nhv8I1iSbS4SX+Rg+4+Gi7nmosignWhun8vFiGIaD7MUZTZFPP2s
5u7UVNYlytl+rWPpswS+1oWxYrZCqE7nSe5KYZt1Nf4yJ9tnxmMcoEP3IxOG
p1Hvns+Yx0U8do7kxsxcNI/KOG6bzh+3KxgyMYQtpYE8uWIldG/ULElIpFGo
QvzWS8vU7yVckp5dfdWFDncj+d6zhWiyIRH/Fm60bqASJZ2zye/jRohk81Zt
dUyqz6XWQCk2OuQycJ0Gg0VR3K7TENPUjmnBpcyIi+LNPB+me6RQ3jeckGAv
LNfF0C8/mkXrHegYohBLmxayKSkaj9M6bNopxPzvobTLTuPPtBL6ixB+6ZvO
wh5Z7J4cRsexmVjJ3OiFI780VIhlZxVixmlbVEapfJS9e+hUEFpZ/8W7S9gT
+4aycKX42KOCkr32rJ5eTKcRCjE5KomMCaZi49g0Rq50RkhWsm4UzPKjair7
FZIcHCH7wIP4q83FPHn2totCsHpgLYY8SKfnqwTS71SiGRtLQH9XdllXMcK+
mscyh7OvR5Iflc+bL75ES2f2VufSOiuOjP1l9PavJVjy0rxnhsJiVjmL9mSz
tbuJCJ+Xj+WzUP7+21yM2BnImV9SKZQ+Ou21lo3S9V9lpRFaLrn3dgpn2iZh
I71s6ZB8Pr5UiEfybC5MCGV2aB2nmxTzMC9EOoCBmDujDoff3tNnQz7DLxmK
bynh7PpHxz7/QskLHzjnUM6UqbWE9HNm55MMSkxCmfLWlvMrfBm6JIoWyd68
zk0k/GEh6hA/nj/P48pmDa2WOdB8agwW8vV5/R5I29AQ+EWNk20aL9amsaer
Uth1SqD2Yjk+X6qZK/f6zEfF9AkIY+r577jE1PGpPpkbtjG0s5ee2yiD2spU
TvnqOX86mT3JX5l9sYFweV1EzEwPAs8ZincXLMVf4dl4yn4bP7iASOnh54dF
cHJgGI9vfGH//Aj2LklmWTsnRheX0yimgLa/ficlW9Z8QwHP5nqwXhgI9b/Z
RGk9cFEai2lB7nRc4cz+l8biD5mpgUu+4ni6gtQdWUzvm8j+hAbiqFshq+R+
7rRA1v2t3E9fg4hdaSGCixNZ8y2GLxuNRI7CkYNaRxpUpNH+61d2jw7gVYAf
w2vCeTAtgkF/yR3sE8bc/R5oJ0hX6JNKZfAPptmF0axJAgPbhrD0j4bCrchS
3ArxotEOhXBMbChiZ0ew7kU0Cz2z+NPGkWW5kSQmycxrmITpvRxe5X+nzSM3
Bs80EKtnp7Ag6ztjLVVCMbeeI7WS65ZXYpfjxcL76ZybWUHzU964aAPxnFtO
zKBIQv8JoU9HpUj2T6HLhSgGNaun985ycjbHc2O7no19s/hVGcOYzwbiTlQR
Y5JlVnQsYkZaGpkuWSDzM8sxlIgsP56ZFXBOpLPyTALN4jOpaqUnflYOQ6Q/
dov0Z8XjSOKSTYRjuzDimwdx5KGBWNPHSDh+S6dgtnwcWE6a+h0nPiWS0DiB
eYmuTBzgRaz/DwZJjhpukcTX5FDsZZafKjQWP7t6s2xmGKZVwajSnRiy05Pp
x5O5FdlAFGYl4nuiuejTvr+IWxREcWhj8WyRlViQ5sTqZ3X8dCOf+TkORPXR
s2ahkUhqJX1ujw9nRD5xzpJ9b4RhF+XOQKcwfjYLIX9mFu+au+F9yUAczKzG
0DqKGyGW4rCphg1LKji50VKEbdeQWhhE7duGIn6Jjj23XTHNMhYrNabi3Low
TnY0F56S0R+tjSVRcvGo5SkMW+rC0p55mEiecrjlxPCBoZyVrLzLIRifQ3ly
xyjF+3I/3vauJO5HPmvWh+C0Ip+QwEwOXnWizKmBUExO40PXL8xsphQew7WM
npFKh+0FvLpQzd7CD/QuVonR/3ufwOFo+o8ooUqy5PxvGm731LEqSkeh/PKo
0ONVYy58y0rZs0lHxzw9jfbGoEsp5fzRan767wedZU92Ha0QTc3jeFNiJMb0
iaMqLJmRrZUir3MgB4ilUWwD0f+vBDZYJ9LVLI/rsk/XJEYwu0kMu26UMeNs
MPtLa3jcyEAsd47C4w+V+OlwLTMulNBczlzbzS/wnx3Eq/+9581RIfQ745hf
racywVL83C2epqdzKDQvwGDjD0LTKxDOpuKsbTDaVaZiy+5EHL1j0I+uYH2Q
Srw7Hc/3rnEs2hLHrspsfoksI3uWUuwf4omRZI92krWD1kcT2F8pphon4PU4
keULDcU06wKMKlLYsKCO5C0ZfHJyxx5zcS8/mZ6NvWh+vpQjfkEsMHdkXICe
Ty5xrP/gydaPRdxtWU73UQlkttZwY7lSzJniwv3ADFo9LWNtticXTmbS810m
xoMDWRCUSUZXTw4MCiQ1oIrwqbncPu5EpF4hFreuw3a+Dz2k870anMGOqnD+
aWMmvCS/dJfzfMAkm0Ob4/jS3YXV++q41E6D5ZMomsbW8t9f0bQ7EYDlgUpe
/q6mb+xLXLfUY2NWS2/9Nw51UYkjPxVzudabLpsrODIhB5sLevbUmoiPiXmM
vp3FjUH1DK6Opu/HUNKNVWKFi/TpQg/W1ZoJ7/xs/r3qyMqGhiLULJV2/YNw
yEnlyHOVKB8ZxGFVFs1ma7gr+cXwuZ590t8mv4vh2LUS/EbJ63/mi6Gb9H3D
JPqnJeNmp+N3wxxW/ogiQeZFm9YK4SR38R93ixnYM5fpUf6MMq5jRFQVVr4V
RCTV8WvjEp4WpNFMet97H+n7H92pGmEgLNMLcH0UREWxF3+cCSMz0Y9qWfcw
9xBqWnhx2Fn2TkkoCc/iMLiUxcf78lpPuNLQLJ/r6yLZlB5N5fws2nXWsCcw
GP/TBfyoSiNgxTdORmXgKK/Tdmos1WfzOWRbyf4qDa4naniQk4/XOG/OTVSz
a0I4Y9JDeLsphrOyhsI7kkyNlvZNDcXA5lHED02m7XeliNpax4bdSWgM/Hmw
wZM++U1F+DljMd4qh/2RKpH9exmTggMYsd1UGC/Ukz4hluy5OjzWmYtI+xwW
zyniX6MS3iij2NYij/vmoUzQx7JG7l/tqjoe7PDmTXM9ecJCDBoRTZeIElov
TGLE1UR+6ZdDq+PS169JB8k1Fj/+UgrFgggyZG98cSzAr/gLB+dU0fD3TMw7
RjBE7szvS4rJ7ZiM032FMDVIZ8G2RGz6NhB/ZVcxR/GFpAXV5HzOxUkXwp7f
1HwNfE14189sO1rE7/8l0n2rJ5M0ORiOy+c3eW1mwZJ/jpfxfW0o0Yt0PDvk
yNj8H0yf30C8vlLMnX2faRXaTCx3qcGp4TeaeORj7RzDh/AIwgzkXpHz7hEb
ykCHKjrrInnzmxtm/lVofkrEuaMdxmVG4vwOI3EwN4Kmg2XKOUWwckUMhS+y
OT0yQGZHCfn3DUXyJX9OOKawvZeBsLuiZnVuGivmaLFwLMRmTCRvY3JQHahm
10Ut12PyeBYez7qeCbyU7hkcl85Ay1yOXqigiyaD9Rd86FcbQW1KHokd42j/
oYwvpjrMOqlRFJoLa/cyxnasonJec7HTqYQ0D2/0s4zEsIeVtFRHETQvg8hm
BmK/jxc/64P484Nk1HcOZF32p3ZnMLf3uZA4u4QRQ9SSBd0oWmohfL0biA5n
Utm5yUSsm2okPn/+wrbzGfivbyiGybMdtj+Gn4dIVq704uGnMubcUIrZ78M5
cc1KJHUwFxcNNTxaq+fOjHhS9/vRVOuPz48IPj39TEmqB7NXhrN+0w/qrkTQ
Xvar76x0Rq/VUFjtwPJ73gzeWoGbWQbDct1p3Ku1OBrfUGT8LGvgZy4q2xQR
N96Ljxb1dDhTxqZN0dy+oKObgws/tQtn+B0z8dpdyybjGLy61jN3UDLZBaF0
e9pItPoYy8rLmaS667hXXUy3w3ncSc8n3yWZkGoPdo5WiVEPitm1y41x2/KI
OFxM8bgKXp3PY862bLLmq6ldqxA7plST0vszm7cZiOPbS4k4HY3FDWvx4hcN
IZckX7xQiOh6Pfd3BJFpVIZNm3hSzgRysH0xdh98SVjuh3ULc5H1PJbhxc6S
m5IxWxPDgwufePhUx8PgapIOaUhbpRIrXRTiqLkfjxIrON8gidqufvyUYiHe
1ZXzZkgsPUKrmTTAWGzvK7N9Wy0XV2ZxxzqcEU6mYt4wpdi23h9leQPh+DGc
J5Pekv9Uj3evIHq4hDO7Ux2P5SxkFSQx+WEFo9uVsGFQNtfkTv40MIFut+W+
3dNA9F3hj1WNL7MqDUT1Uj2Wv6fz8GQO77vHcXWTPfNEPS8qleLTvQB8VErR
NiKF95ODue6pEIEtI7mUmErJqVxMOnlxKjyXXf5Gor9RChf+jMPxVjmFR4up
tYtl75/luLtmsLckHBvJG6OlC3V19ef0yzwOrU1lj3EQGRFxjA0oxE4TzpSO
4aitItAmReF8IIftk5PYl/2Z3Q6FXP1Uyg6ZjWfOK4RmtZm48jCGZdm5nDxq
JPo29uHG4gL29KzBQ/rnuHaFJIyJo/WlUKrRsWJRHJdsIzh8t5p9TqW0lP4d
mGgqVl/+jFjmi7mnmRimjad/v3AKLZIZtiGcVi2CeVJoKLJN89HO8eFtoYW4
fFT62dVUTFcbi4UfSjlt60txsYGIVStF2D43DiyoYbFrAsNldgy+l07MwAx6
nv/AsEyVmD2phjUFdgy215Ndmo1pvTcTAqTLmZTRpkMaJsvqKYmrotlBNZvz
SqQzpTBwzg9m1hiLNqKQPRahXGlYz4x5FazClmJNBcUr6hlwO4E+XStoNLMY
m7teqNeWYVETSa8brozeohRHXur4rIzj0bd6yjtn0s3qAx/mlOPdv57d271w
TcyhbEQDEdc7m35jCtj2UxZ7N2lJd6jkP00qTTsn8c/VIIK/5zFsbBbz7MpZ
aqNho8yKWeNVYq1kj47RnmxpFM/gdakcXhjF6dh4flbks2V+BpMHpKAMD+Bm
/GvmzazBxCoWC2svGo80EW+qsmm7xZOUm4W4vdJSlRRLgx4BPBoqd7L07uY3
0mi62VJMNNPwuSKLHvtzCZV7dVpwLZ1LsjkxLofT38oxM1CJPxrHcv+qUpTJ
eiB5//svClHvn8kNu1SuZ+uw+jeOewcisF2qo6J5gtw/CfTdXc3VVSbip5lp
LPWMo/F7lSg2i2Pk0Trm39KRXBTFx98z+C0rnJ7zvDDcairazg/jH3luXfOV
YqcujbkHfEhvncPXi1UyG1351MuHwf2K6dnrEx1tCjjUPJ1LXXx4cK+C42Ze
uLQO4tu8Eq5Nrybv10j+NjAWh3Q6Xj0O4nN/hbicnMq9RoFcDSpB9ymV0THx
5O0zEpMfGIoLFokYDG4q9s2o5EIvDYOnKUSLCwHwxp1A6Xcz5U5KHvOdGp2F
iJgof35QAIsOqIRqdA1m0jd9nlVzdp+xUL1PYd5fagbKXKjqaM8zWwPhap9G
F2d73M8aijfrCzHOi2Z/IxMRH1zDWttsdu61EKpZ5fLaXKkJNRAh9WncORrK
TaMcmlrnEn5cQ27fWv76mEjDgCg8txkJ0TqFa58MxKQeNTAnirdFhWyYqsd9
TxHBJd8Z+lsyNo7VnBjlxvn5laR6xrPUPB6XgSXUr5N13hLLbxeLmN9Dy531
oQRM8ELxzIEZO4NYIb15am08j1oFU5uWgKvMoDEtv3JFsmoPbzPRcrQ3a39p
JDZPkDP/7gV2zgbi9E2V+HVBJtZTzcWKm5Yiw/oZbbplMHOUschp44h9kxD2
LQml5+RQDryWPRudSta0dDbrk+kyTjr2Thca9NSwZI0v8/uEMSFdIT72VJMe
+YzQX7Ss++TPEfGZ08P0PG9tz821aqx6y0xdGcDv/k7M8i3n1LNYxpklMdq9
iLogP27vzGDFcB3Lb8nzf5TE7W41pHsX8jziG5VJMVhejKL2ox0G35L44F5O
SKE9Gz9aipxfLcTHQaH8H2RKPfo=
    "], {{0, 150.}, {150., 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real32", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{150., 150.},
  PlotRange->{{0, 150.}, {0, 150.}}]], "Output",
 CellChangeTimes->{3.8882158299826612`*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"312cda31-20c8-480f-ad32-2033e0c1a004"]
}, Open  ]],

Cell["\<\
The first image (a randomly generated image) is classified as a non spider a \
relatively low confidence:\
\>", "Text",
 CellChangeTimes->{{3.873543905679192*^9, 3.873543970705014*^9}, {
  3.873544016574234*^9, 
  3.873544017505741*^9}},ExpressionUUID->"53cbaf17-d162-4404-b8a5-\
83c59e786c41"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedMimicNet", "[", 
  RowBox[{
   RowBox[{"First", "@", "randomImageToSpider"}], ",", 
   "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8735438976922283`*^9, 3.8735439260192337`*^9}, {
  3.873544041131907*^9, 3.873544045969659*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"f096ff8d-6b46-4547-a649-b07f25d8d2fd"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Spider\"\>", "\[Rule]", "0.18782876431941986`"}], ",", 
   RowBox[{"\<\"NonSpider\"\>", "\[Rule]", "0.812171220779419`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.873543896177683*^9, 3.873543926336975*^9}, 
   3.873544046400524*^9, 3.875899020170581*^9, 3.882591082560445*^9, 
   3.888215841220406*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"01ea55a4-17df-41f7-abd3-a413f2ad223d"]
}, Open  ]],

Cell["\<\
While the last image, which has been modified, is now classified as a spider \
with a really high confidence:\
\>", "Text",
 CellChangeTimes->{{3.873543951691174*^9, 3.8735440209253063`*^9}, {
  3.873544052846931*^9, 
  3.87354405343839*^9}},ExpressionUUID->"9b0ef305-183c-41f3-ae2b-\
99008bab7f89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedMimicNet", "[", 
  RowBox[{
   RowBox[{"Last", "@", "randomImageToSpider"}], ",", 
   "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8735440266188707`*^9, 3.87354403811613*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"cc760b8b-3efe-4e6a-9861-3f476a22539f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Spider\"\>", "\[Rule]", "1.`"}], ",", 
   RowBox[{"\<\"NonSpider\"\>", "\[Rule]", "2.623937181696714`*^-15"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.873544034242597*^9, 3.87354403846154*^9}, 
   3.8758990247019653`*^9, 3.882591085513667*^9, 3.8882158428466043`*^9},
 CellLabel->
  "Out[125]=",ExpressionUUID->"954ba451-a208-4f64-83b1-1c9d6e60952a"]
}, Open  ]],

Cell["After 5 cycles the confidence is almost 1.", "Text",
 CellChangeTimes->{{3.873544529046653*^9, 3.873544582044417*^9}, {
  3.88259111427289*^9, 
  3.8825911523742323`*^9}},ExpressionUUID->"acf56462-5222-4d65-9aa5-\
4c5a401e2b37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"trainedMimicNet", "[", 
     RowBox[{"randomImageToSpider", ",", "\"\<Probabilities\>\""}], "]"}], 
    "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "\"\<Spider\>\""}], "]"}], "]"}], ",", 
   RowBox[{
   "PlotLabel", "\[Rule]", 
    "\"\<Confidence for classification as a \\\"Spider\\\"\>\""}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"\"\<Iterations\>\"", ",", "\"\<Confidence\>\""}], "}"}]}], ",", 
   
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1.1"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.873544077898587*^9, 3.873544220666506*^9}, {
  3.873544480973647*^9, 3.873544516433362*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"8bc71402-8a44-4bac-955d-b0fc9b42e3ed"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      NCache[
       Rational[7, 360], 0.019444444444444445`]], AbsoluteThickness[1.6], 
     LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAmIQDQEf7IHEgqNcJ+yhAg5AfIBD4CmUzwHiN/BKvoPy
BUD8hBeH3kP5ImD52xdgfAkQX2HnXxhfBsR3kP0P4yuA+AzZcHklsPq3cHkV
EH/BPzhfDcz/D+drgN2H4GuB3YPg6zgg+QsI9ED8B7/g8gZo8oZofCM0vjEa
3wSNb4rGN0Pjm6PxLdD4lmh8KzgfAJs6RpQ=
      "]]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox["\"Iterations\"", HoldForm], TraditionalForm], 
    FormBox[
     TagBox["\"Confidence\"", HoldForm], TraditionalForm]},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05], "OptimizePlotMarkers" -> True, 
    "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotLabel->FormBox[
   "\"Confidence for classification as a \\\"Spider\\\"\"", TraditionalForm],
  PlotRange->{{0., 26.}, {0., 1.1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.873544088678849*^9, 3.873544143810841*^9}, {
   3.8735441915384617`*^9, 3.873544207185459*^9}, {3.873544507701667*^9, 
   3.8735445190149927`*^9}, 3.882591089731544*^9, 3.888215847706986*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"ac862ec0-014a-47c1-967a-4688efd92342"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Creating a random image and modify it to look like a non-spider (to the \
network)\
\>", "Subsubsection",
 CellChangeTimes->{{3.8735438231240664`*^9, 3.873543859507203*^9}, {
  3.8882159363553*^9, 
  3.888215939673938*^9}},ExpressionUUID->"c097751c-8169-437b-b303-\
c6ca690b2d70"],

Cell[BoxData[
 RowBox[{
  RowBox[{"randomImageToNonSpider", "=", 
   RowBox[{"imageMaximizeClass", "[", 
    RowBox[{"\"\<Random\>\"", ",", "2", ",", "25"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.873543872955289*^9, 3.873543887701442*^9}, {
  3.88821594385498*^9, 3.888215947113913*^9}},
 CellLabel->
  "In[127]:=",ExpressionUUID->"9ef9acc5-f330-4a98-9940-51b60f8bb42b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"randomImageToNonSpider", "[", 
   RowBox[{"[", 
    RowBox[{"-", "1"}], "]"}], "]"}], "//", "Thumbnail"}]], "Input",
 CellChangeTimes->{{3.882591017744451*^9, 3.8825910190988007`*^9}, 
   3.8882159493601923`*^9},
 CellLabel->
  "In[128]:=",ExpressionUUID->"bb5619e5-0aac-4985-b67f-0fad223d46d6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
0HCOqah4nUDA77GkVFfyoHcogR5+hDUxEwZjLJcr/dnum8/CWTms8vfit4eZ
jPcMpu9CF8onZDLfJoZXl0JYk27grkMUSdd8+DnWRNyW2V7vhhqPnHTq9EhH
3fw9JxyrMTFNlx6o4ts62e+DjHw8Fc2auvlMS0hAq4xmbV0bUROUx5p5Xqxd
ncN3/0qu/sgjeWE+7lvzeO/gRWQPpaj/poqYCH8KC/OI7a7DelQwLX8v55ca
c3E5IZpr6xRi1nMN7/5N4VmukcoULb+9jyZurFI8j9LQbXII+x/aCPG+GnPn
IAZdkpnZ2ZfSsT+4ciIf/wapzNWH0F4luy5XKU7/8KF7uxxaz8kkY3owfu5K
sWVAEe2bxdLdzEQ88a2g4T1vRv8uHbncwKx8N4YetBFneqVjIl2pqXxf+rYY
To+PJOV4DqP1+TS75UKvCxnoBvzv+QYwaJyJ2DbRwKMmKVz8bORTvVLeywxW
nUzFPjyX0Z18uaSIZ8DLZKYNdqawXzWH1puJO07xTNWaioZNzUXkpnBCntmK
6GQzcb00i123rMQ0vXSk81EMmK4UPjeKMMlxoUd3G9GwRSETX4fz9UBtcWtW
S9F6dDJ3So08u1vFwv5R7JR+UXuWnsgMA99t/Om4Mozrsi9aS4b01ARhfiKF
pv/qCfggmTHnHTsXZTBVnkuQv4qk5VbCcpZR7mQgj20LGJBXyLkZMRQMry3a
uUZT+CWVS7VtxZ7XJTya4cvhbeU4FZqJyyHJjH6v5fFqI6s3+1A2z0L4/WIp
UtVl5P7aUCzbZCO+VaZjc6CYK7U/stXRm3rrMnjeKZn8apndTolYjteQFBnG
bmMFHoO0MuflfuytJnh+DMMdolkv9/fBEoVYo/PAOqGCZV+SaWCWQfcSyc/y
/MZ8S6Llo8bil8Z1xLmj0k2P55KUmYm2oxPnp1iK0fpqVPs92S0dLWNwJrPO
ljOzXxL1m0ey7ZU7PS9rGeGfxU7JTtnrQnn+0JnwcaH8aQgjKOsTxW+DmOVv
oPsHD2Yqwlk3UsvoRp58LIhh34gcNpVF4yyS2NHZVBxpWID5Hnd+m2Qi2sZl
sGXDN0orysh8a2TN7XRG7pQesDmEK41SCNTp8YgIY9k/QRici0h3L8c1NgvV
0kJ69imiq3TPSfbZkl30jP3f71321pAVoWGyWQCN+moxDDNQslE6Yt88Dstu
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
W+Ky8K1TyB9liXQoL+PInEpO6sMQFypQvE7BbLgL7cyqqO1XyOPoGPrLnRoR
Fc9mea9mVksmSM5JE/dvrCss5Q936e3z0zncLJMWk9Jo+MqeORkK0bh5Ls1b
/KLpGytRkphInDGBDy2UoodtDH3WBpIgmU1fFktE8yh+BSby9KKKgwHRTDle
QtsxKtbu8AU54/NCMmkX5ERoqI6t1WqI+Q89Ofq0lJbSOa7IexX4xlT0a2Cg
pE0kNQbm02JkEY0s0zCZXkS7umnUXhXE01kW4s806b/zvlJpaSH+8DPy9zl/
GrU3F3WG1xL6IxFY7Mmm1vFMMjs5YGWZRdl4FQ2fuXDOy0Sk70zm4r8awkZG
k2jpR7O7LryqSGbdkzD+mBTKsQaZPCosY/UKPwomKMX8V3kMHqfhw3w9PRvk
4laRSfMCLet1ETy8mYjaOhHbwBwevnbmr6Mqnpuk8SrOn6DOabir0olopOYf
XyNn0jNZ/sCbB1eUok0zDUFu/hzWVsIiyYxhbgSPj6VxQCUJjaLw6G1gbWgM
tet5YjetnJP7shg8IBoTnzzu/8hjyWBfpl+3Fj+bB/KPpRtf51cTe23TOJv8
jTDLQmY/S8cwLZRZF/Us+KElYaILcRV5DLfJQNcglO0PcomoFc28/rGccpVd
ti2LO51DuZBRybx1EUTYaVkm2WZ6Jz8uTNLwMzeGnl8jGWeUrGMaxauSDDb6
B/FtZjo//jMXrzalctTHgGepiWB2OD0S9FzKMxUP5oWzdEcZF08lsvm9O9Zy
j4csrGBt9ywiJ5bgdNxCXHr5mZI6OoxeFuL8kE/ERirE+5p65roE0r5E/jmy
jJ01pMmrYrn6NZNBNaLQ/13IiFlFjB0dQrukOkJxNYLA82Gkbqkt0iaGsjc8
BItrhbR01rFkgyPDS5KZ2bOSpPseHJlUSvq+QjjvxJbQSsbHZPNkWAiOZ7Ow
+t/ny4f9Imy9meg8Uk3MB+lKLxSiMN0JN+mEL7qbiev9U8i/FsvcbpZiyKUU
Dpg7ytmppPK7D49TgnnspBT962iI949F07KEUaos1q/3JeBxGYZVMSyf5c2C
b0px/0U2uW8SmLDKRgz+Hsyw5vEkH7AWzaRfTvs7HEQtsX1hNlEWeSTEFhM5
sIT1/eLYt6eYc99tRO9yFWmhRbSdWsrbsTGs2J3Ghsp4JqtjaV2rpjg828DM
p5GMWJ2FYpSOX729ef0ihgcyzw9U2OPdwkzoJ+vIuSK78lMxfw6Mp4lLDgZr
C1HWsZQYex/GHq3ikMJU+DdNYeANpbhWYmDck1AGZNYQk69qKa8Vg2aQUuSr
pYNnfmH/hDScZH5Mr/rIl9OlmDr5kjPPj9EHTMXEA9Es7RNBrQdlTP0vm81b
XJnfoYDM/BxeX8slv8JapGw20KWFK7N6ltKmlrw34/wYNi6bjm1NROM2IUxp
GccSZRqhcp87RQfju1hPb523ZIVyph1WYdnQge+BZiKpWjSLu/riJnmtYz0N
g2ximHLBRpwuz6TwZAI/NkYxyroCu4XuBPTwo3SCmjubfHlav4IPg0KYPzSc
1Nql1Kkn7+9fUWx+a2R8QSW1XztxzEoh7tZXiGoFTsxYaCVu3VKIswcccEpQ
0c1T5lEHJ/KjiiiJzmR+/wBIl/ximkGYkzt9+5Qz/VQRda38qOmVyOGoNHa+
84ZukrcMOYycEsoZ+2IWbdLg3iWWVncVwuWEgT3SU7b+Wcx/Z4JIXhnOoHby
axZpqNssgmNDC1hYHEPy5WTm1UmnZ4sU4uV5bP+YzfxuSZysF8nKtqbi0qt4
uv+dRaVZMfXS8tFMfcPjseZi85VYrpd8JOuaQkS8iqM0053XQbF0ck+m+sgE
HvU38D0nBV/piUnBlRT0iGHCwN/0dFCKpcMc0T/1Ia6N3OeraTw/6EGyp46/
3pWS+FPmUsNM1myJw/YvZ3o2LZGuFsPj1i/5ahlJxD5HGoQ4YDIghaYyA7+3
CSKq3FysVBlptzMQq5Xp6FrL3UuKwFy66ml3c1H9SAaqtmbi5a9AchpLnqgZ
QwfpH6GVblSfruf54TzuRBp4O6MEH5GFq4cDEz5X0cC1gN93HqEdUU24VuhZ
7uHCjtqVxLwtxjsslJi1iVRe0XNhtDvm8lqTZ5uJqwPcKd6ho8sRHZ/+k7mq
MhVJsoeyJ3pzvYF0pR0aur8qIG6rmZgz2Z/ZGWr+7ZZPB+8gyv75ScN66dxy
DmHq/ARyxpkITc8IVg/25+/65fS+ayoMi52I6mApwq5G0sM2mgfDy7CTOdrb
LpI45zrCS1iJoePd6VJNIeoKmSMTVVy8GkXs7EAC3zmwSWsmusqMbrk+kAem
FWie2oqx24PZuC6NAQ3T+e7qwIhp+aw4lcRvuySOhmZjPkh6w/kg7gzIp615
AK4WAXQcnMSIu3KOaqdTrdRK7Bsj82ZyFBlXsvm8NJW89r8Y52pk5m0d+wOT
cJBcXW+9tWCFibC6kCqdWyl21cqioFkJ5wb/73eZpmK7V4t363xGH3Rm7fJI
eqXmM+SvAKYU53L0fRnfSiM4d1opqmLzqV9ox6YRes45BjFE78vgNZW8NSTw
Trpq/9AUmgnpdyfj+HUxl6Y9crBb48vKTBNxen4cW2d4slG6b5IxnFfKeB5e
KyJxpg6du5bT63Q8Wp7OqkfuzFlqIo41qKDgvA8JQ8vofl+PUd4r0TIPlSqG
we4BjJ5cidm4AJ7s8+XN8VLaHw6l7zYP7jbJweOlSu5SMlPmqHH4FkvYKD8u
rnXAzSKfA0VfePqfH+O/qnBr/JnFAZ7saR3KfumeaQelN5cGMn56PCn6WFbV
SSFxjwZzuS8z9mZQzyKC7Nx0qi8xE+4johnVxlLYqI3UfezCgsbVxI4ALQFe
sax+aSo2ztdi6PgbW+dE9imSmNEknqHr05i55ivjS/wwFJuLv4ebit5m39E+
qSe+rw+lpIsPR1vWEsO85eu9+0qDltHoT2eS4+zOug5mwsM/l6VTVPiNLyPH
1lyUtU2i3bBcfk6JYbM6CeVhPclD9RxbkMa6Fwae2RaSue8X3f6Rr3s0hZqH
fLDUZ+C2O52rpioWbKspomvZMXmS5KA1Wub5S4+r8uHXL4XwlTscv8GH4t1V
XLqTQ4C850OHmAptXSOr2upxmWAqLLaoaXk5l3H9a4lxi2OJt0xnQkM9oceT
MdsdSnKtRIruJPD2XDbOKzMIvlTInoehhG7MpvbzfBaoVBx4ZiaSq2nxy4jj
2GmFaH4kl2MvpdvvLqTN9Tzcv2p41juXmU4J9LUP4G26hWiYWMoFX2/2btIz
9l0ss9/G8mGNlYjomUjCYQ2/51qKTnt11Lnszj3nSkatSiEk9SPr5Eylr0jH
sfoPJp5Jo2WB9Igaz/l7bgkRe9N4KTv0q7KCNhk6WnZLoXhDOZmVabTN9cJY
NwnDhSw8HocRtTuWA00UIq1DIlv3FTFmvZHFGWlc2FVDtK6TQ59TP8kYaCVc
Z4Ry6es33tVM4Yecizb93Zj0WY/HuFg6/+fGP9cVYuNmuWtOLgR55jOlYz5d
TgaTkpTHjZ96Zk33oYmhmljbs5zyQ8F8O5/Hi/ZxjFV7MMG3jL7RUdzcG0PK
v4Hk6zPpfCaLhi/CaNi1kJXRsZj+zmCkeR7Ls6MYcu5/n6/MYclYXyaMqiPO
vrYSdS87861mHru1Rn6PsSMtXSkW+ZRwZZQnxq0ljFmQjPVeNRdG5VDUMocu
UxMZ/dqPTtLfJqzyw65BJfUPxtFX7vX4jSair3sSdZ8mUbChCEVsLnHqr8xZ
XE6d1jEc6urOgQmZ/OWahO3FMDSV2cTeDkZRPRD85AxJVt/bxR7r3+XsFvGS
332wljmzrXkKV3q6cv+8kRZbszj425GBngV8K47A1fw7NX6ZijMHq/BK0TC0
iVKskL3fq50/l++kM9c9iAE7UrnezUj/t5mcnhmB5ada4vQwHesd/OniZC6W
vkjnWs9kdGHm4kpRCjs0Ttg1VYrZL5IIi3bniLqAuya+vPj9ldF7NTxPfsPR
i0l8apDBRacqwrTxzOwkX2NeLsu7hfLWowTXB0ko+gXwaq2psGovM6eBhhPP
6ohVNkpxok8yA5fqyLxcxI1EZ+bXNxJpIufg2icuHc2ihmc8DUq9ZeZk07ue
QqgbBvJSlY9S9b/vo2uY7ZjDvYRQdrn9wul8In9YBDO5uuyRtSncvGwhWtaP
ony9uaiVX8rvF2rOzFKI1S+zWRul4dQ5NVMcpHeO0dC8q47payXjJAcw6Z6R
rQd9+fuYhlHD0pg7IoywMdFUv1rGU2cDpv01ZL8oJGtWGh+sXRjaOYXO/8bS
08uHKVaVXJtkJv7e78vyNdZiZOtMjN+cUTUxESPn5jH7gidb95iJ18MsxdaW
TjyaV1006ltXGDu943qemTiXmsSFDd4YDqZxcKSBZY2CONIlhXNt02midUI7
OAZDeQAHl9hzpPArtwJ+MXKpI9P/LOBG3xLe2vkwbXwp391kx3WLY/E/WjZ0
iWZsbhA1Fxg4vTCUUVsD6XWghC0jEjH1UMETa5Es2fJazzQSZFan6cKkNyfS
bE85DS3jGXbbBXuCMZaYCEVsBKo1BexeZyLqV3jQZ71CHPWM5VKuJ1V9TUW+
9JzishR2bdCSVJzO1rcJLHMroO7tCJ598OC2zPjS54FUxseQMSIT1xbBODSS
u2om36dDCtMcNUy+m4tXmxKG1QildJKp8I2VvH3tFfXjZfftDUOFOw0LZX8b
skl1DCDNIoNVQyrpq3DkopyLI/2zudfNk7mjzMTxmmmUdfLCf4xS9JF71ea2
N4v6K0XHpjng5s2f5/LoMs1MKNr8YGeTPAbaa+lwzAdFtIlYficUjxx/Cjal
sfBzIcaHgew9WET3/8o58E8gCxwLyehqKsYP8aPlOB2rNpuJFY1dKGijpdM9
M/HuyncmDc+hRuNczlWp0XZWig3Tg9nQKgDPgnJK/cOY9jmZb+PyKRgSzPXb
kbwuS8DdPhFuubFIZy72a0PodMSfJfE24mdfAxmzJGcairgyp4TAgDi6rjLQ
f08yGWN+07m+idgpe9N8UBqNVGaiYVocNo8TKdhrIhrVT+HSlXgqnXLIahPK
sVl5vLmchPvzMDbt9Wdpp0Q+WKQyaU02PUJNhKrCE66HcjylkEXFGl6PiyNj
bCX/DgkjaXQ8JwsK8JL5e0yomOuaS1KedLS1+Zx/XIH7BAPXlZEcX55EbFEq
hbHO1Cr/H49lELdGw7JfeRxpVUAKHrwxqUAdksT0XfaMv1LCnclWYmpZAD12
KUVCagavBqioJfsta0YM3VP8+XzXSOyDeM6sDyDyVRZnLeOwOB9O1o8KpuXb
4XbejaCxcSQ2SsfXNIVhnyt5uD+NxjuCie2oEF6VEXgVfqNvrzz699Ay21nu
4JJiUhOS6VczAit5jXdqGpi6QYWTVymPb1WgaBhK/tIqDOnZnEuIItGrhtj7
PIn2r3/xpZWeWn7B1NX84B/XQlw6yZ6VXdPwmJ5/GxcSqvZCM6OAGfPy2dw/
nI3tleLgZTf5/mVvxOWQVJLCiRc/GLDXVDjLvhd97Ei5W8D5xAKSF3gy8nY6
/jKHq9cLw/6EzNaGaRwf4c+0WkXsupDJ41nhREbpyVqZwr3Kb8xrk0NsNwM7
y7wZmif5drOFcHgknVe+l2cDleKFXk1ZfRvReqZCxI32ZU+HPLx6ZFC1IYxf
+ji5EtLXxiTQtplS/L1AIWLOOuEiGcZYXUf8OT9KOhfxcW4+w2UPvd9kKqaO
KpX8r0a80TN8aRpROb70sa6kzwodLYyJDPZVivd1Knm0X3pQoIn4+3wCz3tG
saVuLmN8c5hc5EnDi1rcl8WS9kc4nd8m0yfGmwHbI3FMLqJBSTSzGjrj45XB
i7YpKH78pHezFDpeyZA98YWuTnGMH55Fm52O1BYpGOU5VBviztFJZdScXUbv
v1Qkt1SI9Po6qrX/htsm+X4WxVCncQpWb7MZ2DwIkzAfuohqoqlTEs+fqBg1
vJrQWumoup+Mt7IMt44GZveLou4ta1F+K4tl191ITTYXQ101OD76SktdIfHX
PPD7EkfEOQuxcmUFse1zqNMrhQGrUjly25Va9yN5OLiA4xPDCM4poGx5Pn6H
pBvYF7LgbTShkgHWtlSKM/8ohbKxDxarKuh6wkwUubpi06iamPBBIXbMDOf9
FDOheZrBhLdhXHfPZUlEPl/mhDCzXMOqmZJ5v79kf70chp9OZlsPN+KumIvz
ZyWDersz+ms1seRYvuS4KPL+MuIgGST9pxeD9+bi/caL/2xDOfBTxdV1XrRt
HCbfXyojjn4kOULer1n5HNpSwMvGatrY5rP8f59fspFu8m88DueC8bwazrpW
FqLnnxkMXxnC2yZJrG9exMzdaqy6FVBPslFjMzVjBqTyYbaJGPc+mc6RtcSZ
fyVD71TxtYZC/PVT8vA9B6yPWIvqlwKwr5NIgwnyukdqOW8dimNv6TvDZe40
jeRSLz0mAYlcX/GIs0Ua6evZ2Cx4zb7qibz2zqO94js9VsZza04CZdtd+FAW
QcGTREp2RHKwiZ6yd2FM7qPmUBtrYZ4iO9QrhI1t5EyO0PDd6hM/PpqKIw/M
xGXrJOY2sBSerkpxUh2B77tcDNKHW2b+RJ2RSfeMdBr/tONaD1Mxt8CF1tcT
ubXdSjR0qiRzfiqGJgYsG5iJI9vlvd6hEArJfLNa65jqXM5H0xj2Tothe14Y
FptU7K8rObOxQhRvKuPsrY+4PJF8ba2Q91QtZ1BH5ZpcOg71Y4Lsk47x0st3
epPnYy6ubonBpFEw72bnE7HeVPT19Kf2EiM2A7PIeR/IyRU1hLGfgWsrwpk7
10Tkm1cRXx5BjxsFvJtXyJbjXzgsd1R/RSFie4bhoMsh7p9ivKaHMX+SQlwo
zGaKifyaCyUfSvY+/ltN63NGXu6yEJPknBcXlJCvLmPH6UAexpXSs04e1k2D
OPgwiYr9psJN8me3IRnkBGfQKyqI818LmXkthlGGCPbu0GEep6H3tyiWRkt+
9M/kTUAgHW5VF5XvFSL0WhSxBqWIe5GIVUUASVelp6pyKG2hYc8yI9NbWAuV
NpdBv2uLC5WZDHrpwj2jqUhJ0PKXvY7JvSuky0TQJ02LxfwsLOtrmPDGlz+L
tYz8FcYqeQaDSv253j6PeyVRzK5dROTCcvrY2uHfVynC9uWxoqWGdwk6Lv2R
gWWeE053lOJCqwr+WRtDmySFcAyJRtk1AY8/TMTSTiFoqyIwtTYTo/p68seC
QBZOsxQfFJHkV4QwRXprDbNs9vyTgn6QUqw8Fc3u1gH4uxoQlkaeVHfFbFc6
dWubirOPkqmqW8rkzXGsv+PAfEM5OdKVbngnc/KWpbj0JI80RxX+njrslQUY
pscRe0zO7K0MnCb447jVVGzvUYq3JoAtPzJo7J73/5+Xnd65nAbrE5nwOpo/
0hUi40ca/laJbKlSiNrhyVSLT2LqjyoWJqdxtjyGEZJ7e2cm0DjUgX0XC4ka
pGFRcxX9PCzFp28l/FgUSPyFUjQ1nPi4/SuOnUxF8qBU2k+MwvZtGX/VlJ14
wwtbZSULTyrFnUhvfmVX4jhEz+7ePny8V85Mn3BqddCQt0EpLkpXmj04hIcO
WTTLz+Z4Kz86/oygei01R9PU7F9SxV+yz+4O8JNcaClG+KTyeVIoNcylc/1O
5MusEKq/MBWh66UDHQig74sKWjQvYUi0P42CzUVdv1Qe9w6g7QDZgyNKOfbP
NwofZKNaYWDYvWBW3YiVzpPFu9OR9HaXftGvushIdOX14nQqjytEwwl+rPUu
wmGpQpzqqeHFZy2L7Q08Mvci8l4ZryxNREJzT/bOKmDvEi2DvnpwfpCOENdy
2uREczLYSOEoecbPf1J2w8iCTuFobv6kx/1UjJMMvLb+yIGIYr6MjmJbbAA7
MvKpal7I+d2edCrMQP8yn4FHPPFPi6Hj6iT2nAhgY7SlSI1JZ+Bne97MNhM/
cyJIve3I7OZKsdA9n141wzm0r0yyfwgbbobRLE9Ppiqe43Yqdg43UrtrJONi
YtA3MxMbPzuxcFE4H18XU3d5nmSKDLrVkTO/MIsbNd0YdKOKyTUL8axjz4y4
IspcsnjZP5CMW1UcSMhBDHZjfIKZGPs0jwAbHx7Ke9tFZHLpkC+3rtmI4ZJz
nNf6sbuOkR6fqojqZM/yH4lcLn7LBe+32DWvYO5wuZvzI3hlX00EvjTS8C8H
rgcWMV8614nRgdR9YiF6dSng3uJUbpbLzmym4812f9reD0VxXYMqwpWNx4zE
vcvg96sovi5WiMFpRfTaHM3q4FxWmqbRZ38YY8tiWfIwnsvTvPlyU0vf337c
fpRO8qAy/ukdwwxNBddfKMS4UjtWpjiztI+O01cV4rTM3oRJWTStSmd4WBiL
8itZFxvJ4jMyI3aXUetMBO7usUT1riXYr6XesqT/f159lzAdX/3ySLipoeBn
ESrTYJ71kl62OQuHcd7cDqpk8AQTsbhZNpmdTMSj8eVkbo3nbbb0z4WRGL8m
Un9ZovSBWNraZWI/pYw+bayEcpU3DSQX3OhUXcy7lsxTxwIU06R3JIViOULF
LZ0zRxPcWTimmFf/hDFgchp9awYx+Ek6Dc6EclYZj1V9ycjjImkflsrgB0XM
k6x1wzsX67/NRPoQf9bb6Ch6nU+qayJup8yE01Etyj7h9B2eR/03EVTL/k39
6DzWZWcxr5ETqx5rOdzTQmyKciXdxVQMmqsQlxMDsVtWRuSRZBo9SCQ1rJhP
m7QMeeHBsq2J/PfEgPKJFwMeSSf7nc3jXQ6MfmwuTH7lslC6Yu6jcqyHSBeb
Hog2IIedGjUtQoKJu1/ArZ6e9B4UR+m9Av6xjcDiTgL6imyqn4jigGSMgZnB
aCbEc8XSndXWOQwamIv/jCQem2Yzv9X/nk0WiOM5U3F5WyrnZR/tCS5n8YJ8
jkperRBphDhpuROmoaedkRbZxZQM8CHjQxVrzQroI8+zxNxMLJFs/K6rP7Ne
FnPvcgheX95SzSIP1hXx08eLj14yW/9Sc+nqDxiiFP/+SOUPp3DJhkoxTGRR
r3YcYbWM0lk1NHoXzkDpQ7evZxBSL4XOlyzFfOcIeR4q6suMuX/iNyeneGLb
xkzceFHEtRfxKGam0LynQuTuD8f2uaWY+zWGAud0dk5IpH2uiej4wh2TMl+M
U1WMlF47JNNUvJmQgnePMJSNlOLXUIWo/tOFw020rFwXSP3efiw/YyquHAjh
8PZw6g8soPuEGOLNgxjRJp213Q2s2JtK3BkTsc0mioUTCqlKtxBhkrlLiiI5
YxvO9zmJzOQ7ng+thJVFNIfknCvkDNz9Lv3keDybNufg2jiLhT2c+H0ihSZ5
OYw8EYpNVhxjwwtpIXtTXVLEpeBMxnUOpqu/mYh8n0VLu2BGS59yOZNGwIs4
HHcmYpamoeZRNRVNS7i2PBj1m0DCigysivNiTRdv6il1XF0ehzozhogHpqLT
9RQOF8dT53+/29c+k8nhwRQu0GK5KZ1xw31xHF3AgEmRPCKQiWPTGdvTFX3e
RZo2/MmLJ3fIqnuKbdUyCLSJ4YHLT7JnFWN+zZl+Khe69i5jonMie3z9WVym
Zf3NeM7NSWK5bSUHa5qL/jkeNI7PpsA0lZJbATT6WUxbYwz2uY5kvyxF/JnP
jbzfmMt+66AqxHtSOOvXxtI0KpOKxkGot2Zx7HE+q7fY8eVkIb/nhdI9zpN9
K8q57VDATEdfFnzI5qp7Nt/vaThzN5Pg1cls/RSIW0oBzvpo+n35xj8njXxZ
o6NC5soCyXG2d03EiSPehHmZicN+Sbx3+k2rbzLbvxTQ4rQvx7IjCJFnMKld
PJbtzUXI0eqi/1G5s1tMRFKXCi69/cGiAj2tncqwy/TCYrWJWONZydmRGrym
mon/ZO7N/ZzMmUfZHLyZRF3DT7JGZ5M0J56PW7/QNC6NIFU6ofs15EwvIWdR
IQGZcl4naqnMq+DTDDWqwHwsB2VyotCPD+QRtC6Xsi1hbDqciPqjjrPjozGY
xLF4diwB9x3onpTM57wohk1yQt+wiie/06iTI//uegGjVyUy6E/ZX8+zmNhB
Zm1sOLNflxHjrOL702CeBpsJa6s8rk/PIiwym8l6LactgrkQbCOO/R9HZxnd
ZNa20aSp0uLu7s7gDPvg7jC4u7v74O7O4O5SSqm7e+qeatqm7t7vvN8PftDV
tZrnPue+rr0XJfFMp4VtJK33ZcMlLeJBAD+664l9a9JpWuSGiW88tRJ1zBke
zeBW8bzrH0+WqQvfxynEjxWR9OnqjDKkjPdR8Typa8ch6QWJV+IYrbYhe5KB
uPsrg+8NI9jVy0yESY45tNWLZf0NxI2lRqKV1pdp/5awsVz69VwNH+enMnle
EitaetD2o5544ZiHcu57/llcRnp6DuHrv2MdrCeK3mpIaenCgOX6InRtKUtN
A2lfx1jUfhLLXPsfdMhUinTtL/7tLn15fglT7viSsU/N9E/lbNiuYeHtAEZ8
zcbBNJLsNcFE9S4kbmEoY+Tf7aLMRI7Oii7zg/iw1Uy8Wx9HiXkKi6TfLekW
R0ITHSlaHfc9NEQmB7C8NJMtLQv5OUrmTEQBY6dWYxLtwdXe5fRR6osxm6NZ
9jadsWEGIuuGF8O7RlKzu4o/b7xp7xJJz9f5dI4Ooc66Em5SwIWlX/gmefPy
Mx09FoSyXJUu+S2ezaUaJp3xos1ycxb4hXG9gyPdWqoJ6RzFN00k7geCiNnv
z1+vSjlWUUSzCB/mBGXxrKtCxOjHkv+ujMWXCrBURXHEUClUHyu5tMCJjL4q
4WERzTQ3H2z6pLOieSqd9rlxZrmWcRPzeD3Ahw5bC6lcVsbgoWH8uKcvWg6t
BOm2iSv0xJt+pSRt+o1DHw1P9au4uDGckuI8bOV8+mOJ2ZACem3KwrLUFhvp
CIWX0zGLD2HfLSOhy4wlumkQF1KriRyUzYERajqcMhL1J6az/2MaTU0jCJ/h
yftGFazqpifMO2TwqYEa38pYGvZM4+1ULVN2B3DxezDtGiQxdbSeCHAKJzDB
h+FZhmJopxAW9U4heLtC5Esf3hv6lUmTMmnRqoz9TTx5YaEn+gal8btrDH77
yzCoW4l9aw9M1LXEQPkMNycFcemTFud5wVy+7E7H+CyCCsox0ffFTh3L1osp
5HUJxOujFoXkQ9dB4Zwt0Rcd5Nk32utH8FoDESbP9MhQP3KOVbLwYwCtKlN5
lJDH7/6+LG8Rj8EqQ7FjqCUqS0dCg9NZmJfMbv0ITl0uJiEnndcf7dn9MB1V
5wQy68nnHB+Bx7hYis+5YFZbX/jqqzHLDqXL/vriglsu3d0CWYaesJ6qEnmB
qVyT99/8cBY71iTywdxMuF0Ips1SK4yiDEXDC1Gc97FijZ6+sAxKYJM2hGWz
jER0l0wS7oTy6Kye2LFaIfTPxtDslIvMpCJuWThTPigXzS5fDgeFkPW8thjn
nkTBzBpKpCOs0uazbn8KK3tl87ZNDtMvxbL/vpz/gxTmJ7gTWs9MdHwYTWW+
M1fsivl0IBYXVwd23pA9bhHOtl8+xH9OpeicNy8/fWNd7WoSFqayxcOBkkwz
0X5qKck/cliyWSGaKSPRzI1lkae+GD40nmN9/bnWphRXt3iWrgxg6cRkFt3N
xXP7L1buyuVus3iWl/sjbmqYaWXLoyG/2GxUwCPtLTYb3ONkVRnDgzLJ//ie
X68MhL+5H8sHfCcvrYDHD1IJX2ZFI8sq7ExysJTeenZiGee2x7PMOI2l1xUi
d3kqE0IlR0qmfpSXwSQfG1b3rMYisYAzJ9xIOqoQzp4hXBjlRPnsEoK98/mR
lUe//kphG6oQReHeWP6TR7KFPwH7XWlqmMHb4eUcPODDlfoKsfhuAn4No5l6
rZj0LaHUaRNC/UD5Pb2jSBpsx44x+URJl9lgFcQo6zIWLAhCu8iC+j/jWHAy
kZ5NbDndOZXRpemYnvfkduNs7CVHL7qQw7k1+XS4WEb8pDRcwlTCuOx/7/ut
IflhBnYxRTjwk2s3DMQHK2NRFOpBU7d8ZiakcfBNDCVvC6ij9SY92o4RhTJr
Vhby5ZItrcqSCH5VhNmzdBIymoiX3ZM4fjQCl8vlmPeRXrZB3rfahdx8l8mz
HjZ0s1KJKwM8mLXFkUzzKjqNyKPzgjAML1WicTMQrf714s9zldAeSmLTLFvS
r5iJvgVRfJmbwMdiQ7G8ZywLAgM5PKqS1W/9yXpizli1Qhj3jmOGvg29fBuL
d0+z6VLjxJ02hsLWL5gZ/7iQNM1QbHsRxuEnVjjEldIyLJVdL1J5MULHfsk0
cxvE4VyqJ3aPLUX9p4wbqzIZ8VQphs0KImlYEYseJlC4wZJhvwu5MMAbq3XS
o00r8JuXQkllNCuSTcT5EJVw1VrRKrNcdrSxiGrqjMewuuL+nyj6DHflztMM
VnyLQeHlQ4B7OInbQ7lzVM3qGXmotxWjtg1i4tJkcs9IhjgcRr+0BK4uimWq
h5pFjY3EiI0Z9DhhT0GhsajsoxTeM/1xa1TExtXlHD0SxfewCvq45PLshS9v
ZP7Ma+6N3fh40r5UctTEg6CTYcyanE/tOTILV7jRzEEpclUZqIN82L2hgn8z
q/ly2omV030Z2qWCrc4xxHVPRj8rgZBJscSOTOaOg0rsPphIn1KF0NtrJH7I
XPqf60R1SCF5vz2+kheE0PLG2g2XOuV0PVPAqHNB/FVSwX/leWxdpmb49AR0
SdLt8hMYNEzLkK9qViyLIWG9zLDZFlT+Hc7GC/F82hzAqqRYQlwCGetbyP0e
/qgNk9m621Q4jPeg8c5C1owrlh1hzawvFYR+S+XJiGQe1ShFyT4dfeZk8Xtf
CXkdjUXe1ChcvumL/LoJvJWvcYNvMTur06l9Xc3afoZiap8K+i1JZMAHeUaB
oUyQ81wmnTXjWQbXnloyK0ApimOU4tljGzqvlryUm0GYTo2L7GKvWbkYX3tP
c4s8DC6F0+BhCMb7i5nwJRLTi14o/UzE33eyuJ1hj6WhmWjVsppnu/2J2G4m
RuxJJuxlMGWj9UXNUg0c1DBV8pdrjQsLGwRQUlcpWg2OYeeQKFo1yefi11jy
LoVwKzuVwKgUHJqHMdu8nMBThbT4GUuj+kox0zaX43fCuRZsIFLyVWJqf1dM
L4dTbSn3Yqw/C+/mU3Q5hZ7lbvh7K8RETQ2jbzrTuE0BOd1zeagKpWN7eQZH
Cnkne26CWTRjzVNpc9MP61qlrDPN5Xa0D/xdR6hn5VDSJYDshiV4FyhEHeNI
YoPri9EW6XwLD2H3ViNx28GJ1i0jyFlUxMU+XqxpFk2DYZk4m2h5ejKEVTEK
EaVXW7THlYWbDERpRiLtxwXQsLSSX93CuaCwpeG4eHlmas4ecMTHsJLABhqe
JXpRrCzgj5eWZR6epEzI565XJGseOLDxehG7u3vTYaAfdklmoolvJjtuO1Dh
lI6YmcLMDtIRPuuJobd1ZBp6EjBCISKilOJl3UwM5seQHBvK5HGyZ89mM2VD
ErEGiYxbrBT1x4YzvtITC+8iZjo7cOJLFANHZjG1WTmq7VFYzq6gjlkOFfyh
dUUdcdFMQ1m6HWeGVqG/KZrV/8Xw7xFDUXdAOM0vJfJ2YxVtB6WyerQbLxqo
hPUODQ4DrbA7qxDLJLOlbg9g9TBTETM2mMFvnKjbrpS12dlEznvLUcMSDr5O
wKNrJmVXqtl2MonQu5588q7m5Bvpoz/iaPezigcyT4ZstaX8Zi1x66Gac/K+
zU+oI0yrJSe7+2KeoxT1lnowaPsXlJamIuRZGoubhnHppeSZl0ko5jrRRfZO
xeEcvp2SbPA2R55ZMjeirHgsOfxih2ryp0RS0r6OOLYmDte51nIHlEK3Ipxf
zx05Xs9E1GlaTG95B7wmZrJ8dSpZQ3yZpUin+fgo+k624PSWYsZnSzbqo2bq
v/mUvA9j5bIgvt9QiO1mMRyZHYX+dgMxd2gRoS38ebKhiITBRfRpa8dWXwNx
dlMFnmecSJC8Fl5LKVoct8P/lJ4wGpROzvMAtsQZCO/1gSTpa7C3q2JFWCJP
2yZSPquB0LSR7LI2ng77zUTwgVLuyN7U7pfcW56OURsbDl6I4OHRPMobunP8
Ryyf7qVQINwJ3lmM0AtnXVcHVssdijbOpU0vX762ycWmbwUbQ3x5qk3kRmIJ
ur2+dDieQdHDVGb9E0DToQHUswwnZKQf0RYa7nd1ZMZFG76fNhb5jbKx7WnP
rrP6opbscls+0WirsVBEuDF+rBepV+sKj9uZnGuawOXQCuruiUBzNona8fmk
7wtip7E/Tf8rZu4vQ3H9mSML91fh3sFQ2ByI4G5YGof/kx77x5ummRnsuh5J
xpwknjfKYeW9SMame/Nqh7E4bedEzd4CJrY1ESaOGWikz6wbUsy3ZYZi4eM0
ipbkkfAmla8+Gtp8rWLyZS9aP42h45kSvmzL4b/JDrTpXks0sc4lp0kiDo2q
OWUfy/m6kQReq6b19QLSBvvQekYNDcySaJLyh+DjmfzO05EeZ8mofQH0KSnl
s0EYtZqU8v15KOcc/tBXnmNlixp24kOxnM/YHRl8rW9Dm3U1zH6fT7PPScx9
U4n1wkIShttTNKKSJW+t2dMwgPqz0jjfO5G6EYk8T9UXXffkcqo8irfvTUXF
OJl1RtKJuihFv7VGYt3GADa6x7PzRCo2DdXcGaASM9dE0NxQfu13AUePmooT
IWpqPQnliIim3jYXTlclE93EmchVYYz6UMFZyyzJ93k8x0C0r8yXd04N1W4s
d66gy9Jgajl58+xACts0kvOGZ/JSE8J5a1cmvo7lhZWaoJ+R/BqtENUpFazo
48036dT690rx2KBhTIi8n7Ur2D8sjV2yv0w66Ygy8Uf3VCWmjC9ifczv//83
jZlWBqJXkD+bpM+F9y3lgMaKTmF64nxkBAGBUQT/l8PhbhlEWUUyJbUQ68ex
+PR2Zpfs3Y5PrDGeZcOOexXk1yqn/TZvwiwMRXWgZGu1Ny1EBVu849EtV1Pj
pidCIrWUHrHhWvtqpjyOZlupFX515S7MiGTnDkuWutRgYhzHsfvOWCkVIrpR
IpFpKRRJjqi5pBQZyjim91GJRZ2SOOnsT9W9Mpr1jORrrh+HkzNpdsmfU+Hm
vNOaiaTUKvbNdqFFg2xqn0jggbE3NxrkoJ5YRMwXe36uyuXa3XQKPmYy7aWe
ONMxj1JNMPPq/e9zJAzFumu+NHpQIvlLJcqPRTA9t4JJM7Pp2TuWQ8nRxMX6
8SXEDtXWfPSG5GHyKpGD43TsqU6h361oguVc/8xIx7B3Er2vmIi1kl0mTovk
QCMjMdo/lxeTI2nuVsySp+mUzbcnfIJCuAYn8bKdFVNnVTG6Uxo3t3rxfmwC
Dffm07zBH27K5/ghXSyh2oID1tlk1FWIy+t8WR0q83B1HG1dv2Is2etFYCEx
Blb0d0zHp6eOMfmJ7LLJZJaIYEF6GD0TtBxoGoD/iz/0OZlMtlcp0UNsWZdY
iEFzpfA458fIAcVYfoqmfIA/ecnVTP6czsu+MZS+lbuwuoSyTYG4+xTR92sK
MfM9ON5SR13rBJa+DeJ9WBGNzcrYfNYFv+3l7GwRip2/vEu9dGT1z6R7YTwP
/y2jT3QcHjLPe07PYrFzLE1CI6i4UUW2zPJaGREstdITdUcl07i/hkbt9MSC
BWV0fhVNh72pJBZo6d87lUkzDMX2CWFs+ccBp5WG4pNasn9eFK/9ylg8P49n
C2xpbKBl4b85OL3042efagykQ2WVBDH+hrHIGRdC34vBZLuVc3OqPJ/vTlyw
K6TqcDQXu9lQklFBQLGaAU9DyMtTCqOTEfS9HYmx2liM25pE+5vBPJO52uFZ
BOrj7hRs1tHwrJYTDuHUXMtlYkg+3eSf3x2LeRyYhv04H8w3GovBXmn0VDmT
aWsokuUzDpS7aTpcIYycglncIohuA41EbWUsNoHeDKioK/45n0G2tzNHrpRj
4F2MXh0X/twr57V+KnpnPYg+WkqVJghfSytGOxcxf3U64Q0dcM1O5sIGLbED
I/gkudKyVwBvdzqx6VA98X1uBOf+9zucp1Lx/J7ElCxnTkyqpGpsCA8vhdHR
w0SMHK/mXRMvrpmZiCsX8ljQ8jnRlw2FkbHsrUVuDO9lJFQtw9FrGMr0UQbi
QXdjETvcjYHqMsZlhTAnwYeWK4uwsQ3HclYS+R2reWlrLBYvDqTlnFLO11OK
v7Z6c+paGi8y0jlZz4vqI5LnW8ZhaRXI4qGSg4I1GDazJVcRQ8CZEMQuDz4u
MhOXtPmYPgviyebmori8EsN+WiwCVCKqZwjz7T2pfVNm0oEYct95Ebsnm9cN
Mri3U8P6fUlMvBbLklnJ7LiiL+4sLGX6xWgKh+fhZlaA839K0eNZCeHpSVj+
m0a0ZLeceyEc6p1BoIeeaCi5eOUTT2zzUmi6LJVvu+L59SsZm2Ep6A3V8d9R
mZdvjUVmbCA7vypFgmsmHV2jGHzXRPwVHYHZcG+OfTEU8+MNxKrqQGrmSPeZ
kMTjMWreRElXC8qgXtt4fLqlsXVFPEYLQnB5kk7b5aVEfXHDolEUX5/68a06
AJvvmUSc8qPTEgemZhqIoGf6Ine1F1sKanj0oZIpZe4oZe4+8Pfj74vWNOwi
eXhyBOFtgygPz2TbP2oeLvvO17hs5lSG07KnLcnqchoElfNBFcxOybw/ninF
z7dyPgdMxDtjpaiUHjemUxxvxxUw/4QjLbcU8fK0C6ENXRiUVUv4fjQSyyO9
yK/M4vLVMCq7/GKKaRwpwUGc8pQMKXP8e+dk5tSJxOlHNusGJLDcLI8ctwxm
/Qri3o0U+i8KY8GMaJ7V09Hhtw4Lubu/1PEohubBeZmDi81p37O2OHyvhrhH
DjRsYyBu/Cni5HF7XM5peCJd2/qkG8b39ITn0BKsO/yhw31jEfBYy5Px/nSe
mk+jXen0+pJA53dx+AYlY7c+nOyZGtw1kTzTvKappoiczVlMf2VL2/kKYfNV
uqWbMzf3l3CrIpsl//5h+vpqhEMA3u09uaiW3HKhgMKn0puu1BK9dmSiemnH
DjOVONWhiA6jfJh02FC4rc+g27FYomXvjb8fyQfJscEOtsy6lkSHYjs+5Kez
fm0mg28k4xdcTtRjhVgRHIzDBclYbwqp5VFGw8MqoXc3muU3PfmxrprE3xrq
FPzA9Fw1x3ZWEWPnyINuZfztYiheebhS52soFlHSQ3wDyZa+nrHfg6Nzfajb
sobKzc6ctXHHXXr/pFnhBGZ6YLA9i5KlRuLDGT90h5JoLHN1x88gUm8XMfRF
FCfnBbGjYxGfgzQc9ZLdOlwpXjeu5P5nue9micSeS5PzjsFY3o29I1MYGx/O
o/1KUXMgnjEmnuxP1xdhqmh+uv1ghJ+eWCh7aG0bB45cLCJglkIsvfaDM/0y
eZCcxZm4Pwz/qmPy5iJUPWIIOqZD9b/PYZH52DJcTzTvridG9LFmk8yARJFO
rcYOlNpn86SgkmltzIlZUoIy0FDkTndi+dk8Kk+WsizAjs2u6RQ9i0Jt+xXT
adm0ioznyvjfJGaXs0Gr5WCBOxiF0FyvmPLRQcx6lkDLphVM6CzvcqdYAvNL
OKrREBqQx2k5894+0ZRITnM8rhLNZ3qz4O9klkSaitxXbgweZiDebyyiX1kw
QecUwsNZzd46AbgMjKSwTjY3iiyZOTCRDMlrK7Z5cG66UmT1DGBe6yCuLtbx
ekEKK738cI41EQcGqkTMED+Wf2kgzL8ZiDaFdtSyNBJtT8tcyPzN32nZnA9J
knnxB4PUam7c1nJ4oZpxco9/90yhfp8wZnuncvzfbPatVjPiczXjZB4uL/Cn
g3siG1Kj2V2/gpjdRdy7l8Dca558m6kUN0qkj1gEsPK1kQgRcXzo7MM8yeP/
HNEw/UEcbfrnY2ETQKsyN8wGR/LNO49u721o+jOeOQeTuOsdw6oF5VR/SqZ6
pD9tWhWzfWEejRv48ShfKW5Oy+TFHg1R3fI4v0RLv0vOzJ9nJAxPBOBpHsjL
JUZCM7yEIZoUbJfmcdQ5nGmdfPm3TTUPCryZ8MiHrGNKUcs9W97VUFLcS6ho
UM2Cu27yPpZg9TGWoY4eiN5mov/GSvIuyXlKHjrYKIKQYWHErQnHZ7lk1hpH
Qk4Ec/VPNpt84qj/s5w7uSnoXn7HocJQVO1MwuWWGq8HRmJFnp54ssyD+FxT
MexqJJs+OXLqSzkntSlkuf7h14cMWg/OocEjK0YlReIwv5y8LlncsdEXS78o
xfqLeVx1zSLdKIb5Noms8yzm1fksjkqmKd2eR/0V5TyZ7k77Mxp+fM+mzrMQ
+qwvY1GEJ+mjXPltaixWdjEQV35HENqktui/MxX7K3H8XFjJ38lJ7IsI578c
NQ2THPmvXSCXPxWy7kEYw4NkNreTObAjkdr7Y9kaXs721lVUFlpwJ0uDyyLJ
Gwu1LL4XxenPGtStNGzen0n/YyVcuhzJito1DJkRSO8XgXycKe/kxlSMzwZg
eV2H0cpqdEUxjJIzfXJKx6W9kZxbk0ffv/VFm9dpzH5ZSzTQL+Lu5BCa/qMS
pppcNvha0n1DLbEpR3be/jACPhiKvvMMxftYb+bZ6In0GVGY2FlwV2Migv8u
x7N1BJFv9IRWF83D7onc7RrPHl0Qo2QXLrVOZfG7DNblenFsoezzbVrGtIxk
Upt41h33pbm7miaSy+vuySE20Q3z69E4SacwT/fh9Lw0tl0so8upWK53MBF3
AlVi5XUfogKMxdLH6UzsF84LOwOxeXkgCetcCViVxdiDeTT4/ou/B+sJp8h8
6hX5M9emlNXDUzid7Ij/2RQaKdWkvHNmA2XEPi1m0vVEGvTU0EwtHTMzmM/D
A3nnr+aKIojdB/wImSX31d8VjzDpbZs0JHXzRe9EAVkZZWxp6M2WJnXEAtlB
u+1iSdhTT/ZaJm+GB2MUXcm+7HReL83gxHqF2Fgng5yr7hh817FmYgbPOvhR
v2khG9cUkFDoyewG0bzpUsijG1G06ZSI3SobTMP9aCPn6Z8TgnORHVPn6wm9
UyF4zrfkv4FaEq2iGdfHnYx1+sLTugTLot+c1ypF7cGlNG/jTGlNKd2iS6nj
ko1DYwNhOiKfMK8AHsosie9RxeNrtvR5aSju2Oax5UoYT7sXoQxKYlcTBx50
kJ7ul8rboW4MWGAqfJIzWNQ6QHZwMWOHyRzfGor2hUps/eFLzu5AHnWTe/zL
mzfPnVgkiriSEkKoXxSG36tRHyjkdWd57k0V4t6wAopS7XnYxlCsOqYnzP3C
GTY3kRbyTE9uDMOCTEJN7BlrVYJYksr3AR60fpxI7yFNRPOVBdQZ68z2aXpi
ZH85f9MSei8M5c0YTyaVSWZrmcfvJMktt4OxppiKJC2TpyYwpjifAY6FbF3j
xV99UnEfmUdutTN1/1GIdz6JLFP6UvHISAwtiOCuXSQJ5WUMmhfAMOn2a3pE
Me6MfM1frVg2qIY+bWWm56s5NlwlPpSl8rBfLuULM2kp+/HAOsk/rWuJtIRI
Xl504vb9bBavzaVmhTedJXMfGFRA5FFvUq5WkHy0ANUMH+aHGIu/e8Yzdk4g
jQ4US+fx5/pGc8aax7DRqJARvl7cfVbOO880TiT6kjyrmrAW+fyy/UQ9rzym
WRmKiEhbPln5svt9MXfD3bEaJ70yJZOHM3w576gUtuEFhM61ovB9Fa9j5RnM
dmRI3zQ+Ldcwu5cfw/el89/r3/w3OJGOTWK48PMPA2f7Mb15EQtcven15gvN
RTZfuznT29eb5YuypcdJl/1sz70ApcySMtYXe9H6tJHIDleKJXNdaONdwf6u
JXzIDaHHDpUY2z0Ci4Y+VO8xFC/7qen1IZKRf1VjtUzL1Vvh9E1PpuJ3IjMD
HTCS/vDhVTLRfZM5FF7K5EdanrXwJNY5E4u3Wpo5e9NtmaGo5RFG67Xe7Iot
4vehbBpdcSW0pQ831hiID3UTGByWjV+JJ9bNfBnWPY+G9X1JMorEItVMWHuG
seJpCoOn1hG3PeIw6BbIrAvltBNaGOXHOMtEVKGGYu74OPQiFEKTUsjERRF0
DYigX3wi3eeG0OBVEfUWZzG+JoAmKpWo6OmENlaD3ghDYW4lPXSwF+6K2qLh
MYXYNla6/D5jYbM0hU19faj/pooO/eVuHgikY2JtcWp8Hn8+uJKyJpMjTmFM
kdlyZGkWjYPDWFv6Bo1rEa8jCxme9pNxxnncqxON6OnB+/pFHM/RkFz6kRuF
NfRYn8q53HRaj6kj/oxOof0Td+rvy6dvdjYJ68P4dLsY7VGFMLsYQn+5911d
qiisreFez0hany9nTVUy3/vF03ClGuMlkhea6QhL9aSeZQSNBivFgbzGYmyn
cHJQCpVkgFbNIym4UEH8thImnHHl0IzaQhVqJAbHhzHwokLsy8rhWfdUWl+p
4O7+RM6/NKeZiGG/gQeew74xa2YCiW8S0LfX8NcOhTipl8YimdPWq8J5MDGM
HVP8mFgnikan/fG6Ys2JnFgWfE2ntyqOAwdzUGzKYLVlOINnKMRXyyw+Ponj
U29TUb6lghGNg/jxPI1mi6UP+KdiPjiZ/D/5zJgcxi67UhYPMhKzTyfxemQ1
R2Yl8jNUTfbWumLGHwvmffqFuZ+ZsPmcyg5nXzJnmYmNzTPJH5eE7zKFOHMn
Bpe57miCMzDJKGZ+lSUW3XNo90xLeYcA0tumkCDdMCzqDzNeK8WLhlW8ueVA
7utSVs0r4tt1d7bZFjOuWRHeCnfKvkeQHRvCsA9uOA42EpXTFWLm7lB2BOiL
5dcr6NzPF29PpfCsrSfyf/oyq3YxC9IDOdfBljvPVCKwRwYtlofy9kgmC0mn
1Th7avYqxN0dKbSb5Y7HkFxKrfzoP9EHq0lJvG+awaW+4ezzzEcRoaVHfQ3H
uiVStkRmxhdXWnZLwNEtlOhRjjQ7F8ugl6lM7hTK6w8KMfdaDt+S/Tjb00AY
jathZJADn0+ZiCPLtSjPu9HidgkPH2bw21nyTKcqPjpH0UxRwqGiIl4Ua3m5
MRLrkGouJGahdzuM13Y1nLoRh8MeybJDC7k3Vikuj3PE+XgV5QMzcMm2wZbG
okDhwWcrS/olpzJiRBHPA6THHklkxO4U5p6zZU2RStyoKeCHhRU5TUr5Kbmq
bO0rPG8biQ0hpbi2dOXANENR/4pS2NyIZZ2vQvyZmcVkpTXtEgzF7n2J9Oji
wczZxuLwiSyuPwrm2erawj5QOv8dZ2q9raZbRCwnr6spnR5N2QAd73u5s/N4
KbW09ogWLvQvzWLjBQ00Sidc+tExmwKe5rtzrpWeKI/OIzDZiRKdnjC+oaUq
ypyBdxRi1+Jc/p4Sj26S3KmiKvZfiaDpy3yGr9Wh39QHi6W5zJ2ZybGHjhh/
VAj9Y15s2mGO63eFMF1bV2Drz+BpZfwZ30gEv07lvOzupuogPpR58aiFoWjX
MImj9YPY3sZMnN+aycbiGPIHVfD4VRl9CgOZq5Gv+UYGaVlB3F+Qh/fPSEyH
mHOrdiyKRrnEz/TnZXg4q+5GMfNOPC9ra9n0JYZpsQH8Xa4QXRaaCfOPTpxb
ncP6FSGc+mnBlEG1xJT4WJpsD8KmUw27TidwXyGz+H/vbRjqj+1mG+5GFbHE
VoeJ5MV+9YxFSf1YCvYEMlXmeb/h8TifDOKSXjUmK7NxGeZBrJzz5HuxzEwL
IDD3f36qo+scG1rE5VDhW8GGHR9p/DWVsQOy8Uyw5MC4PP7rVs22QkcOBGdi
NDMdm6bh/PTQcWWF5IAPnnS/oRRWy/MJ7fCTuo0UoiIvldTMH6xbms71nEKu
FTjz43wOS7qGoVpvx+v+dYTXCjVF0vs+fdFxtIkXt4YUkNS1ig9GwXSRzPbH
tpAPY8o4pXtN+77G4uauIvocjWVVcDUn4qXPm8TimGsg6u/w4UfbYK4d1BNB
wQVcOxHD0LFlnO6TzEGVmi8na4vbuZ6o/wSyMLO+aGoUjmHZd5bMNBbBX2s4
POw/jhvpiyV7s9hRx4bYCUUclu63KDGIep30RcFjudN9NWSNDmNQXCrerz3Y
P1fDpOJQfncKYOp9PbHkvyi8LoZjaqMU9rVTcK5MpumFajYFZFAi/Gk2PYGU
oHCaDIqkwUNjMWZlpcwIybpX0+lxRCWcDwWwWSNfT2Q6G3M/S7dViDqOOTic
tqZlhIEw+JVK+63RJGyrosaikl9/gujzUM28+4msd01h8RsdAUOj+bZWQ6Np
tUSPJSVs9nQhdJeh0F7PInTsD9pfL2LFLS+aXXTGxkklBmXncGynB0PCyih7
F8uFVa4QU0wtL0eaigBGHlGIvpuyWfpfGscnK4SfzHzvSeFEF5mKBe1yMfrs
gePqMvqe0henujsz9UsVZ+PT2TrFVfKcnsyxIIKO/aRhpZYGz74yZNknHoeF
MP/XL55qEzjsHsPmowk0vlVCu9c1HHpZzc1ED/Rfq4T/cMmU3jacqWssBnzI
p+JQFDfX5BIUlMvQpZF0eJ3A62mF3DhiTu9SlQiSGZhzKYAdXQuZvCiFZ2vU
mN0s4+jqTFrsTmd6XzVf04NRxcQSuUoh/vf79D4rY3lnVY66QTLP6/iz2ljH
L+nFG9Mj6bklgznzEgi4GUsz2QPFi8qZ/lJDq616ouu1YPy2O3FiVhmmg4pJ
jkhlTU0jccCynEWbvWnaz0D4fE7n8ARPBlubiF1OrjSziGOCvBvztEbi4U5f
9KcX8flzDbWn+NDwh4G41SWBknoONGkseX5YNb4tHKinH8JH33zGr/HH5k8K
D/ak8WaePxdcC+i/SCGWt/dgVWwM2V2j6Ljfh8ImRfw9UsOzAwlsSkwnRDL2
wyFWnN+vL+400nGoRsPTkTWoUYgJq9PoszyFBpfCePfYk0d2+fhlxFK3PIon
s3IwmpDGvnMp5Jrn0NQqkaO7IiWp5HBYP5Pg1ATMPVTir8REhsyN5HOMoSjv
mkJ8rxiymlaif9ibVgv9sMjzY/C2FNoaeFF7ZQL5b0JZXehFxtlKUv/yp1Fc
AA2GqMScQh/SEn/TfrtKnDwRgF1oAievSb6uLOFPN09ubdAT/wyrZHXfKGbc
y2SbzP2PbUJo1KqCE7WqudXdGqchJazKDkSncuDJzVx+Hg3BT8+Li6917HTO
pv5Hf5I9FWKkWwKnAu3ZcLuSLg8KaDEtm6OxKrHpnKF42CdY+p6e8MsOoXlq
MgY5pmJudCYGS1xZlW4gnLTSlVvb80jyyRr7WA6NdKSweQpVlxJJex+CTUgN
r1ZkE9zckmUfaomT/vmEv/cnvKKGstBMfHoFo7daIboezcF2WCDOnUspm1PM
898hLN2dwZ1r4Rz0jeOfX3n09ffk6Dwvag1XitYNsnn2Xc7qbz1x3S+Hn29d
OCEd5fCmLJY/9cb6UyyVj3PoFPUTi5Mabodqmd/zNz5LDcXHvalkD/XHMNJE
qIdXk9fJnqZ5uWjmllD3nisrVyXT+7XszM5/WLU9l7PFYazqZ0VbDEXn1Cry
crO40F8lnt7TF5ct3CXPqMTjgkJifD1RDq4t/pJ70jYwjTHbCukj+azfzy+k
WkUhgnRUbLnHDhelmPgoguBnbkw+mseu8cmEuag52Eg60JlylActeWsURaSv
C72Of2N1VgotFxcT2MoPZMYwSCH2z7Jj+m+lSB2byosrtjx6k0c9OSO33t54
TItmWrCWDlOscDuSQp/cVO63cGfzBZVIWx3G54UWjH+Tz2THGurfSSa9c13h
cqWcgd4pTDGpoK9BHnvs5GyFUlw6FcoItQ97pe8+1+no4/ubI9FatFOSKFJ5
EJ6uEpvTVKJuD3/2P6hk9iw9EeHlw8H1WfQeE4Gyrz8FOwyFekct8Tg0mMIv
9UVieQ1f/oThLP1u7EmFGCj559PMAhLi8sg65ErSxzSuX85l/WJPOrxJYtPj
bAYNCGGx5Ka1AySHNfVFUb+UEU+yOOVlw4SDNaS+iyHWxpann2UPHquhble5
Zxl6ovE5IzF5VyH179fQZoQ/fX6kc79UX0w7botnp1+8dS3kY5CGs7Ifl3/U
F+dDv3HysD3W4Q3E6ZHWZAS9pPHwMsL759KvXyxhe6q5e6CMazuiGZUjfacg
jJcTMhnUK5FJn7x5EhJN6AClSLlaSqOmDngFG4tO9iXkD/ekx0UDEZKrED5R
PmSVlsqujeXqXVvWNjIWE2zceB/iwK0e8Wy9ri8a73TDbYOBKLYuxkqTyWyD
AsYUZ0m+LqeXubEo7CF/xgw79BtXMq5jLm49QkjMKKKDMpeQkzac7OLFjmgH
2fPxGPmkUOvdbwZJfro+xlQUHA7kWYUb63qZCNdcHS5KH07WlHLjaionLbN5
HZFF3uJUirdX4fe4mA3vXHEZ68OBLdUMTpH5LR3r5UqF6OOgELemZNDjVSrr
UjVsfRDC6t4GwjI3GMe1scxzr6RFvuTyluEM36cQe68qxZiZLnQYVl/UPxZO
m66WPFoSzap/v/KunezZV2Gs9FVzdLQnnTIyueki7/Nue/SXVzPxhr6Y7yn5
NkxPXArL55NXOP2lD6kds8n5Jplfvub3gYkEHvInfkwRCY3SuOws7/RvM/FL
k8Ntl1KizhWy0yaTlS3y6Jyfy+oncm5WKRRLxqm1KIiLwyWvdkyjo8yunkUu
uBen0sIymcydjlxppuXBG4UwMkihqI9K3K1TxqeVOub/VIiylDgsxkfw6U4E
55dmsLyBG0sOJ6DXoRxjj1hSNxbhPy+HD92DKI9TiQbZsVhOcOB+3XTs76Xh
HRTDjxiFcD9SSedo///n+boUMTY3B8+nZuJsmA8d1a58kx68rKEO19WW3P2p
J35PD+G/3QHEnDUWi3VlTF8gHfa9jujwaAJ/OmJdN5O309WMfGzJyt4mImiG
oZg6wY56FpJJDDKY1TGGVN9s3MtLOPEyCt96CpE+0Zuh5nnE5alE4eEIMHJj
5l4d0xdmIgYFkLdCJfIu1XDaP4DWqhqM20dw64Uf6yfkcUw6RbOfoVxf40tC
v2TuT3Tj4wINb61Dub3DifSLkeikf4y6H0TZMC11Mr24fyeEVjvj2TYjikCZ
e3fvKYTm71SmfnKhOEolhrbNxywiiGFFCnFnZRTm96J4sCmE7oMDOLEllumN
9YTdpmje1gohLrSxGBydiI2RD5fSTYRmQSirRnvxY3Aq//aLJlX2dMGweOoU
6Di3TfrgLiMxd7lkvG9RxCxRiEpFNNf8Q/n3SQ2DRuYyrIEDnVsaiROt8jEx
8+fgf/lM6BxPQlYgLeboif51ddzNdOefwblMkfvk7CEz5Vki2tdxHH7wi17b
9MSibgV82uBPXcnSdreLOHNWOv+iMty0pQzfE0GdqwqxqUUySZk2bG2pFPq3
lUL9jz1zJVtOkf5uWROA9lMhY19JjnZwYlhPlejZOYFFFp9o1TSXJZIP1IO8
2fJFKb6vTePcL1tOJxSQ2DoBk6w/WLXUkD09jTMpgbya40v7e06kdnjIuOxM
HmdmovknlLG/pN8drGTf51guh0n2kOzm2NKD2kdq+NpB7szdSFrMy2Xb3BAm
bg6kSW4Eh96FMXelHf1WpnCko8x6jR3OltUUfMwn+8h3TjeRvbdHS0GhOeXS
NVoOMxVLohxw3GEs9jT+3/+H9GGXVRE7zUKZ09iHjdKz78XkcKrKlrnhkqn2
Jklmc2HXymIehsSws7M967tl86UgCydnL8ac1hfhvbLwkixqsy2N4ROVwj/C
m7IzBeTLLog0CaBLi0p8e0ivG+vHmVcxjMrKYv6iAJznh9NO3stDHb9h1KmI
m3eiOb8ohr0xemLiSJX4ONmJNWHGolFFJl3DXqG8UsCo4gI2yjvsPLGCNbkV
/LfDmzaXi3kvX2sDz6c8m1TNxpQInOrb4ugSw+CKeGY7B1C7RxmNPGXmjHfm
qtzTqiZ5dDL046DsuyOrq2kv79DgUqXI652HWcsAJt8spGyT9Naev+CaUvSM
09Jumy8fRlYREJbHykneXF9ajLqzjkZy/i/HllNZFssr49/YxMej7RjH33vf
cCE2Dav7MVhYqPF620jM21dLRMjc2aY0Er7HMjB2yGVDyyIO1rLl/nJHZnsW
4zTYnS3xnjz8XcMA6ahpjez5Ga8vDM5qmTfHma+jjcTZmhzu9bRFe91ItD1R
RvKjKGJnqUmKLyJ8eRYjB7kw0/QJ+7s48W/9EMoNPfixLZwN6Upx/FAm5t/i
WCrPx2VOHPn1vKgwqeHhhDA+HIjH8JSxiJjtz2mXSJo/VQnstVTGO+E7wlTc
HZTDs398WPerkGUz9cTNGVlUNTUVqZPqiatnY9jnoBIX4vw53tGJblVybj+t
8Vrnxcc+dcVbr3KezU9CWSeXc49CObZby4afibzN0pB/O4bVPfJY26QMk0a+
3FhTxKs2dcSfH1aSPVOJO5OHr5sdR1/l8q5fBp8OhdMho5LFtwr561IowrqE
UyHJzH4ezpLZkrOy/Pi8Moz2Kfpi5qgkTksfbhSiJwZ2yZd+mc/7GoXo6K0n
/B2jcZcZ22dCAWc3u/OxPJOY7HT6KHX0OhRHwg0t3tO8GOehL2wNStnUy45s
b9mnJyoZ8NQW1dtKmu1RirqX/QnpbCgUc3IYtseVO6uSWDozmLkDY/kcEsKl
yZnkPrdjdI8imsQW8bKHHyNuphG5NpWlf2zYLXvmenMdLzW2vAuIp2xaBjVF
MiOky48296P5fC/Wt9Fycr8jCR0C2bUkgdzwXN56BqObU8K3FqbiqHEqtQz0
RYcOJWhehBPmU47GSXK95LR1oVW0XxDGicc+9HioY65LFYd6V5B7Qyl2Dy0n
0NGFw1cqSKiOw261B7tt8nj+qZzFjwPoITlHyNycvc6FKZNKeeOZgePnPxR8
C8dZuovh7wBMktJ51bGM06f9+feCkTCJyOX55VCGh8uOX2VHzOkI7MN1DH2f
yleNF1PJJG+QiWjZMYBbkuv2OZXSYo8/WT+0DL2XT5/HwezqUsKGyEj27dUQ
L++Frl4JL5ZkMy2hiGERkr+mya4cGM6MW+k0SHXjsls1687Ec3ZZCGclf90b
aMN0n0R6ybyr1SyIF5MC8VkUxyjHODZnexG9Nk72VTzvhYYtTY1FM6NQ+uxM
ZPGhWiLSNI0DXSOIa2wiekxIZHdqLO97VdLolx+KB2oSX0Ry3t+S3i9/SU+I
wljm5Y/7tix7WkqDf0Lkvkdy+Wp98Tonlgnd3Hg900S8WpvA8vXyTK1qi6mS
z5ve0XJaVcXSgQlM0nhi9CaT/QPTmHbXg86lWQzbEErUbG8GNDYQWYPTGWST
zHNtOVt+FdPELZpFMam4qQr4e5cV84fkYjgmDpPuAZj2qyXW3JJdWZJCv+sq
4TkshywTSyL0C5ndVsfTrQ5YvpMM8yWJ7EZBvOzbSJyVTnRufCRtDxiKfzuV
cNLGHqeZKjHxfjHWcR40XGko3i1Mo+47D3oHmYjRepHE6GL5aVXB0H/jGDcq
FAfDNE6/TaFLZDApdYpZWZKOkZc9Da5WUfuGG2c8nks31xPG0zM42s+Nk380
kgN+Ez7BBT9nhUgaEM7Rb1YsL60lRtc1EKUikFrHjcTBN5UYGvxiYamh6CH7
dM5uJ/LrVNApLYpRbTSYv4ujm1LLlr/9uR0YIp/Nib+9vpExtYLWXplMXejG
0N6haM8m4hdhi/+bEmaYVdCzsy1j+5czvZaW6WdDsfVJRbeiirbdHLlYnIm1
togP62WPW+iJ+VoHNlSHYxASh9UfHWvORPMjQCVGLZb+ed4b5TgT0fVSJUuK
vPBXGwon11Q8bfz4pcukg3Dh5sM4Th0qJN4iifmuIWx6U0F3z3Qa3vAl/mE5
eY5h1LXwInCJnjiizcPpsA1nPYxF+UbJEPpqHnWsoqv0JqY78HJjKQ87GYv7
18Nwb5Ii/TifLlt/872NGzWv/vd+jz5MOV9HBLh683pUGH9lKUWLmRpsD3rg
PFrHq8NV2KS6YDIsm+Gvk5j8yQOLg9WY2lWx94YLi85lcuaYI5/X+3LLt4xe
r5KYI+cTJx16xMIarqX6s+BTKf6e2RzMlT0zsxCHNWUs//yVgT1LmVYus7eh
N6sHZdC4ezibPTw4PSQH9YRCTm7SUHL3f58Rn8XZ/ck4nNRxaIRC7Hvnwj/3
zUQPc+nYA0OpaFDASukLS3ebc6mdmeg+yB+7D3ac/20sQh5pqAlxoeM+lVih
K0X50hvH1Er27K+ghVcszzdnMTE6l2aZkokGRRD9lw1FfYOxX5+BhWcF6zZH
YdJUy+xfYVglR3CiOoENoyPZpQpmvaVK7N2RTYqfH5euGItRfSKpbxFCn5vG
InJrDOsI4nMjlTgpme3hZzumpRuI/s3LcNR487VdAdeGVDMpLoHe44pwlnN6
tN8LB5Ns7lS6k9LWl72/TUXr+oXcX6ymeEwKi5J03PRwJW6Fnrj1RvZ049+k
nKth67kSrpq5cc2wAL16BmJkY2+M7KtZn2siFEf/MLlUzrx/Nm9GB3O6cY48
Hx337vzB4H4hrSMlk9h4oFqSzNfrLjx56sEeycMnDlfyTOvH8q25jD4YxxdC
JOsnE55iIKzlc2VuzeafDkpxLtmWhVYGIuFFmHRrLcvq64ur9VJxUSQz6x89
kbw6kaZb/Zl5xVBUfqzEbZgn/04v59KjLH7Z2uE42li83Z1LUKYPtx8X8GZ6
MmO/ufFjVxyV/tGEPPDklEslbxZnUqzwoXtuJgdNTETjtSEEbZLPOyuFQvl9
7W/E03hpAjUbXDG+LJ/3cQzfxgWx8ZaGx+MMROu6ftycq2b5glxquzjxoGEC
9ueqabk0jvivOfhs12Eov7b5ioEwGB2Ho1kwo3rms9ssi7ePkvj6Xx3xpl0A
CV8zma5WiPv1lOLATTdOTDEQbb8YiCYFvpR8iudQ40iKt8oOdTcWf7UtInGH
G7mT9cTiaYkcPmqB4qT0g5uhfH3tSyfbEqKkYx9464ki0Vj8WJHJAumqKZsV
wmySI9MDbDlfT08YfNIxtZkP1gHVNDMyFC6tnbkwSyEet8iBtRZ0cyvl8eV4
KjL8cMwwFbqAXHpfkf5XnYLvzAy8HGIpk3e5wMoFxeNAOr0NJrlYS/TKIP45
lMDJyykc2KwmpzSBgtpOFDhGMWGUmtgjuUw2KWRAwxTEi2QarAqjQPJn4NcI
Zu0NYtvyfKbJmVvM0zBclcVc0xj65aiJkD/f740rKeut+blMX5QEWZEh3XNJ
konoPdWLpC92VIysJdLGaGV+OjPhiYmwbVXKk0/2tL9fT+QPLKP1ZRtqvzQS
20OT+WAdzD9rjITL7FgKX0ZgfF8h5rRTs3qZPefGFVP3H+mri2xxRccvr3C6
7vWnr1UZb475kh+mpntnOYPcfILS02izMYnyc4Fskj+325tSzpWmYNs1mH+9
VaJ0TRyXZgUQeSedgrXFBLULxu+EjvPmxWTMCSZMlNDqkvT+F5JzxsodzEyn
kcqeWqb64vh5fw7P+MPK/mXUTNQy7otkOZ2JaDutmBiHMBbMVQkzj1DOzIvl
Vu1qGh7MYPSbKE6eMhUBf2I5auCCJs5Q9A6LJGuOK5u3KUWhcTntemYwfbtS
ZLoYiH69JQf6upOwJYaqSHeUF3wJPWLDyVph6O5ITuiq4UqTOKrq5rNOMqur
twu+06SbHypmaM8oag6qxPIMDa31I5gh2X70uCRm3/jMUJMybH8EsK2jJxMC
/XkeGcX0egm8uFmJeBxOjfT86OVlLMj1oWttB6wXmoqxw5J5Mt2ZotEqMeiB
gVgqnX3Ighy8HUu49SOKsEAzMfxHMqan3fDpaChM3EKo18pPeo5SuPXKpsdX
d8Y2UQhVszLGronHfK5CLBuQQJ1VgSijddROCGZ3h2TeDc9FF67GfkckRz7l
0FGnY+2HQC6G6uiny+LTCOlWOSUM/aqlk7k1Fv/qiez25ew96cPDYUqxysGN
IxEFOLkaioP3g+n0wJe/a9LxNdJxPc+FOjOrMf9dwubkQP6brvo/js4yrK20
a6NJcCilpe7u7r6eurt36jZ173TqM3W3qbu7UcehOMHdCe4OAYJ+z/v97sXh
yN73vRZXTyJuF1WgbB6FcrqleBWnY8+CcJreT+fyFYW4uiCACQsyedcjmJFd
frNFrRRJHr4ckJkQf0DmuuTmLW6ZmEiWYIpS7Lwcib1HAp2UFqJy2Xee6lXw
yD+P4zhw1a+YptKfv293Y4nc1WbVSbQ94MK3VXJO4jPJXvubwJf64oNkps4y
Tx6OLidjdxI2PtG0ccqk5WqlGFhHzZ3oKkZJT64enIS2VR63knPY+zQWiyil
6KVM4VxHKya+NhSpo1M5Pd+KdgdqcFqcwwOFlhsbFWLefzqmjUjg7bhyNg6v
oMw9gpVWsRzOdiCmVwhGOVlcXlPJoNe5NKOI+iNz0DlFsXqNvhj/OJl69r/p
3F8pnl0t4L/pPzko3fDz6kLWL7Un8lkVd8+kM87NjS7njITflgzGrPPmQrKB
OK8tY7V3JHGOeuLMxHKigsJ53FQlrOdpWVMWzOdyfWEnZ9fmVgxDDtVQnagU
YV9l52p0RPfKoJfOHbOwUpx0mTRu8o212yqoaakSry0+oleTx5Ue2ezqGEiv
TJWY7Z5KT48UdA4ljDcIZeUXawauUYrLbRRizEUHvK5m8etsGZd7RtHlWwnT
+ihE5EhrJkSW07JzJo3qJhCRK13+XhopRjKjTmmYtD2JEb9t+CH3WyUzNrqp
I7ZHdCz9ZiCunH9D1fVK1Aur0DRwZtU9Y7G8OIcfA3xoOdlYeNYmk+zoxHxX
6dHvUpm+6xtL3umJLopE9my05VGGhYguNxb1gr4zeHkV2lVFWMd6E9+1hkbR
zixtqcHVvpLRxYW01Q9nUn4qgaOj6Xcriv8m5zPyfSBzu8cxJaqhaOefSMUu
T5oEK4VVQjHDJzqgbKKl57/l/JUdzPMTEWxcHsStrZ50/ruaP9pkkr/ajhGN
VCKrg+SDLWqGhitFwI4MfsZHsa6/ZP4pKRzZEc7q4eYiMKoc70wvbuXoic+x
CnFL9m1M/Sy+GETwoO1P1OcNRczxDHa+cmRTYQ2Nf6TIbPlF9Ph8DjYuocFs
2UHTlGLBCT1x2SeYDqcruf81lVEZ/ngnyeejL7vF14aNz/IJlV190CGKiMoq
VnQtYqVtJBs6VvHWIo+/jdIZsk9fGG00EGV3Q/h9MZXZVhkEdgqk0aZIJraz
4465hva2Rdx9747pzBjsDFVi6Cs9cWB9IDsmG4iD7Yu4HBfEz3+CMFSX43Lf
j3pTE7n6QsO7Ug3neyXxwsWFR98TmHUujY+jvVhm6k1ZvTysclKoqZ/E6TQt
C17rSN8QJJnOQPh9TkVT5zcmMsM3/VXOqJuhkFKI36kaul8OYJ1lPfHrh+yK
+sEcTpP3/GUhGS5qlgUZi4kGMVwZnYhYo8NpaSinJ4WyLtRYjK9bzNC2aUwf
VIuqfhpBMpePnczj2pF4bB29GeZSzrWVmVT/aU3NhUw0Ltl8KbFB8ySJr1GJ
NDkViK4ig/3/pXPILQnVvgL29o7h/aQfuDwtQKOLpf3tCNp2DMIjMA2L6lB0
n9KIuJLHfe8Q7k+IZaBlCVULHBjzLIvuUQm83OGHy/sSHj+O4oXkzAWnZCdU
hrF2Yzhetnoiw7eMI3Viadc4jlGaQiyHh7GlTjEpv4ppmPyVzRpjkRqSwOXs
UPLOKMTeodnUnepBykRDMUe6p2VWMOWTlWL6rzBeP3Ph9vNCFo8KpEWmLadP
ZdJ0SBG5Q7xQtypi1C8TcWWGmkG+RmJwdSFL+9vBAZVYGZ+LfVE00X9r6VFP
IRI/erI9IYN/bycTOOkzC6sVYtGEXGZaxvI2pYDVdSKIvR8kd10l6ienMvNL
CBNj9MRrtwh8TRw4OSePsM/J3IgIp++DTFppDETCJjmHfaIJ6Vrx/+/1JMp8
C9kYysOGzjRbayZe5gXyum00L2Wvb1ynY+dWd1I8S2Ciiei9QzJV6wzuyT76
8JcvPw4lMXxyLPfauvBHQx1dPudjuTyNS+OzsGucQs/fbjSLTeV6w2rGnvbj
6Xp5fx6UUGd3OPmrNKQ8SKJXkeRkhzR6/5nBdbsoxplV002pYcRUXxb00nC1
VRYDWybSbouGN5v1xD83QjFbrqPyfCXL91hzb2gebzuUcswpnrmDSrkaaCru
DtTw73ileKAKZ+3kH1gd1Rf3POS9ahHKassKnp/P4bU6npUPCsjL1xeXt4Qy
eHYmY0crxDUzZ9QOFbj1TaNx1FeapBmLXju1xB/3IC8yhcNh6bjvsGX9rGp2
HE2iWQtbzgbLrDtSwPwln3DqWcX22EzqzAhgfJShWLorkbJnzvTorieKvauZ
tiqK7nWMRU5OLn7Dc9nvXEuJfCaXxoUQ0MBERD7zpVWm5OAF5qK6XSHzrvty
oo0On+Xyvknu6d0lmZOXlMJz+m8GOxTQ93goiwZocLqUhsuLOCyfyGdtmc+l
K7UY+nnh2q2crs90tBvtTocucg536ImqUh8OGBYRYW4sZlU7SCc2EvemhXMp
0obGgRZi1o9wFgy15WPDCv78pmNjv9dkGJiKBaVxdFYEY9mqkdinpxRnfJwZ
uU1P+CQbim0dXdhqHs/RViXMM4/jdkAWjQ8nMbdKcq8wEk1WGImoUDW7iqWv
rS/k/WhfUjqlc80pj4ffHdlclEIvjS+LKqwYdjwfl7FhjPd24FG9Evr+KuRH
iZz569JT6xmJP2K8yPs7h/eyt3J3uFHgUUCclZYpE/3pGV1L+6RyCuf4oJ4V
gHOe7OQlXrTTlbHncAJhdgHszTYWLgOMRSs/X+Ium4mw5jruHQuikaeBCHCI
x/KoB6ENSzhZX8uP3tIsE43EqBmZNHnuyC4LybyL1Pw33ImiH3qiQUOFcHSP
YdxW2cPKfIYcjCS8h4ZWi5LZmRXPv/9zQns/LJZH0uVhKu4OStH5USYv9CTD
zrEm6p4vuzunY/CqmpVBUbSeLTmqq+TFHlHEHajCPz6V5+cCMa1J4tz1KkKL
fOnfXSFG3PIhtSiMr+b64nyPEr7IPLlUVsMwi1SapkXglFTGoFY6wpI0OHao
K37kFvN8chgxFfL4jXTs93PETHro5lG5tO7vwu8EA5GfFIX/e0+2xZTTak0U
Rudk5uxRCKdwQ3FXLwYH6drX+5dj/kcIxZ8qCZmey9mTnzkVrRKXKypkb3ny
V5hCRNxU8+6iP6OWlWNlkcKOsliuHKimZJ+J+HOOA9NLEtB/EsVTG1/MDPJY
us2XD7mSoXcGc8kkidElodRpW0CCVSZp2wLIiSuix9xsTq4rJvyeoRjqXsk/
uhf8m59C5y9KMe23mpl5ks8HBZJ3UiHafC/h740hDNqahVltGXeL0qnoEkjy
32biQ0UJN795kLzNXGQ/q8DuQRCbLUxE7KBg2g9Pwe1gPiXjw1FZBhAbXUAD
u0TJ6UkcGm8qGs0p5X3jIOZtrmauTQFZ0ZGobaOwaJ/Ev4/TKGroK/fWB6O7
3izYkMuSSDlvw7JpcEJfNEpNp8tGb+Yei8XyeAivzjtjcDIV8/5eRIT7sexZ
AscfxHJ3XAanlhbjKfN1g78rD+sbiU991Eza7MH1scZihbk/vjY/yPBPQrMy
GrHIns6LJONdlW5kE8cPvxyWHpS5dMyWJf9ls71Cy+KiQN5vz+Fif3cs90dg
c7oU5b+JWMVas25iIuWzy7jQORzjTzL/+kWy9kc89XZls/WPWo69SSHCRk+0
qi6n0097JuzOZ7FkbZ/xubzTL+WvgBzOSX7yGlpHnLNPJbVJBGkhFQyfUkrR
40BUQSX4Z5TwwfEXJttMxL1lpdhsd+B9R33RYVIN6gveVFUZiVmmCnG84Bf6
+vrCpXMSja74smekZMvoMvxa+aC0yaH9mxrsDayZPSyDbSOKSPsazEbJb3eK
41HpJzNybAXTjfOx6uWO20Mdt71COdPWm1TnEESyK2W9PTjmFkvZigLaXP5C
e4tcOq7JZuZbd14tqmH7Sw2H3eLYoq1hjF8Qickx+KoVwndIIYWSb5btKKf/
iWoGt/bG6z+lOKhK51T4e/Qm6YugjGA6m9lSryKGrKuJnHvnwURlAe6H8hg4
IxDzj1rIrWHJwGhKSGTevUJ6tYziebh0u/a53LoQxPxLhfgUZeMrXU9vZSm9
LhSTWdeFo/45fNuZRmLXdDzvFDN7Qx4vvmk48MhQxH30I8wqgmY1Bcyom8N/
jjrcFhdxUiWPu1tN1gU9sXdVGe4jwhnZJ4YD9xJ44OLKXyVZjNyTQZucIO5V
ZtOqR2MxfLsX+4ZnslNm3V8tQtAEaNlor8HhQTxtzA2ET+tsltfVcE1hIoas
rqSVnpqDS5XiWloxdxp7IBTGYsCGQiInBXDqbx1dVTIDd7vzPFshvppWUTDL
g7arKgn/lk3AKH9SqlPwWFHEm2npfB2kEA8mRWG/4ScNiso5G+FFyL9eOG9S
iJQl+kIZ7MrfDjUYNdQXSV8T6dAmjAcbinCsDmTe+Wzq6+to00lN608J/LNN
R9DyBAYWZdBvnYk4t0Ney4lUao6XQb43G97k/P/f7tMTwun6sYgRvpmoPjoz
rTCJMYPtMLSy4luCUqjX5BBi609QlI5ZheU8xZ6sEQZi3YZoBkh2Wt3UQDR7
Wk/cGhbK1a3Gos2mMlrZWvP6cR43R4RxotSaHm+qMJlbgoE2HNMZhmK0xkSc
co0i5J5CtF7pyoPPETj+iMFGZl11hg3b4uJYfr6A0mBfHpnqi6Kzci906Vjc
NxDPhpWx+Hsyk16XMjApiRlHErlVN59c6STVD5PoMz2brDqp5B+z43C6lg6d
Zbavj2Jkp0KORBkJ01cBkiVTGbgqiTMjAwgmnaLBOTS+6s6QoSUEKWowmxMs
fSmLz5Jprh4O4Ezzcpzq5LL1QjBh6kTWHc3ALC2e6LGlzPUtwrzGjcNzVaLJ
+XTCHifwPjCd7y99uCuZM2diJi97pbDGMpkHXiG06RlHjxeROFiXEdrAQGT8
nYfhghpCBpqJ6jMJrO+vLwreR1JP/zu1V/TFVG0AA3tEUJGdTu/0PHY4JFB5
oowARRUTtU58l14WPzaaPYVZ9DpqKJ7sCuKdvRP5Sw3FixEljDSQ3pFsJOoG
yk5a4U/FcgOxt1GZPH6Y5IwyBuYrhZOVD1qtgWhbVY2+fwpXNivFjcZuqBdL
r3QzEHfz1Ixe7IDelyo85Z7P0qTR3ySV48sq2NoygKtv8zAJVYq7l90ZPlXy
nbzXjfslMlOy1aed4aR/Tsd5Sy7F0md0tySXH5QMY55JwLovnOoXL3O5lph8
J+xu6onASSqxeWEEr8fo4LaeKBkdQNDZGjYPLuTCvTA6DUvj1uJkKqOt6fMl
mwqXYJzny7mVnKvWeLBpg5qg9Gzy01NQhEreVSVw82AumXsCqfelgFZ+Eaxr
FStnubFwjfRhtF8g6afzmHFHzXLvSEq3y66+Y4PPKmu01yI58juQgwO/0/+T
ZKUuUbjMdebfJSoxV+dNZsYLHt+u4qr0p5atXYjUFlC+zJVXbRwJPRfLjo8O
TJCOOb1jLr3Xu1BuHYqPgaGYFOPBiE1+7JmvJ/q+kHO08itr+lfQ64qaaY5f
uRikw+NdGtsvlVPSLwPN2Wq8dJLnx9WQfPk3ExtY4xmuL172S6WBvgN5AZFE
DPflYF8Hlsi8anQ+iy4VobT4K4u1r7Vcfqum2RUDkXNRh55FJiau+uJIcTLH
g0OoMlGJ9ZNKsDkYxo5hpfSWP7/hdiSbu5ZwW7r9F6sAHM+WcEOXSofbMdxz
KeZWaRF1zsTQcp+paCDnbqMqBIfT+bS7WM7POxGkNjQVfu+yWf8qmrInCqHv
rxL9+zky/oOeWLyimLxJMYQ0sxCOA+P452qC5OVq5j/Jwn9OIBu+F/DNt4r5
6Yn89jESk6NTZKcls+1mASmdC9BbEkAbXS2VfXQ8aeHMlZMG4pXsFePrUVy9
ZSpS9YvpsMEf24X6onVhMsVKFxxUWSTdK6ZqSREmHwyFmU8WaV3jOOSXxeZv
0lPiE/i5shaNzAW916G0nezH2aa+XEvw4uPZAjpdjGV0JzdWTU1n2oEg1Lf8
aZ9djU9IBK6zKihzTCdocRjbjFwYs7OUN5L9m6c788qvjIv/xPHYIoAmy43E
4hkpGM2IITSnlF175Q78COTsMD0x8rhkjVg1Fm8jadhLdsGDKI78isfvgKFI
6B+OwfQKKK9lk2MEHcIVIrZ3EY2Jo0uogfg0NImKXR6M9TQUMdZ51J9pjd5f
JdQ/UMmtvBz2fTAWU94UMnxnJOt/l2G+Np+fCzU8sCjH7Ygf4+4EUmRY/f9d
7ODozkCXMBqcNhJrtvlRdT2TZa1r+PY8A6fVsvukx73qlo2PcwxfR/3v/XNv
JrvkEXwjl6sWjvT4r4ANo0qoUdswrZWlMKyby2XHQA6NqyOG2aZyd0YsbqE6
1HsiSX8QwMLifAafKqa3VoPxd0PxT90EZjxX8/G9QqT2C2DMTxecR+j4tdue
Qz28uNOxiHvlVRh8U3Otgb74843kwpxA1BbZlP5Rjfc2d+xtSlDd0XKpgQ9u
l5VCF1XK4uvO7LtqIl7aZnDmkx/0rcJng0L0G+xJs+PVPG6TyahpttyYn8WB
vfY8yrZl5qgsxq3+Qd6RZA5fNhK9I8s4VycJ9SSlaF/fTLwfH8OKodmMm57J
7zEOrE6u5cjtUrR9rNDbVk/snevC5yI7hiUZir6KXKI+fKH7JSPRb4ShKL8a
yvPkXJp+S0M5MQzLFiph9a6W+9/C6J+oEq+k81yPceHFDqXwvZgMjWRGXS0j
skkFtSZxrEqW13dAJZJHppB4IYvtsh82nvvBy32JbJLdeO1kEqd2ZmOkCMGv
1JGPhmW8izcUaxf8xH2MgVAsVAjb6DDuVCrEtG9ZtNYLps/2XDYezcWweT5r
WuWjOpJOi2Q3qvwMhUdAJdvO26L1rKTHhziyHsYS6JDOszEFuE1Ss6WPUhTt
qSIgLRrnTtnsMK4kc78LexppGOeRxQjJkAMPlJDwKIjYX5KLZmcxp18cJmvV
qH8phbm99IRl4TQfbSrsWtcTnVYlsCc4j0vDwxgV4MyITznUzQvntNKW4f0U
4n/frX5vnB3e45Ri+9xC/PP8+eNPfTFW9vi8lsF0KjUWRZKJ1Ic9cW9RxfCz
GeT944n+ChPh/VUpRicF0tLTTPwy+N93IZaz3j6ToU1krv1ZQrC/sYjqZSh+
HvlKizNmoqh1KY+fvee2RQ2f1thyuY8Xvw2UYqyHShwKjSUiKR/7MQpxdpQd
padqSLhSy4wO/iAdLGWIjhduHnT4nU6s7NHmkj8xTmNtZ33xZn4c1t55uFkq
hb3hL37+YyZGpGWz7IY3reobikvOCjE/346Hp/XEa+m9zWM98ThciOmiFAz+
sMH7UhAvgjXccvXh9EyFuHzpAaUNCmh+XLLvDF9i4p2oW6vjxuQ6osuMNLz2
64s7WwxF2qUwRg5IprlFDgMko56MdGf9H/Yc25RNUE04/+0JIvllEJvSy1F9
KaSeqR+zF5Ux4KypGNXLllvzDcSR2/GYyB6a8TCH3Tcc2bz4MxqViagtC8Gk
TSgdp9YRu1NTWV3fjW0r9MX9l+Es+mpN89AKNsRqaHfFn8HZ8jgH0uk7MYV5
aWZi4u8Q3tX3JPGsUniFhVNd68vbHXri5dQqyhOCMBmvEL2SYzk4L5jxUSox
p1xLVL0QokrNheX3GrqEqVmoyWF2WgJG0jtuTy3i54VUTszwZIV3LvmjU9g/
+jeeU7PYdEjOT0EuLnvyWDy/lNSaVGKoIGKJoXA9FkpsI4XwmleFfnAE2RNk
PrxUijHlBWgyK9isS6Ff5zjJpkaiXHbhXZsQ8tZqKRMKMTDTjcruRaxfV8uP
Zj6obpuKXb3yCV6pwXGxsXgwq5bfP2x48KaeGEQWW8N8GNHGWMysX0ZSJw+K
zhSSnqMQm6vVdP+oEm5Xw7l34jf7Opdx/GY8Eyd/pb3slG+N49HMDePv7dl8
HpPAkM/+rLApwqhTGv98s6HtYgPx9Jgv87N82da9gPUn/TndLZi1txNwsvPD
7mQAqx4k0XV2GtF1vrB3bCVHSuLYkBjAmz4KsWigH8EP45gdV0Gs3GnVX1/I
2lfKy3rZSLpivkssjbtJN+0YSZ5OS+e3Yfz505P36jRuN87ldYtU1n5RiGx1
EHOdg3j0RMfi6HA6d1DTu0kK44cW4Lo/kSEuBVSrU7iYHUV912LK1gQS/jyd
292UYsZ5X/YbZtBWr5gl4zxZJNm5+lYsmfPKGG2dQtzQdA52yudFoga7Xjru
yJzxbmNPTWOFnLd8zvj4UlChFJsnlnLfy4njCUXU1RVx9oT0Tg8dEVPLWPHj
N2Nn6jgdWMtfN75wQV5v9YJ8LFYmUz8+lAUXtbTrFkbYtQyWbDYSc3cW0PC1
ntipyCHIzgZbGz3RWK+WExc92LGmlnEbcxnQLYGinaZi7+hsdr9zoaJ5MZEJ
WjY1k1y4vYI3Io2IT79ZE2YmNo+N4J8+8VSVaLHpXUBei1Bs7tTSxj6Pi9pE
ukinSMzPYMquNE41U4mLhlHEbc/EfWY52m1hBOv9xKJHNRwzEe02/6Z2eCFj
UYp3N71I/lDDylmZXJAM/71QIbJMStiZIhnvirGI/pLH57e5DP0hveqQQjR5
48tmTRlZcg+G3fDh37Eq8eij5HubQJxmavn6JIwp5jmcH5JO+Esr3u2IwOGR
kUj7S0PcOG9M7xqKDRp9cWqUFfmtUnj2tJQ/o99z3cRY3P8WS/1n+RxsYSIO
GunwSXNnT0Ux0d+TmDggmJ02+cSYV5P3xJcuu6r4o8hIzNa6EO6lEMyq4e5M
d3Y+qMVPUU7HqlB6p1XyqJE3/ofCiJtawefIZPJifPhjhpzhCzJz5/nxcXYG
NUvVtLfV8HqKlvmDo7E8FcECk1KCxxqIocogxlXWsGNMKlmt/UktyyDkuAuX
vQMYsc5QlK7Po98vV6zdzMSrDlrWjfqO96ZCLL/749FQTWZXLaOMs3k1VXbB
+wrO1s1kRo0zL95W8XdwKgvK/cnYl0vOH6V0LY9B20yySXEh/TNC+bHZQEwO
TscqIpBbTSvQT4wmpcSNhhNVouZCIiMM3ShYaCqyEitoGxiF87MQWs2Kw2hC
JHUe1hB0UmbsFvmM5lcwaEcelpVRNFhgIOpk5GN60IX9mYZiRVeFuDbTkw9W
5RxYnMjxJY60XCxZWrJDvZqvrA2sJ7anVtP8mC1t56tE2IQCXO6EoPJWim4T
s1lulcTXbeV47quitUkCJYctxMjtWtJdblE2I5mAl56MmO9E14W+WJeX4lWr
IbppFV9v1LDkRDB9xxTRamQV4/1DWNA+j+bTtGxdlMCGmVmkfK3G7KO/nI0w
+m6poe6g32yfkI6DcTIJdt+ZHGIo6jlGc9QwFjPTOqK59KldNm7YTkhg1b9e
6MI/MeZSIbme6dwMjuFirUIEuinEXzvcyT5nLjb3iuPiXD9mhufwfLbM02/2
RCnqi9Xl+sJqiZp7DeuJ+19q+NKuAJvvGYTZhbJ2VzjrraNZOTKaTh3syRhX
S2RbLefC7dmZXkP9ukV0TszH2VUl3oXkMeh+Kib7S6mMS6Z8izcfncvo0jCc
OT/d5PXosGpYxIm+avo9sBQH/jAS03aF8s5WJTYNTmRxgAd6n5UiRuXLgBWu
6DUp4/edDNRbIuk0yUjMGKEQLRYF86qJnpjiksm7GZLzZZ6P0WQTOSGA/77p
CaOufmy5E4bJcYXIUfhQ4WTPg616YvrWKG4PsOLs8AgmHdPQ/1IwJ9ZmULkv
j1HzQ9g6T08Uzapix6AvtM/QF8c7V2JTz4sukglfjctjg743z5vVUHgtjVgj
Z2IWGYi6vrFsvBfDnv8qeOCSQW6RE7HbqhmSH01eZQD1VmZj/KJMsk8eE1Ij
aaRIxanAnb4tNSzqEcLkHDf2xWdIz3NnZtNEPjoW0qF9CIu3PqHtORNx5qcv
Kx58ZdUfObwcF0D6Ek+s1itE9MgAIku+EqdNw/98HtUHA/DoUcCWXzFYR3vh
VlXGo1pnrCN8qBlfQsYnbzq8kX16qIiWFWqaKCKZML2S0t5+BHgms/tbAgOj
ItHNi+agfQlOJ4PppoggkTxWeXkQnurJ9E9R9HXI4OFNXyZGJfPnZ+ld0j2O
zzIRH+sn8r2xK0366pjyMx+dfwDavGTO9MjBrdgDl4N5qP/RojXwZfbGIrrF
ZnPmdzx2a01EhUcoTnO9Ke9awX91ciDKm0PX0/iwsASrkEAaPslgj9yjr+di
edUjjiuZOegXV7N1ZSmB/r5Yfslgf8dchhuH8CAlm33WRTxvWcMFsyTGXZZ7
2tRApM1NZ4rk38uzjcWF36GsmVJFyT0T0e2eD71jjcXNtjrSJiXSUmEg/rlm
LCatk03eXCW8F5gL79ZfsZf9op6kEONWBmJ8qxzno9JTzD1YNKqu6Dy2Gosz
0XhszGTs20p8z3lwvzCHueFaWko/+qO9njixv4IjTQLY0NtIWD0oYuhvP/6o
qxAv+8fR6kk80f9qWXksmtrH6WzOV4h3HgF0bxLGvpY5bA0ppW/nKKybFnG7
TwUvT6WifziXe8uKJT/EM/J0FYPnFdCkfygbbKtpK+9H6w3J2FSXM0fump5N
Mmm7o9DFR+Lc1JFOPZRi7v8+k32wk9xjhfioKGCx2oO6codenApi5RY/dmws
ZIXk/rzJ8rpqahn4SyWmb0/BMDiXzt8r2Tr6BwqjQqwelTJxYxK1U6rZu13D
Lk0cu0qkqy0N45OfDYvr6YkE23xm/2PPLRN9kZemFEsveLN3ehWZPoXY3HXi
/OF0MndEYrfLlrmWNfSLi6PzsQ8c00+j/xot4YuDyJhcwSP5zIaFS/58VUTf
o1VMbZ5J1gY9EZBYy/UOzhz4XVfUXZGDNt6L5sbGYtA/r7m1UvJturHwzQ/H
tsqVZZ0sxaPVxbyOkHt3WCnqhWcxs8KXRusNxdb3CeiZejKof11x0ryUxIhQ
vuzLYo30uND/IkFbRdo+maVj/ahfncyIhbUEZQRSliEdpJep8LP6Skw/MxFt
kknPbHe2r1YK51Ma3uzxJW5nGrqPWdQ2/MW5edl8fKMhssqPF7vzWTE6Dbf6
RaiahTO2sUp4/JK7WKYSA2LbCuegMibLrsxaWMl3m3KilJlsG5bL07H2LN9W
wbaRaSRLV0z9399c41LY3DSIOaXxOD1NIKVbLC8WFdJ2Tg5XK2KZ3jOPq7Ij
V3iHcmiYudjuXUvt/nT2H65kxqQS7M57MnWsUpitSWJprQ3t6pqKf62zKBgc
jGumUhyLL+HcaumtCfqiyeJiZrnFcE120I0hSjF/tgdvZrQQUSNz6VXHEdc5
pRy/Vs0LW1dSjiWz7nIZ3e+WMummhuS2KjE/K5+Q8R44nQ0hsU0l9PGn4ekE
rvQuZeWaDMxr/VmwOIM5B5PwGfyDgy9CCbKOY328O4nhseQmKMW5dfLfdvtz
55oWvUNeeG/xpHhTJasXBjAy2B9tpomIfVNJp/tx/My0EJf2JlFk682GKUYi
vE4ZmhN+sLWE4dWF9OmayM3BkiGXZZBuKDm7qUKs6hRMzO5YXI0TWd8jn/mW
vkw4pGNuZiQJkkvbttQTvnt1nDkQyYN7cmYLK3HyCGTc61hO3yym3qhouuqV
kTY/kvPHIvirpZaPKTk0CXblydYKzkWnUr+xN+vyleLgzUxUrWJp1s9Y3Fqm
489rqVzeaiRqVbWoV4bypDCep4VRXOqRzsh3mRzLKKZ7VByv0w3EPT+lSFVF
ctzAVJyeG8WHm0FsPmQmLtWk4bolnbFPVWLciWwaNfjByO+mYs2RcNIeB5Al
Xamj8OJOhpp6ksVUyXHsXxFK04OV9A72wv6uPWkyK7qPr2Z/keTJTB0tr0Xj
fjqaITtMhfovybsXfrOtzEhwT4vb498ExdQyVM6su/Qdi24mIs4km1yVNwPG
+3Khw2N23/Fgn9qBdQG3qfaJos3SRBKuq9HvEEL038mMPejHkkw1/U9o6LBd
dhnJDA3V4aWfwd3UWNY90Refq3L560sIbd7KDliQRNbWX9hMy+XxaC8WvIih
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
Uih6pRFzwp1sLx1xN5JoNCKEk4OrGGtUSaurIdQ8NhN6LbQYaHIYeLOQX//7
PLsFeSyI0GLirxIjLwYyoXU+xkl57DjiyesBKtHjukro+/nxZ3wZN1eVMXKC
HXk9VGL17QJ2q+xRvi3ilYFSdL6ZTHF1Hm00CWw57MbFnrWE2umJ55HfaTSs
htZHjcSU5xHMuViNwyelqMqNIetZOcOrKrkkHHnzSXaWQwpbngXR5pORaLbA
UHQYbMOFwwrRPqaI47f9CJ5Vy4ImORxVfWNLnqWY7FqDvvonJj1jsZmfRMva
CL5Itg85qhB3Mt2Z6mssbksWn3XQjQWS7Y/8ncAXc3d+LKxg4A99oecVQ3C6
jmst8nj/1Z2v7/LoqIznUdc4jN9VUTZV5nhfDeFJZmJy2yTcOmkw/iF35GI2
ynwvOiaV///7aKk3oullWUz9uSUMnuSPxcYslopUxuUm47yphm0pKaxZHE3W
6wLmBSrF0yLJdk+8OVwrn2E/NV0G1xDe3ocNOb5s7pSJT6SR8J8by6FTIZKh
Q7AJCud5L0MxQaEQuk0+6O1pLAzzVOLeKV9ubDUQPesncNTbjjP3TMX5Oyph
HWHPlFZRrA4MYZrbTwoT9ETgfzW094ml4SCZW7107FBnSX7RcjBCQ/P5uaS1
NxKfbqpEn+1lLAvLIs42ktD2GbidNBIrtkUzfFQ66iMq4TXDnkevsjhsrxIV
AcFsWhjPsWCV6FQvgT8Tg8jcmI5w9Gb4QTX/qDJJHhLAh+eu9HxQQu/rn/g5
PoQ1ulTpwZHM/CMAF5sUPnX9Scg3mctrlcJm0ze65aUS3aSQJV/isH0QTN7d
UOx/xfMsMZ3Y4GIudf7AxNaubPpbsu1ED7bLfnK7K7vyhj0tTL9gbBJER6dn
LAz7Tt84X+5dvskAAw/iZBfduSnvmbz/Ow9k0D3bCdPejkzV/OJp56+Sc7Mw
X+LP5EkP6dA4gIh/HbHu846g+YnohXlJP/5G0Dd/Vgam0bhXIkNGf6DfWw2N
L7vRvd032k01EBGZCrFsXACL+uuJR7EmYvByNXee1hG1n3VM2OMsHc9SOEwv
5/U1R7ZPrSc0NlkkBUVT3kcp7p3V8sU/CMfb5mK+KCb5RhjndtYTRzJTmLXN
hS3jFMJEZn1UhCueXyXjj1SKTy8iOPdHDcenJKHI+MGdKsmZjipxv6Un5uE6
MuR8qdv68fCR9FTLFP61C6DT9Ewej8qm1UgN9+eZi5ggAzGoQQR6udmUfQgl
ftJv0l9pSdivpuGBMCykg3xvE4feYlc6fK0vFjY0FD2OfKHZozB+HoomYchH
Vnb833upBXR84MWNuCKeT60iIs+dknqGQquRWX/0O18bK0TBe3/O3Qgg9XUi
B+Rs1KmM4aXM0jb2JuLI7TxWeNVyTOtBdAs3Tr3TF5WZedgGR3G/TsX/vwM8
bp4nt6uLeC0dvfdHR2ZnSZfvHszx7O/M3VzEmee1fFjhwPL12YQlhfHd+w0P
lqRT0t2HvjFqrk0o4F3fMHKGRXI9NID+EQksvRmIx4xgzl6KxU8XSdXAStrs
tWF5ywjqtVGIjze9GdrFk5mJ+UQW+LBn22+yn6t54KvBIS2K4K7FdFjmx6gV
nozoZCDWd7On2+TP9FyaT6B+IGfXvqG9dM9Fk6MZNt6a9+HVLFhbQaLajWFd
yqjYm8kggzC5R4VceZ6DxV+5+A3Ix/xpJbV9Aik0iOHxWB3+FZ9IGVpNhJWG
7XPsielfybeelfQ7pWbyrkLaPCkluGks6zuailV3smmXa03Qy4biWWgJsWTS
QaXhXvdS7k0K55h0kBbSrfZuVzMpPIl/41KYIWd8eFky4dLVijz80ayqLwx6
hJF33Z+ev2QPPCzFcpsXzzQGotA0g8LJQSS7ZpEeIe9LTiYtd1UyuNILDzt3
kmuMxfyobGY2lrznUF/0NNJgcMyfiRMNxKqkDA7P0RBUUMnW2FBGtvNAnVjB
2IaBjJ3sx+gFcYyTjtVyoBsNxjkz2c6ZyjIXyj95cHvrRTo2+0aHHVUkfvhC
QawNC5VhVG91ludui0OOiXi4RzJxsiMHJOvvfVjGZYtojg8P52f7XOokpTO7
SwV30vXFqugIlm4JYuRpeU//yERzo4rvF0vkbmTB8kxOfS2WcxvMf2/K+FZY
Sm0bdzbZ6ImzpzLJLHJlz0aV8K5WCIu+6YRe1BPTErO49t2PRlk1rFHF0+C6
I0ea6AnXDgbiyDsPnm4zEh30DESbxTaUtdcy6lQuSU9DuTmkmIuT6omiWGv2
5BRhLLs7aGM0O2fUEDI5jrf/SZ78rRDnV6rEvH4eTDGxEIsey+6f4kXAR33x
7i8dU43lE15mIBRfI5kwxwGXAXXE1YaxzPwRjHVcDd4X//c5eNa88zURn4eH
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
hlPbctgX5UlTj7oie3sGxWu9yX5mLm7VKeSpyp7ikFq8TzjSLzMAxS9KEdkj
Ec+O7hj9XsaVnv+9I+VNrlkWn5+rODDKl8K8CmirZtrhWH48LKDSroQ3u4P4
Nk2Fc4mWVZKLViVlYeOr59V9J7q4pbHtcxJvLN5zx8RMlLqV4jQujjGSa+p2
L+Hr9Ew+WxoI/YBMxv+RzLwx9UX06TKWWPrRtVMhj6fUsnxlGAvOZDCvxpO6
7b3pLv2jU3dXWg6z5cTCKG5bxVC+NZyX0kfCOqopOPuTNn3CuNQ0hhtu6YyY
4sVwu3hiMsIwsEsiems6H1x+8NIvn9+/pHNhcjozPpqI2f2MRUJVFs5/lxP4
rprgZuks0xiLUJNY9ktuvPZKevDeYILyHZin1DFf9ji9w+hWmsepN840i4ll
4IVY1sj517SHGwvHlbJFG8+i4fJ7hyXjdrGB2CsZYdtOFYWORaztGsRmByOx
sa10yTBXdvxuIArGVHH56jtOPDUQf7QqZZifdP7opmKSUQqfZkez+JKx+OtQ
GtuvRuHcvJImvytF3RZxtB8u73+8uczKRFRX64ml62q52SeWQ3UaiaeLYjDa
7oeHSwuR1rSIPqUZjFpSRvIEHX1Moggzlgwueah9SjxvzxUx8d8cJrm6M7ab
UjTb1Uwcn+PPzWPl+EjuTQ2P4uNkpRgwR8PxnaH0X5xBwTUVwybGMU9Vi/9P
A3GjopzjLZUiLDKMUaoMfrbL5kGWdNr2mRjsVoirxiFcdYjhq8yPNatf4Hzq
PSOqZF9PjuPOD2cefKvgg2Ml3WSW+hkXEr2ikpq3cbxxiOXi8hosb3/i0x0N
x37VMrCVG2ltlKKrcQYjZgfQSNQVnyr07JQ1xtBStLtU5FllY7m7kN71Mlld
FMagzTLHNpTxxtyRPVOsxMmbuZzQhrNutIVQ/Eyh9ms4zi4lZL1MJWJ8IDtl
nQ9uqKZdfBojPE3FcFc1e3s54WVQQh1Zn9ueh3E6zEyccs+nbLINztNNxOQ1
gWw7GUevZZbC5pdYhn4M4/m9HCrWVmDT24vGdsZitEkKO4wTuScsREyDDOL0
TrQ6nSf1sZThgzLosaGQ2F3pXC53JrK0mWixxExEv3CiTk4pZm3CCX/qx54s
c7H1gUJ035PIRumqLy8oxNRt8ejmK8XB98XsWmaD5YIKnt0ro8stdwraFZD9
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
9ryQjn59Ik26euFamMjaywrRsiyRPrU8cWtrJDp2qiE0Q4OpbZBFg1bG4r+5
kl12JnD0dxL1ZoVy8rKeT41cyFV+xHZ3BG0maDh6zR77RpGS+2NYHxnLzTkq
8flmOs0CkumtMxC3X1iKLreCOXTLRDQriqb4RTBXGhmJf0x/Umd/Ludq6Gk6
uJLW857T6YSehBfWFE78Qg3pgrseSEe45Msxf292Pk6BZ7aYb69kd0E8QV18
uTPKXFx4mczt8+4slS4f+CCR86dd+ccml5JrkWyRrjT0bhkfZqSjPuvMq8wS
GvaqLVq4epJ6UCFUyyuxHpJEwsEYFt6K5qfklEEPklk8LgnD5b9476oULedn
U3DpPpOMDEWd7mE0tvXh6bFCHreMps3KUMZkKMSoFkmk/PRkXYKF6NU+ipfx
v6U7KESTUwZiRUNnaj8rJzlbJUb2yGJ3SjQtz7uQIhnsVj0NPdrJbt4TSPWR
fFbMlFw3NY66foVYr45mwskASu4ZigzDDGb38iMqvxKjnm5YHpF3XaOAdao4
RjZyRWVeBrk53E9y45p/DUFRJiMG/yAo3VR43k7lSj9/StXmQj01k9ThWdRW
1xIjR6czf3IIPsV6/utRyjKZFaooNc7dk2i40ZnQgdnM8gmg995fxHTN4834
EtacccRN9nJcqzri1IEYntQxEG9nZTGtvJobv1Qi/IxSbDwWwoSaudScXMok
6xe0fq4Qlb2CJV/asOCxUiSNSePs8kQyuhaz5F4xnWar0X9Siq5vKumUHsu9
0lx+TUmln20EWq1CXJfOH+zkz72IVP4x1xFn7EtiOy3BMSHknXfirkEuY7sV
oz4XyK3r+WiHltGnQSrnJuup87CY/+ZEE7DBQCSFKEVGmZzJ/73PQ2kwf69x
YeeiOC75F7PmnQ3tJJsdv6lh8d+pDPyaRdXzPN7W8KUgNhbF8yAefY4kJr6C
7yMLGPEnkZP25bRLUYgWIyN5J7Pu6Q4di48lY/8ula3fkhgQFMowr2hM42JJ
XuaFUCRhdzod1Vo1Aa0TOevuQPsL8r7WlnPWxIlTZTE021DN8aQi8v3URC3I
ZYfkhJdXQmlakE13VTmP2nvzcXK5PLdsrkhntN5dwITqENpWa7iVl8SEYRqO
SJ96rzIUJ6+4M6K3L2Gdcgn+5s4ntT8L86WP9gtDo4ylfes0DLNyODNDIYJb
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
AqL/kfkbrSGgWxltcoukqxqIC68LSexkz4Ua6aGjoogpd6FXjrGYHyM9d64v
15IV4vyLSu7Y+3G+Uw1221MJTLNBc1chhs5JxdI7gN2TirhzRYv9O1/67FUz
70IR8X9E09vAn1yfMr5fSqG5ib7Y0jiVLiIEkzU6mTm/ONEzitsGhmLyP/qi
hAiM9LMpmluJ3bOvxK3IplWY3OPhdiyMLGXP7DJaH/zF5CeSk7t6YdHBjTqd
9cUUmwxaJ78ipn0pbr+qOVb+i8aJOfzbMZKPerY8NQpj7qFypsms2emZzfNX
RSzfGcL9NlUcnx1GA3NrLh03FkEVOloq0ki/ko9FiA82o0I4kqRhwOJUav90
oV1fHYNn5fBn+G9u/Ciipn06IxMiOVhWR9grQ3kx15+Hn7MxOejMvblfmbai
iOejM9jPL4wqstm1z1C0eqrG4l0wM6OdGWitIb9hLpGXaomSDtn2Zw7jZJ5+
zougUaM0eXZawnvHkVBQS/O1BaxRxxDWJYUWa5PYXpSEXbMsOpj5c7rXd+Ii
CzEaVESmSxQ3FivFNTnr1Rbh5Dwv46b0+oo1Plwq0LK0NIan9t8JuV6AruYT
Xz460fe1UkRG5ODx9jHLzC2EYoSBeCuzstcoffGkn5G48TSEKC+FUK/NQG3q
gvcePRFsW8OyWEeGbSlC0z+Xhu2kN6QaiKj4DOYPCeKTzMRpezUcWpLI76dp
hJoHUpEYg86lvvBVK8W4mAgscpSij5tSrFzixkuPIs7af6NtYRDzog1E292y
DsIc8HA2Ff/6a2hd6M7bR9GEb0qj1iaBM1eyKZA1Nt8mkKzZ8Wy+4EVAvx/U
M8zgzqev/Dn/I8Z99YVlSD4Dm3pj1l3OyJAfTIu0QbimsMlb1vBkT8bcNha2
gyKwP+LFqM71hWdWCV4BP3mVmMalmLpido8YZo1yInBiKsUyDy/7x2HZ0lTU
X57L06MGIvhnFQHSc4ovlOGzJ4jfPX6w8aK+MJVcf/OeLw7/llH7OoV/Uv15
5KwQJovkfhl9pd8DLU5OP6ke5UKWnMcv+huKcbYhtLQyFw+aNhAP/9Fx4mQa
f5xQ8+RRNk96K8Req9/4rHXi+l9y3lR4k+urpsHJVLp5+RA9zZ2Cpgbi5tkM
9MzD8FhiJp5viKFVXgCH9HO5vjUIuWj06puI7CG5XJZeFrAuBQaV4hOo5keR
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
c0ctc1upxOqBjiTtNhVTppSj0/uF5f4U9o9IwmSAO32k12eZ5jPnvDXNPFQi
MNNE2P73LCD3RmKf7KN9c3341URfKMOzeb86ie+dVaLw71Iu1i8E73CuHHRh
wVE3RvZLoMcdH/ate00D6XGLjdWkFUXyxwpDsbRdBo578+hrkE5AgVLEhrvx
NTaSFy/z6DImhd75+fT9pmX0nkjmz9AT399nMb4gDO+vRuLfLlX8IzLZp1dD
M1lPsQszuRlZgH/reLbcsKVkZiIJdaQzLPdnkZdKRNzO4M/TLnzYreP4jlwG
LonhysZw9vQzFCsS3WSv57P0eBXTHKOYtSSXkgVKcWqbjZwTGQzqqxBb1riy
e5xKOC7UENE/hEtDTcS4Vz50vO7Ki9HVVDyOosvYAIa4q4SmoIzTc5y5NbOU
tlYaFji7k3g4lka9islZEoneTcmN6aW8HxqAMNUT57O9+VweTOL+EL6uycdr
TiI3yrPkmnQ0KQrm2MEMpjRJ4tQwD8atryP+bZbLJaNQPn/J4rBHIQeeeTJ7
lAabkjJUZll4TMzCu0s8D/USGDq7mIcbfzHwmxubBxsJx/kVbLVwpFH7ajKv
lLLhv9+Nx6ZjXyeTTak+TGmnL86+TMbXJowkJ4Uo+sONdXGeDPkrh1qZs64L
vHjhUs6c6AIOv1Yz9qhSjPrTUHRcFsLq4Hqi1S0tAxY54dLJmyG74lhY6MrU
Y/LculdTu8eL9teT2OyUzKdmLpyvLOHU4hpqKj1p39dADE7Jo7hpHhMlg6/v
LDmjuz8/VlZjeViL0HPFcXMBE/W03FiRjGvXYgzfxzC2UxA7VubhkB5Ndhdf
WqBjgbmWehPdeZBhKCwj9cVOnTPTe0eybKS+yP4Vz6kX4Zy6ksvSI54MfmIi
7tfG073pZ9pL7pzUVM3SAw50nl7L+DMavgW78rRnGo+dcggWtlhuyCdmlqlI
+hLG41YlNB7pR8P1oQx2MhAhySXcmvuLbRaVbLlmIraahvF5r6lQDDQR842K
MGlYxQ1UImGZO26D8piVmsUyYydayXy4El3OpvYhKK8ZCrf12QyWnBA1ViEe
/875//f/jW4sf6b8OKV9FJGnq6nbzVgUlDjScWIi2Wdai44z1EztbCqc75qJ
ZQ8zsfdJ5M4WNX/99qGTaTIWn6Po2P429w0zcZ+fyfcBEayd54rXvSTePUmm
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
0M205/84OqvwKq+ui554QgghENzdKS4FxoLilELxFncpWtyKuxX34g7BIZAQ
4glxd3eXE/f8+/9uucn77r3WnGM8CedovuvL6uYp3Lvk9L/f1Zj1NZXpH0NZ
Y1rKqpIqXqzIpGS6njTW05OThvHEr80nPSWcVRODONNS+edUX9wehhP3pIpl
Q/Uk+nMqs6vymLwhn+Dh3nQtiON8YSYTJrjhGV/Mj+lxfPw1kZUdTORj5xzs
n3/l/PVaUi7UYlb5kZHfPlK+7jPWNrdY8oe+rDhfwrsBr1lzvZ7EvjeS4tWf
aGutI1fP6kmvwE9c+2Eo3ZZn0HOANzNH1ZP+ZrkUmzjxvkF9Ed8Ivn+NI6Sp
Yh6faH48iyV8UBtZvjyNlCF2NKnUkxM30lnQMYrUgwYyuFoj12Y6ETa+iDaH
MjncwZM9czQy8Z5Gkpy8eXzUUI5HxtJ7wBcmBlZQzyGCad88eO2lkZtL47Gc
7MQl5YlOF/RlysACgq8WsWypsehWReOizaXhtySm9ovFVHlS4HSNeD4K5vdO
KbT/Wk5c00+MT8zBpypEcbUPdplaltT4ckvxwvrEYqqHeuAW6E7Jqzpy0yWJ
OWPDeL2mlBfxKtsvezGpsBBNSBY1epFE6hvLoVmpFIwvh4W68ud+dxatS6do
bChtbqWwvJ4vu2KLsQ2voqOtF8+a6EnN+AoWtPenyx0TqUzI4++2gZibGsli
0xhszFVWh2TT4bM3p6Y7E3c8ipDf/Zht5kWvF0W0/6mIPaWhhF6JYdXRQrQ/
BTI5sZKxWbqycrQtZ2YUMNYnhPdXgulpqNywv454/uHDw9bq7s6E0r8iGueN
mXT6HMDYWbVMqI3nz3aJ+Nvm0fmXQs6pXW+REYxdjzQ6hhXx5Wo6zRRXtOqn
eHFQOE/Na7n6ex46/zhRYpGPlW8SlV1smXAsnX/qudF3qxvN9irvz1LscM6Z
2Mf60tanhPPKq7Y1MxT956qL+/sxcGoRJYSTPcaLE/MMZP+IUloW+hCZrCOW
VhrJvhjM690VxH8zkKfvIjnrXsiQowbSe0oke94VEeFdwsRFdrSvLiDQqZCy
XF8+jvInvWU1F955cXuYKy88Iihd+I29CyMoCInGJtGTFtsCeBWdjZP4Ubos
kQbz03C39WODvY5kxmSRvNGNOicy+N40iccTPKn5p4ITH8qoUndX7VbJ+pcl
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
FObr68n+nlcoCnyG1fBmcrRBIRbvPdm4TSOf3VpKQq9PFCwpJWebjpR6JTAp
LJxDvz3lRts8Tu/Mpa1VI9nWO4SGY5Ow3JpFpHUkI++UcqNlOZkfi2mno3zT
rY743szkgGccYa+SmRMczuc8D6aP+UANwVwb4UTrdu+43deXeH1/auuF8uJw
JEvXurFvcCLRyrd3aZP5OCNR3aU/V8OC+TZFX7oPVW6ZbM/xmnBeRKt+9vqP
MbfeY99UI36PPuAz6SlL/0uj8mkuFQ2aSZJi5caV+vIgq+x/n8fU8p/GUuCe
wFYrV7ZPbyD6navJDY/ja7mp7P0lh4fmef/7jLiw2ire3ktB+zSP8YtSWfc1
ijdtfTh49TlvVlmzsXEK6x+G0Kb6DqmNwjk5T83UvUhGf69kRFoS9lvU7urr
yFZnHXk3QnlCoKVcbNdYEm3LqHhQSfEaXWlwzh8bwzS+NgvA6Ns1vD30pGnL
Qs7M/MRQW0NZOSiSf8eFs2ZRHndUJ7j8U8DikXkc+B5A4XEvztzVl+UHS3lz
z5qWy/O42SeVrXhxN6qA3e0VwynfHxJfTr0/ipGUQHK8Khm+OIVm556zbkUB
N+fUqjMIxv1wNH6ftFz65odfSSWyrYqZu2xxOmsgVxZF0WKl+vfSHKzUvs7t
5MuDRdXMrKsri0eqOZwQg9Y7Hrtv7ygbEEJdtaPtcr4T2lJLpx1lXK0J5uvE
aoY2LGDWuXCSVudgVlhLbLg/hqWFHLAqp0s/F5aYFTHzXA22231JeJWIwbgY
3gyJxqyoiq0Lg+jiH8nVjAr611QT/SSOR2/1pfBkDAcM1B7/VsO+ToV8/+FD
zY///5xwHfnaO5g3u7W8jMjhe4Hy6kgtye+i+KNXCL2UU2rsovnLP5wP5em4
lSeyr78Tu++WUr0mgKevAvgrLAXvDn70fq1c6Vk+n25FM/a6JyGn9EXv72Am
t3QgKUdfUr2zCK8bTJm5li5t0mkXEY/hDH3xPZrHEdsIGhcZyn6jWryK/Tiy
0lQyehjJh9xMCm+YSsSeCBwU9xlWG4julijqbfKhrp3K9Gmx9CCZfaFhNP6U
xrSKWCb3SGewnSvv6gWwIKqcs6OyMDN0ofkoXZnXJZ6m1tncm1qM2/YYii4G
ovuiBl27Kpz+y6TNbw3kbd9iXFziSUytIxbb4rgd48zF10XUu67lxwh/JiVl
03tWHOYbgjFbayCWa3IwqI3g1uNaToaWM3SVA/1GFOC4XiMHe3tgODeDLKcK
CkZGkfb/v6/0qqbtI/UOujoyfGQcm7or74ssxeWrrrS1jifug56MWVqL/Zsw
2hgayPKuOpL4wZkku1w6ORTjlPmejy4xzG1iLBP+jGP4UiN5fTWBawtTcdih
KzO3+HKlJIsE+2wmT0lkcWE86w9qGf+kgs8d8hhRGkDL3yoYeUhfOn9Jo93Z
NDYeiWd1az1ZODaL4f8EYDdCI+fGFBG9PIrgxspHGpVzWlPA71GJ3NcPptnA
XMJXFfzv/4ZO2/6D3kfzyenrxUO/d7itKsU2PQG7XU6YNizDxzCRqScc6Rfq
w1PFIa3/tsX5jBdH1ieR18CDm43f497UkwFeafQ9GY2vzzfW1wth5nIvbr5I
Z+WjBHwOfSLDNIrPI72oVA7zU24BYY7vGTPFXJJtM1nSyZ2X8yqJaRqD6Xk3
ev7/98DaapGjYcz9NY0dUblcUL0WNiiTufuKmb0mBo8/q2hnYiB9Q8PpMzGP
pu9rCQ7O48/1uvLjskZS6nsxqJ2RzO2lkdzNbznXyEQ2vdCXCU88SPLUkR37
dOTZNdXFo76S/LaUsLmKV90jeRaQSMGWWAxa5LFeG0fzfSk0v2opOeZ1JKZN
CNeGd5asPRbS7JUV8wLMZNrR5mL3xp6OztFYHKnFwiSMsSu0nB7kyBZrX2p9
E/ia68XAP0KwmhXB3Z1OROfZ0mvjF6YbnsW2+htPjvqwcOxNbCYFcNTOTKze
JfPgzg/++NZZvP7zY56nH/9MbCt9/81lyVoPIj2iWOt2n8lzn3LylxIcOmVR
XKXlgUUDOb2noew9Fk9aL3Pp82sM7+sF8ehEV3GMN5BzP0Jw7NJCWjqYy/sV
8QweZigL91ax4mkqKXvaiNk7C0kPNJGZJlmcck0nqZOefNLPJvuqkQwrSOFo
qJbJ243F4LdqDrkZyP6hlVz3yqC9OuMttrryx/REyoYEc0T5/rht3/jWrxzL
WA+6JeaT3CmXX0pV1hdH0fTqDwZ4hNO2VxK6N9OYvC+UScOdaeBaRrGjgewq
TKL8tA0ZVRpJKAri0B4PftntS6P23wmoVhlu447lunha/f4F65k/sOa76nU3
drRJ5ohuNB/0QhnsHsWV6QkcDlZsE1yAa40D95S77d6bhUW7DOb5GsqOKbnk
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
R4Zyfl0rST8ax7eu1dzVM5bIz7HoTU5lWOcPbPr3CHcVj+s5aaTHwyRCnJMZ
MK6ZzLVOxNIikom/FJO+/bjKCS8SE1pI7VhH2jWzQlvUSJ4ENZA9G6Oot6qB
mESn49DqK/+0DMfwiz1NnV2Y553IYrU77k2j+bHHVFZt7S53QyKxqRooWqNe
8uOVPzg1kIyHnvzy6g2Hf8+h06WnhA31ZM3IpnKyVw0W80P5W3FTXXFE730w
P5ensKvuEYYFROPr/55e7T6ypq4ff79xwPXKv9QcsqHkagnHzW/QI9ga60km
4lkVTN9VoXQrNJCHnhX0ORZD29o8ng6NpfeyYIKHutPnbQ6Xd/kTZ5jLiokp
yg9juD01iUZxQbhfrSRvrw3v+j3melsD6XS6iB/uR/l3nnKQIhM5kvk3b2pD
qRdgIWd8HzBNdfD3Fo3l0W11r71NRVuq9mxgDUsU09svK4MvUQxaE82E2zn8
viaCx0uz+bGzHPuVrSV+hpE8bhHFlRCNrDYKJCCtmMh5OvJurQOnpmbis1dl
onUSF97GEX6ogFvjI5kREYZeuK5sau/O1jqJrIpNYVLHd7TybCrTe5TyuJk9
w36vI+F3qgi1uoP3jngm3Q2jJu0COrO/k7nlBG2Ng/CL9eWY4zNWWbiyKKqQ
n2an0jPIn6ywurKowEDkiDXFRnXkv/N15Ew9H5VldcTOQMuMbxmYbSykxWoj
2bcjnL5DDGTn4rqyYowrnn46sutrJeMqMhjjHMipVjFEzU3ji10Wy6sL6B/m
z9BjtcyvNJK3+/0ZXK0jbRaZyOVlcfwRV0rnPhrpVKtld3USU/7NJ/lRzP+c
/PbCUnqo7OsYn8b15e+JOelLRG4SmpFhfIwK5evhco4MzsXsiR39p1SQdauM
+fKNx6ZagvT1pNA8mP0N9cSluojKvom0issip5U7Q/t84s4RP5qf9+KPPuH4
7dES+S6LfVei+PVZCZ9sk7gUHc3t2mBsEyOQmZ9Vf2g5rbxw4BcPDNbnYJmZ
yaHeLvicqKKlWQIbHRzQGZXEghZF1ER9xPJ9FjO2BtA8+jWTL+rJOXUOXfe7
szpHI3aTiojNyODjk2o+Pc5l32U3ypRTmXSu5aVnKlkjcqmtKGFkLy9G/1fA
+YVh9Jzwg2UtQ+nVzREv/w+k3Uylw2ZPfp3n+r+/zTjsmsrOb7G88qsgQ1cj
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
EEY1SUw42UyMmq8p5h6NJL6wlhU12QzJDWSmxLQHTmWyr707fXtlM2iprvAl
Hp38GlQBvuya6kT2IGPhtjST1d2dGPuzgpQ+deAQKLliJKXhcezp40vWrd/c
7uSG52Rv4g4nU/WqhBbH46ncri16mcVjfC6NVjnaIutyHk9PuuKkIROyyQl8
eujHzd3aQm9FCoseevFUv6l4E55J3EI58+XVmO8tZunxYNb4pfNV6pirqX/J
7iZ1e3gWHu89eFljJNbHhKO2cMCtZQPyJ7l0G5VJ51v6ot20QoyuBdBpjky8
0qzl8Mtg2t4rpkBezsZW7gS6a4ituxXE+8l5cVDB/FlubPIOlfxNzdx5KRi3
yCTYtLEwWppG56X+LL6sK0wm50sc5sWIIQm0eZWAm7UDk9ZloeWWxph53iy7
WoFqUBWRUV5kbqlDjJGj8g5D84HEDmZybFum4T5DjUmvIiZL/PdKyrXPU0vJ
bqwiyKKe3IZ6RqjC+dSzgjHyPOq7xnNsRBrFzSIZqRfNIRspnzsaiP9iApj+
j564f1RTfMnzY5bEWSfGRVL0JIB3z+vRzksidot0PYtyaBhTzJYrEXxq1sAC
3wKq/o3kP+lZbZ0QSKb9NzzbqLG7Vcn99360WKAl8g2imajtSJMexuLJBx8G
hrhgJv3Ozq0ikY10o7xBSzyPVTBG6qS8+gbcvknXfsmfoEWlbH+SiePxLE7u
qWbzl1pWSxl61lJbBMZpihm2vrztrSOq8/I42kzqzA+VhLqkY9CiAoPPFWy1
SueU+EnyxHKM28azLCcYk6GaYvbbdEaPiObvimq+9tcRg9sE8N8ZTREdLxPX
W+ZxvEGFflksHZIjyJpdQOqjOI5t9KP/tEqWGqgIyZL25Gk5F0anc36QN+9G
aom1C7N5ax5CS1ND8Se5gu/GoXQO0xUXp0l+viGMDEcVyvsRzDjny+3LSUR/
SSDyhA9b2iZxx7OeCVNSebivnvpmahaN/0W4sdStV1Pxq3YhxaiI1pO0hW1j
B953r2FY/yDyrXzocSeGCf5WfJqZQYjCQMxVRpB2057JzTSE82JN8e69Jev+
xmMiuefZI/ZsOZKI04UsQixD6L+wlFVtEjk5PI69PTI4NiYM7S2p9Ftfyen4
GL4WhVDyU1PM2l3NuGyJeUIzOdRCOl9XfZiYlsHhp7m8c41m2YMCHpsmcCAz
AMOJybw5kMOOaeEMnpHB2y9+9HkSROgdDfFxfhaLFodxoVkmOruyyfD35mZt
Co3S01lh/5VNt7PQTaxl3X0buvynZnClM/OcFTgXJXNDYsKFEyMZcDuPZXlZ
TN4SRLKFTHx8E8OzaBcCelUQ8iuCHb7RxFeVY2GhIXatSeHu7TIuL4jjwxgX
JrWOxK3oI8t6OjLkwC9CLCyZsvotE/slozU9g/ZLvrBgdinNfhTS/6wt2ral
bJD6UetSPK2yajmlXc+2O2EoJqZjFBDAGsdgsqXe67LIhdD+j0kLyWBIvQMD
XB5wcUIt8T20xeEfL6nYbChWhmiIdY3vMMjGTDy0NBaFIa7Sc0/kYEw2K6vd
cfw3gel/dIThA2mXajRE/0tSvkiM6OgrMeKIGBo9VvDyhpZY4P4I428JJGc3
Fyv32CN7G8OwOg0xW3LI1j2DWDPClZvVH/AbH0XngSHcOP6OFm7p/LptIjzO
JTJMpmDayfbC8o5M9BxcxDU6i82jJA6fUMk/3gbiYF4h32JjaG6Vy5Fuiejr
x2C7LxwLqygyJR5NmhLOoMdOrLuVwo/RoWgcS2ai5FDDKlxxnpvJmn0uuMR4
8SZdiWPPZ8xWp7PeTIlxogcFlRGUtwwm9I8/y/tlc+aYTCS1d8C3qoFr9tpi
fF8fjvvpinvtW4r/fZbTxY/64uwoHWHhoi1WfdYXjde0FKeby0RJvuSnQ8YJ
K80UhvRqKnZ0aiv+XEnH50R/ETG3pRjaLJyqN43FpyZmopmUXdOFWuKIHA7Z
hrPItBB7ySO2bbbgo8TO/75S4/vdigs3Cxgpj8J2rh1LbZKYafuJ1jP/smBi
KPnrnnH/sD8H9umJ5kZqKmMimTlaSzSJ0BFn1uTRb2I1/41I50CpH5HGKhT3
/LDUiKandQMetzM52DudyxXVlMcX8LpjAKHRumJAtkzodg3FvlBPWDRrJM5Y
BGN4I4OB0xLQHG1HK9Nyil/VMdY8jtMt4lH38WJ3mwgGSTmwJEPO42tJjE6X
iarIBP7dJqexXz4DGinZZuWIy6Zixoz2YO3fCOTWBmJf52L6OMRSfk0m2nbJ
5L9lrnS/Xkn/H8mUh3sRsFgmgk5piSRvR+b1y8LWMhv9vb7cGRvHiM8uqK+4
8mVsDic2pmFAMv1H1BHZoQ6Dpwl0aift6aV6op/JsXSKx/NQCe+cley5VMYg
lZZ4NTiFgAMqZrfIZt4lK0ZJz+ekvyvHLsrp166ej4u8eJsTxijdWqaeUFL6
MJK2a+OYJ4/G3DKRe1dKeb6gll+Nwul/TyaurCzk4X++bKpXU9G0hAVOjlg8
qCBuiJK7juG8dUtCDJQJixUu5Et5VUwFgQbxvGysKbZe0xSvU0PYs6qK+42i
2KLIxm2OgXgQJt1nQhYHAjMwS6rickMMnYdX8fBxIlmfY+h4Nx/f7qm0s46l
x/U0+s/I5OnTODpKfr3oYDa9ct3hj6Y4Kssi9VowdK4j3yad9skOPDQs5uIg
Nesz3DE/YCCKuqmkMx1E46aaQudwLNel/truUMuBo0riu8XjJM3RrbVMfDoa
j/Y6HfHwUAPNyGCUawpbWqu5lRHKmNsyMdmtiJ4/I5FvLmZIcy3xzTeX48uz
WD+pjOmS9yYszSbRNgKvqETGPavntYUKv2exmEaHcPF+JhsSYmjxbxE+nbVF
12HuNKvRFkN7ZhN/NJn03GqSu9bw4oLUeX3rKfipYpcsjq/LZeLwsVgKYn0w
6hNJ+Hgr8la95+vXdPx6qzi9wZofXes4MVxNrkcSo1ppiLHVCUR5pLH3f68v
3FATPT6c89HSHLNSaTjvy46EEobvrOHKC3cqtLLQTy3nyaR0POy0RNoqDypf
eONbrSM+R4dzcbAriesbiVv29fi3UNAJDSEbF0fhQRfa/hNKVbNAGu93x3Rh
Be0cC1nWKYDWLjF4+xfye5L07xIn7nueR5N1AbSL0hWD3RNR3gvF+rmOGDoh
gOToUFJSlWzYqOC1eS5P36WSvCOLPmO9qTBVc2VQEuotLixTFjNgRAp13v74
lmfx4bOSbusjOLRBJi6vUHLzbCgTOyqZMiOGH3WZpL4rJEtywDt3PKnpm8Pu
AjW9Y5yZ7RiDYkIVy4eFk/0zgX6fk+j4Jwq7llUE6CaTHOPBPJkKsws5GA2S
43U3ksij+XzPTaR+YQ7Pc9Kx8w1n8XkVDh2z+Ho+k8w9Ul8ba4nkkWlM+5CP
RMSi+KYCnR5aotcKTdG0xo1/B6eSJDnmvdu5nMzLYMEDNavuW7HdPoR2lbeY
/mY/Wz6VcGR2NNcMf7OmUQjHimuxbecvmWAhPRf602D7lRyJ++M0HEha4cDy
7D8cH2PO9bfvKX0bSFqQFzkvrejdNwyte5607/ib4FkFhPkV8veEJyn7lWwd
WEQH858s3WRNwCEla3r5MfeKu5RLChymZ3O2azgeGy3JeubO2POh3NIM5ZVD
PAmXgrDRe8Sldu+oGK8pSuZ+Zt7I57hUNBXeRzRE6qDfRM9Jxcg7miN7FJTG
+kuO5cjdla6sex3FroRILF5k0NyhirdT5LQbm8WXSd1FkL2WGBkaxZ1xmuLq
RR+yE724elJJ3rcX3DB2o831ZJpne9DteQhBXYIxdbTH95UbuwaryFyUh7HU
G0lv6ygboCMmb4pHb1kSdv7V9D8dTp1zPt0DdIXt3Fj+k/KliVpf3PdJos+7
IuwzK+ml8MLgWjwL5cYiqFrNyrVaYtLG5iIpoJy1ZU3FrNJsPs0q5XPXpqJ5
RjkzOydgf0fi34lNhKNhBueUMnF8SgGGCfHM8pK8u3EZXmO9UH1uLDIHljHF
y4YwYx2RTAMO97+hM6yGf02cSXS9y/N+muKk1Inmk2OojNYQg0c1Fh23ejCn
XnKHYZXMNXbC8GEJ1S9i6ZNth+EnHfHf+SrWvUvjb9dyTDfnozU3jkszkrC5
4o2elzNGXlIGTE7lWD+Jq7/JxFkps9IskwkaX8S252lY9o8maK2heBOZiUnn
LB7b6YpCTz0R7xzEnrBa7BIjqEywZXDvEv4WykS3lnIU/2YxpsyBre+9WW9n
IG4eTuJKpyTM9jUSD/+tYEi1nNmmudyeU8P7o06s35xL9vQqjp4I5/X61uKK
jo5ocdOND6ENbJiTxshPIdKMjMSQ1hKf73Rgc4SGOGqpIewfR7N+QTnDg6p5
V54qeWMt9oFlxO9JJXyjjvj1ppbIrtLeXNMW3WbV09vaj5dSf84xk4ncrrEs
OKIl9tumkhCfTePeRVi91xTvr9cQtTIX7fd1pMTJufeoAJOVSoZ+jMLsRhpv
DwZKGRmEnr6K+qf1nI+SU+xWgd3qImqeBrJnURNhfDEF7weZqHdpithvBSS4
RNMoo5orkxIYsMiB3LYVJN7OJv9UMk9HV6PYUcv3NsGYPatEubKOtXcVrHHQ
FzaJufj3UjCorhqTPmmMNQ3G10xfHOmRQunlNJIUlUTdzCZ9SSDDm0jf8yuU
kh/hmM1WsO92BqXrFFgmpLLoSDrO2xP4PqeWJglJrHJOQC+4hkaNw+kVr2ay
eyEm9lFstkhgxQvJYZs28GtiANUjEmCjhjA9GEFdiuQ6CZksHFiAv8QWK9xV
+C+K51UPFW/maQv7266Mkp7rxfwiNh6J4vjIOiwjcln7LJzoJxrC90Q98oBg
aacKeCB1WPUHD8b9V8nKe1m4SV6zNq2QixvSuBXkTdOgIvqXVNPWTUH3ORnk
OiZQ8SaE1ANljAiUibi/YdxILZB8ooyxE/wo1S5lyTMlf5MC6d7bWCSPkonn
ThFsul/ITqcSnL3k6Ejus6nAmZHx3hw+noBDnjS3ejeGhddjf6CRmLM7GGXP
elY2ruCx8CT3vpEovJHPr6FxGC7UENffFmC11ov9x0uptNQTPuV/ab6skve9
kngo82bKTx2xJD6X05Ijrwqv5EWvKAItHDk8USaUR/LpH27JkW0awvhDOTtG
BPHiXDUz/2ZjvtuBlffT0bfMp6unF9uXynHtnsy1iRmcCM5ljm0GmZPCmWxX
R8+IFNQm2Wx6oGT3M8lJWgXQfnwyN08k8nJ4DGeyKklqWYlOqgO3JK4/0rUA
12222Nnlo90yFtVrR8YHqLjyI5jvkq/tWlfIzPAqAn9Ho1iUyZfTCg4l2rCn
sIrsgCxGp8XzYU8wi/Z5U9rEjQmqRI7HFlERGcuioBI+rqtCPTOZq7NkYvgl
R6aH+PCtg0z4VdXyeHsy3StieP4mnSPjvXiwvYRSo1JS9ePZo13CUysl8jZ/
qAuoonyJitez01hVUMCOpTm4ensRInVkk1M17Pw3mRlF0v2lu/B4YyaXB7cQ
BWc7i8MGAWz7Ku2UxE+aez/RJaOOPjr+eFve4Wt2DXMGJ6BtZ87J0nRcsvwx
1zlDWZMs2s5x59aD5xzNDmV53nWMnt5knGYiq69aMrvXQ5wlL8zS/on62TPS
p8Tz9LCmODDVj/17XkPTn0QddubTnDiU/XPpKvl+Qk4O1lLnjB9hyYoJTcWF
QW7c1PD///erT98fwEFzT042hOEz0IogMxvevotm62IPYvRseD5IW+x5rS2G
/8qRHNlQLDHXF3tnJhI4PU/qszCSnWOwnK3Cc1oG83+HM6BPCm+6f+fSrkhM
QvXFrFMZHLKxovGCADYse8k/F24zf0wW1ves6djqL49WZDGh1o2hrb9zyL+e
rodCWZXsyJkVdTgmpTB8bDQL22sJv+F5rH9pz8wteuLhrVIefvQhMElHfP1h
IKwdXfg9IF3yacnr9GMZKi9hz0gNcSLWFjMTJc4vZWKxRiQrDVQYDrGl43mJ
IW5KLvMrhOqwrwywNhJGq1VsuBqI3x+Z2Friwvrrvzm5o5jpV8P4r/V7XJ5r
iDsKP7zq0jjqoicaArOYciMJd9cW4l2UhvjX0JUxISl47g2i7QEvcivUnJ4V
Tub9QMbdNxA75qr4lhLMMMk9E7ZWcFDpTUeJoUYZlGDczxHHfTqi9cMC5h0O
YWNnyS0epbJxoTvDZtUiF2EcHBbGxI3hGF6XI/PywblUV2waaSR8JS6d37Sp
uJ2fz+gGf/YsbyaCpd292zseq0NqVvfJYXZwAi9Wx/NLx5LWniE0mezF15lh
pB3yReZTTcyiDFZLjj4rR184L1Ox8l93wvJqaJuiJ7lkHOenVBAxOY2gmnDU
k2SidH0qk4e4saNCSyxfUodirpxTHuW8N5HYPiCT0PYlLNtZy/4z3pTtreHj
iWysRDb/Xa9Dq1omwtrG8PtcGQrbelJmhaL1w1BMDpS8LPc3mRZ1xM7zJmew
Deb6WuLB22ounnRi/nYN8dakivquCpqvyMMkvBbLnFSG16u4ZJKDRRsF/VXV
KPWz+GarYoK+1Kv7Mmnz24V3R7XFz19ZdHvmw1Kp/2NaSrO7EM7E0iJs7fL4
s1aa4/AsKs/LxECPBOS5FTRtHEmXdlYYfczi0lZvzB9EEOgiE7N6qmhtlop6
qJZoeiyH9vkhaMyTCY0rMbw65M+sNpoip20YXt8iUWAgUk+W8uCEFzrfNMWL
W6mMNIvBpHkCtQmedJd2qFFEJdM6SflZXoDTEi0RU1OH7vQAsrWMRb2nhkgq
CqHD5XxsquQs2RnB2vdZ/PGJ5mFMDOfuVlIbmoajRR6D3WsoylUipIzt97SQ
+RaFREgu1cspl8sH6pkZE8TMphqiblsd9j9i6ftTVyR5FVI4IwLXPYYib2Ex
Y62D2JGRQ78/JVx5nU/CgFLufari3fwUDhkmUWVewRm5kiU7CgjvoilWhwQw
d1Ih32Y5UbHOhwSbQlpsyaK0hy2mrUs49Uk6U0FBrH4qE5375HJf8oxpmzTE
qGYFyIfm8GG8gXh/J5eN/2RjmlnKsU+FXA5NYbtnPTGx7qzYnEhQM0PhtTCL
y39DabHaWEQcz6ataRwhP3JoMkXF8hs5TE7TE0W76zE/F8qfFH0x7koys6us
iW9Tj6dWMhfuOBJxpJY13dNQDQ3nTUAe32yy+feQH4efF3NoSzBTuvhy6kEG
Q6ttuLVLytZQDRH9MZtxd8MwbJXGe+N8zNc5ErK5kMExkkd39MBrVAGzogK5
Ep9Ol2XhaF9Xcn+GgneyTObOL2WzWyZTbcIJfJvHwrV2kjNGcOVhKhp5vnzK
kdh4fAkjP6ey84GWsHqTy7G7GbwYl8WIlAhirMK5FCDtS3AYAw7HMMUig1Qp
U06VuHNhv6bIzyvkbZsY3J6VEpucjnevCN5IPHBIkcIznzf83J7Fyhoftvyw
YV2ulCdfEkhMl7hUpSM2mGuIRTMkrgg0Ed2PlvPOO5N+Thric1oJ6ikOOPyU
5mATjY1jKrtPNxa2EoP+KYtCfbSA/mHawrBDINPG5nPoXQb290IYGZhLqHQP
z4b4YfdLSbOgVCnzg3mrrSf23zIWyxplMiCnlXjo20Ssj3Xi8CkdMb1Nc3Gy
6iH9tmiKYSp9cSnEk/tLctFzKsa/1pVQ3UbivF0ATo2u0aqPihx/G3YMv8XL
iHSmWMVyPOYJAd5KTC/k8+CLEx1WBJJnGsjUdr5k1UYxZ8FnHE0/8eG7rrj2
wUDsdI0gqpF0di5KrnrajegBusLbokhinyQ+hjdQeTaK0/+F0OlANo/HpTL1
lh2KICXTHodzpJMt+v46Yo9BBCv62qGzR1tsH20klnSIRmmiKZ7cNBINW2NZ
7BdPzuVqLP9RkbY7jZkXPnK6xJd2BtnkyIII2+JHBwvJE7Lz+W+vL/NL6tim
JRODTqbx+4OS6989CVYn4PytiIRgZyZ29sdjTA1pR3NYNsifL3ba4qp0XpqG
ePDCx0DM2mcs1nbLIGB9MpsvqFg7JY6ZHf9wUG3L/uFy5DNiOJVqy1trOyYd
deZS0h9enPdhVk0pu5u8pnPHL/T70Fx8HSATya6OLK01Ej0rU9jZMRTdr6UU
LP/DlrUh3I/MZZ+fG/07RFGdq0J/jyd9pfsyl9yh6fx0+r/6zYkAHTHlfT5+
u2zZu07FX1OZWF4nx/ZrOcG9M+n+LYDgYn2h862YoRWhLOvQRDT/398OFQWg
EZHJklNxeHxyY6mPmgnzSkn55MksK5lQVGTSrbMbes61tHVUsXu0N+Ntawka
nklKF0/qtJqJX9EyccPkO9d+N/DCRUmRwofWkmvU2sZy93o01keMhL5pMlP3
VtJvWgLmoV8JCUtm+T9l/L1by8RJifzcXcNj/1y8Wrjyn3EtZckZXJa7UP9M
W4x6UsiNvxHcfPR/HJ1lWJvJ30YTXEoLdd96t+7enqm7u7u7u7tt2627b92p
4O7uBHeHAAGCwzv/9xNXUy6SZ+Y3930OSYiJ6DMtjZS4GMxWaFmQlMjweBsu
7Epne7wT+Vd9WTOgmvNW0l9yIviTqxRrwrK54hpO1ivd/38NUcKVaBqk64v0
NqW8a+XLiYO5fBucxo4uAaRWZsBxb57ouDMgU83Rb358cnNm0PJKVIc1bAv/
w9Hdpdzrl0qrgBjOxZawvJu+0FeF83pTKh99ayiJd+HIoXTujcpg+Tg39ljV
cuhgMQfCvSjI0RVNWsUQMi8Ci65aWpvm0+xnMJt3aimw1TD0QRhfz9Zyamos
XqbhdPYrIH9FMnsWROF0p5ohwpZ6f3w4VZFIkX8pzVIi0MvQE7v+NRKthgfj
Oa8Cy1kR/Bxri/2ZJGI9oqi2DaGdn6FwmKPm4scQDpRJnvk3lLW70/nQKhs9
eeZ/vPFmj6mW+c+zWP0ilpMfczGTLl66N5CY00oxYXEeE4QP7v1LWHE4na5b
/Olwsxj/HzH4Lkig3xI1vVsWELw0knZlBiLVLYFr55LlWZW9sEFN6oAQrpyv
ZdBhNQ8Px7DgnbGY+E4pYpY687/nYP8UZdFmcQL721bgIV3TdHYsdXrksdy9
grZbM8ktNxJ/iqLpOCGDjdJNDCvKOSR7/+MTDatbZBKW7cuiokiiHOOwt7bl
wZ0c2mwNIrJVpOTdCvquK2dbHz+23q7gYpqBGPI0ilrJFeteFhM/Kgc/rb5o
a5tA7tcI6v5TREKuZJiODswqSJVcnE/DH26EHalFM6yKibccibqnL+6WR/BR
HUR1nXwKb2QystCLqEAD8S1dngXxhqW7jcT9a3GEuAXwY2UiqT9+4xD9Ff/M
cqom6IqALb60u1VJ3tJYfr1w4eVhPfH0bQi7R9kx66aZiNaLY3lqMBNnm4td
cl2fG7uh7a4UT1qn4mJqT+PvxTzdrStuDH6Hdlwaq89EcKIkiV894kl3DWFx
v0w2pKXS2zCOBo5hXLytELtt89Bd5cvu7ynoGqv5dTeaTstS8DAMZFleMBU2
OmLm5WwS2tkwLqCClmnZ7NP5yflRNTiHRHOxVsWzXckYyLkMsfAn65q5+FJi
KL5a+aKfXUe0fV/NoyHWHNlpKhr3yOXI7niaXa8rLJboi1ACuK1jKuwb5vM2
1JVpH0zFzBk1rO3kTPfGSmFSL5d/TmfTYZuG++U5fB/nQ4C/jtDv5sgLNxVn
03WE5eYYls8NZbw2l/JFsVzbFE/vtrF0ty6k8fZAEgaZiS2LYpg70x7zsRF0
MMvkWre3nHRM58pChTjRK4B2V4zFvfPSTZqoKA01EmFCru86Z5KfFPA9q7kw
/CsKTfdS+u9oJibVV6FX1lqs+KuxWDcpgD8764lTFy2E3Y5PbNTP4VBSE3Fd
PwzxNJnLb6Vzv07lL5kh7x6reTfrF0fmmwj9FfVEzxw/drysJqe8jpj2J4LP
TVWY3TcX8fNVjOiRxOo+5qJAXvu1TwqhdqxkxisfMmLU5E2qYnO4FTcmF9LH
IB6yv+Hasq4431vmfr4nDz2z6BukJ/7zDsfygo64pN9APP4Sz69rWqpiYkjx
DyC3aSKmq+xQrHOjt1opsjboiKdDg9gs/d3uppEotshhnFseN7tlsW91Njbm
NXQfncBybQCtrukLs0w/zjslsjMkmZX1gyheksCg5kVE+/jTSVHIHE0cqvYK
UWnuQ+7MjzhoPpE60oNepjKnUly5n6j6/9+1Prv/hnU6zmwb6IN1e3f6Ke7T
/1IVpzJr2dTViR1eeiLXvByf3gFkHatg0a0AOsV4MWtWKf+sCOFBqD+Lxms4
uMuNhLIf6CqqWHfMlR3HfrL8eD7x5f97j+U3EroqxdA2EfQpsKXvnHLp3Uqh
szOMU09NxaH/SgnvHMkn6cUv3mfSuYMXY7/U8qJHCW0XRuKTUsr8dnkolrsR
UJzAgTYB2JglYRpSyin9LF7ruJL0n5k42qeGey8SaCK5qeHZap6diyP4lEJM
Scki0SWKUT0LmDI2kdB5CZg9VfGnuoRmQyO5PCyUVTd96Hg2hnq1STgo3Hl9
LJBbHXOpVhmKm1f9aXxBIbrtiuLAKj/GxFZS974lUZJh28+q5MTEKMI6+EN1
BZ9uFbG3UzBnmuXx38sCflyOZ2hcJQ2vq7k1O4LR0nN9DdPZctAVRSuFMOtW
ycU8N/xqdYTR81qGOkrfylOKafLcCUUGN9ppaTs2h24VeewgiiFe9qwOlewd
noXvkiie3g9EWUdXvG9RwLsaycZynSdM0OD+PpWnvYzEHsnBh6ojOXsvkXHp
Wrzv+RD5sxrN/mgWBTnzvb2h4I6JeHUsjmupCvFzeyFXXgaw5HM1RTeT6OqV
T9F5PbHaKo0QA3deDiil+H06dxZ402VNLW0fhvLe0YvsxsUEnvAkdqodNstS
+WMQQaOj7ixpWIhRoUJ8HxRG00Naljkk0GpRCPX35LN/vXTNw/6MN81lsl01
JvoB7HldwrhOUdJPomj1pAS3bXkM/BCEhaKEc9bybO/IYNz7UO78ikARlc+N
WC2219IxLyjkvlBj8j2L2RorlA/1hK9pDn3qu7Hvf59c28pAFPWPxEJPIcxr
dERncyfGrpA9WFrOkp7+jLPVFYavygifLHl4i1KcPVFJr9hA9gXmcNcpls6t
gmlhkcqjOtXMORhCR2MVhQ46YsPlJNZOqyVGk0Udmxg+zI3kjan0k6I4zB6o
qeeeTXBQJMMOJOKpk8LMG44MS9cTK8O86LM7m9oMDer1SbRLj6PDLKU46Z6H
UWAIgy4rxP3ucbyqk8LcK4bil00qLed5M3hlNrcHhmP6wYuYbB3B+lK29vDk
xYQK1t1IInB9DDttK4nQTSJ07WcO/jYU03eF8in4N3MzlcJzoYbZFUE8dFaK
Tf7SfX5HkaYfw+BIZw4vteF0fCn58bn82GxJSamFWPpOMvZWfyY1VXNP3ueK
KTYY1VMzP6aUr6sjKNPW0lzm1PYJ/lzoqCv+2RbJ7TkudN+SRUNfHXF3+ldW
WQeTVpPNqcm+9G9SSPoj6RsG35nWspbeoRl03OjJrrlK0c5bBT3lDDRVCpvb
dUV+CxUPr9RwqG8Jgwd5URRsLmxeqhhoaMPLujpi2Z8g4r/ZcCrDSGhblLP9
UwQzfliIcQ+17K6N5auqmFk3Irik8if8tp4YW5NKQS9L9M7oC6tRFfzcaENA
Xn1x8JhCNK34wbzUGg6+UYq5E3OxWm8g1ooqKn/6Y9pLy8ZjyTw444HuFF1R
sEEpNEN0xPA0ya56+eRf9qBzYSrXLJJxcvTjm2UNB1qVEvVTcuTIJIYbG4qf
VjbMfmEs3mbnsdFZuu/vJOqtzyVYuvdDlxqy803FX9ayw80LCW+tEMW6ORTI
zCmpW1+03CM91lRfDOpkKBZcj6fjPIWoL89h32l5jLqiZsurCioGZfPsQji9
9pWy/mUUAydl07VDEr+Ph9B0XSqTB8nreuTAxIZGor6yjtjzyY4hp82E/sUW
4uvSEJTDCrGVPbUvKYJjx1OpPNNONB2TgZs6gqXzu4mGQ/I5J8/bns3NxLfG
JTRtWczOdXG022PL2folfGylK77Vt0JxRbpARlNhcTaOaINUvqQ1EYOM8lg4
oZRHK41Ek/oReAarMKpxY9otBxyHZfNPt1xe4MFf2cbCf1FrEf0um7t7SvnS
Wkdc1CTx970qrqMn4sYEsGyXuZh8LwG92kBSVrcQvXpYsU1muvU/GQSbv+ZN
j2A6t/Hi9x0nEtpm8dXGAe/BtwhblcCDvV+YdPojwe7JTLRSCO9ThUTfc+SZ
fx6ba7z5MU2ug0hGx6qGwJXh5GxpKOJ19ET9+WHcXlZXlK8L59VuH6IG6Iox
9bOoXRRF6iJzcemBD66HwvgWpCPaDZe98s6WlRur2Lv7F/Os7QhMLaT+EU+C
X7zjiGSJtX2SePvElrWTFeJJRANx7mEaiy/XESkhedhfjebLU3PRQ/Jv5EkX
CkUB43dUs2iqM7OmFlK2UmavMhhVVQV3Nmdyb7JkjJ+6ortNFNcqQhlLNXuG
FdBeFUTYnwJc22poc9mWpn1iCJiTjef0OJZJDyh4qaZfP0fG747h5S2F+Jcg
LJ/nMzYll3dfgmn8Xy3fFoVz9rstN/o1EufD9cRbAw9GztEXn0tz+NQpBOve
aq665bPCxpPdtgU0W+DIqrUu6P5JZISLJz+OWbJgQSm7HlQR08adqw0VYnSr
PGZ9DMVcbShePtXQuSqGDWOk63tlMa2wisYH03F7UUCPNBXtF6qZ6OPGLuNA
ltTP5XNLB6Z3sSPzTyDGn5wZdcibqOa64nnzTNknRZxVlhK9UiH+sY2G+hlU
l5VwuMCeyUtNxKGtSdjZJVGiW8GIz7k8SLbj0H198e5/n7MT6E7BRhOx/GEJ
lw7FcEBZjn50KpcS/RjwsJbQXVmcXOLDq9uyNyXbPcz1Zt1VPfFzeDZLar0Z
XllJ98NGYpVZEI5zS8iaGIBtoBdDE5MZoO/DpdY+9DiVzuuafLZ38qCus77Q
/lQKC9tEzjUwE7VbI3C5Im8vKqd8Qi7t1rhQ0lZLkGM2OaXRzJO5OsnQXma6
nM1hZay6701D+yTSdBOIvBXC0hdZ9LNPJq8yGYfYTBL3yfv5lMaLl2F4ROqL
PKWGhwPC6HNEw6bkCoY1taLWo4I1ah2xfvw3evczFbeCcunYOQTjGWp2l5Ry
qIs38Z4K0WKVXEPJPV3b5jJPsmhcz0C8JV80M88kQs7TT8nij0vqCoOzfzjS
IR8bvVx2vArCqlU6pl+K+Fzmz/dshejQrZzcw7Es3JnMz/WWTFPH4dRfT/T3
C2XOJFt89PTFrIbFKMojWd5QR4z2rsL3diCp5/SEapIfjXZGsV7OUp+P4Tj1
+s0Vcz2x968EynJdmSDzMOFXNn1kz/plGoj2iwLZ6enJsE26wj4jGNeQ39yZ
oaXxvCD6THJlVQvZHS0l2xxLYphRseTjEKYYuxA5upgp24O52saegL+KKBBx
zPb7zqwdpuJuZgCO560ZKu9ri4H8GZsT2TW2gg4Ta8n5L4r7SzTMyU7gxC1X
zPtUMHl9AlWTYtnp7sXZj1qmjYlBOSOSOk3yuCr5yPO3PBOaYMJPudOlRzLh
Y+UarSjgjHSPIV1zqdfBjVubCqk9l8mzIU44fDYVf1ZGc2+IJR3XNBLnVhfQ
JtiPvrfqig365TxuG8gX33riaEUufhtsiI03Frc8M7A+7MGsSD0xa3UWC4v8
2bGzrhiwOomkwnSMBhmKy5a5HLwahklSGs3LErDvGsFwU4WI8QimOC+dkdXR
KDt4czwpA/NNRUQ89uLUbFcqO+sLT0vJ//Lf05fl0n9cDqO3RfDPyGyuOhVJ
rsng7ORSyudXcnZNLBUjEpizLoLJL+zompGESVdvvhgl8KdnNe1OKMWAz1ns
/ycXx6vxvI7Qcu1zHs8eBFOzLJDklFo2n6okNzyZH5YWYnVnHWH21o/EDo1F
TbW5WHrUn15vCigyTSP0ewK+1pF8u1SIp30R+2+GUS352lJm/orHjpTmeTB1
x0+GnY3mqdynVxsCCf5aic1LPdFytIatrnXFN3NjoXkRx7DTjcUhTS8x2taJ
0/30xLqT7USj5YHsMJSeOzWNOKdIfpolcPBeMcNXP6WFWwlW3xuLB9OlL1iZ
itvG7YX4GMPFUeUkrFOKLScs5TVoWf07mZxXDhgcsWXjiQI6LQ7n+DKlyMu3
EF9NpM/9Lfn0cktxL07my/IMjlwzFOfGBzF2ia5Y0KgQ9xwvfoUYik9XCwl6
6kXiHWPRMz+Rj/WT6Z+SyIrKO4RvD8fkgzXNL5zlp6kdyz9rOdHbBZPMPzzJ
NRIp9YpoUpTFNmNjkXi3lFFV6RwR5czoUExqYAIfj5uI59LZR0V7Y7OmofBv
noamRxR9LKXHWQawbkk4l20aigS5V0uuOVNXOuO8TnpCL9mbTpKH7wzO4ej9
aDKGp9J7jB36mxyp9yfl/z9f2PLxY+5t0RcN7xfTxDySycGGwvWDnji9SLre
2yLmz68gbEUUdRo3ENplcbRx9sTCKovBqijC7bxo2zWZtrU5fDgSy+C/FcJn
lY6Iqohj85BIjq1M4tIdb7YsljM8qIB5cp6Pf6rljX4e309G0SIknQ0Oci9r
87htncTZY2W82vaD5ls1BE8qJMMzlUTpJpc9w5linUtcR6XIkOeufpUbZyuU
QrtFy+tYN04vzGWqdQQ/UvxYszGOFW8LMFsYh/GmKpoNLCXykCf/JoZwU6Xi
x9sIuqhymB+Rgdf9CHq+KmFfmQ/hUVkkvDcV/82Rsz4gnnGfquikr+ZGgQdb
pPu9j1OIt5F+FHrriRPv8/E778XAunri18YEMlt4Ms8hhsjv3sQmqCj2MRVd
VkZR2DkAPXMDMbC3QrTsEsxYj3LC4nLJGBCIdqeOcM/REc0r/TDvaCI67Cnn
ev8wmsfmkmseR8PT/pL1qln2JYXFK0LZ0E4p3L3iGSHzP+2nQrjtiuPxnEhi
WhUypryaXOkMVz+U0WlcHdFbGUP1ywpm6WcySRvJ6qFZXEuPJGO9P+eL1Rjn
ZDFjkw3rJ6UyyTaLMhM/8jJqiHpcwLASLx7oqmX2lhLeI4R3XzUYn4hjRmQx
tQP1RXXTHFYZpvGtZS6D5oRz4qIdf92tZfFhN0IfhCLqJLN5mQrHOnH8WZLO
y75F0l9CeG+Wj8XvWEr1gmi4VUd8bVtMF31PVrxQiJ05+qLi81PeuFRh1kpN
nWmhPDWpILeRrgj6FsX0tcWU1c2h/15vPmXXEVPa5fB3ahIblFrOv63kzElv
/DPzKD2bx8NtgQxZrieGrqrFrDqEBX0SSR6ajXu/JML3eXKqrkJs3hqP7css
NgxXc9jfg/PVsRgc/sHYNSq+F+iLNhY64sp/Kv7ekIlBHX2xp0sIu3opxML4
Svo0ksxWKjtFdpZhcBaBI1PwWZ2Is5zLt/t0xNVTKrpkWXPaOJOMyRkMvuPI
yzaJrGwWza/BiezNrisSN2ay5IKKm5Ixj6/x4sTpr1zIVIiN0SqW9XHlmnUp
3hODuHzBFkuTMBQvZUZt9US9LZ/HgZ7Svb+Tpyrj1BgVS3u94WxAPrr9Sljl
6USEYwm/tytEHXcHxvpIBolKp0HVT6zXZbFqkSc+vtE8T80mukko9seiuDKu
CPtmhmLHiyjsNuuIhLUabqarOL2sij4+pUz5VU1WYQlr1weTOsgbTWgYp7f7
4vLDmRX+OiJxXxJhLuE0LjETx1w1jJ8awtC3puJRhplouTqVjZ0VYuw1PfHG
3ZsDYUrxv+cIQy+n8f6dmmMtimgQF8yfaaUciInhx8o4PlyuorjqDztl9nbN
j8d+jA0NpEcMGZrJlrPeuFd6U7upBsv0cga0dKe0v4acOA0WidEkbDUTLmFR
zDgeQcmBKlIOKUUb13QWrChF/FKxon8W0VcU4lqiP4Od5ay2KadBG6Xo7hDK
oyqFeKwyEJbOsk/uyY6TjhHTTIWzqCD2ezSJGn+MjpSxptEXuYcOeDYop05k
JCk7vdFOikP/mTO+Fj/p97yUnTtj+dLdnfkLJIOFaulom0L1zHzmJ+sL18A0
bAdpSehpKopTk2k/KwM1bpSYeNF6iT925p7Emrow2Eru28Eq8muC0B2hL1b+
W0Cm9TdGRrYRZbONROJ8J2hsIkZnNxGrH6ey4GwQv5rrCyNnpQgeFc7D43XE
OZcgBvyOxv6LnnD544pOXiGD/jUTswZ/Zer+Qu4saSA2rgzlR0A1TzONRdX6
aLbuSmOm1kh0m5eGyk9NVSMjcSIvngZbUig/aiRWLA/lw6ZMUvN1xceWRWge
GArnCD2R8jGbaXWVYkm5rtCT/v3v2gA+zk+m6pIGbb9opjjfwsQpnn/1alg0
24WIAj9CCnTELoN89i7J5E7vMvr7lfBWuvOBSQ3E2KA07m8qI+mOjui4II1+
3pncSs3nTo2Ko9Yp7HuSz6/flRg3CCCprJY21ipqz0eTXNhCeFbVFxn/+/tR
TXLJrjQR64tlz5VkUy1zrFOqL8Vfq9noFo1Bny+skj7YIyaFti3suKAopG6L
PP7bm8uhV41EsyR5Hu6FUvpai9mReH7/zudvIz0x5b6K+89C2DKhnH9Dkqiu
dWWIgYHQOihEm+5hBKiKCHvmT1apG23WRDIgU8PnTXa0j8hn2z5TsSMzlB6G
+dx+oeHaFXkG72fyLT6Pru/T+DIghgx1OCO3BbOkTTiPb+qKIld3Bn9R4Tsq
jymDo+lw2US4DEijkfQN24q6opWrsdggf+b/Pstjz61Its4Iw/NBKVXWQazZ
5MX458WcOFbCuIgIBvXPp606m6WBicy4mUaIiYrq4968dsnEd550iOUqLvyI
liySjdahgj7t1TxbpCM8h0bj802Lp65CJL8OwWh3CgSUcyk9gsVNtRxtrCv2
axP5dcFAvKibiU9COPujTERWuwQmOsjZiNcXy7oXstIskIH+VaxqnMqNwb60
rtIXg98ZiFbPijiZVIx7VgF9D+Sy6pOpqBuYijozlyUz9UX43xq+DlVhpJY5
uSiRUe3s8J2rI/6oS3j9PZUntQphPasMvyPejD2nFOsblXLfIJsb/yTQSebM
rLYJHHJOwcQmhk7HXJltVMX1O6k0maJCuy4Vj1G1/OyUgeGjAiK2ZnNEctWp
Ocbi+P44Tu4K56m/nmgmMym8KpQ/Z6rpeUZNQg836phqsG2SxX1LZywWmwo3
eda7ldkyMqyIV9p0/E3D6OtRynHbEkaMTybBpoB6hr5kdo+l36Fq1gfl4H03
j/WSY1WV0n96hVCzNoa7qkjmjvBjzmkNYTpaXKx8ePzUQDj/TmVbioooF4Vo
9z6Rn41/09o5nViVkVjQzwP7P8Wk35H3UR5P29kZ3PmhKxpt8Kf7rwT690hH
NTyETz/88O7vxOPWQbzpmsTXLw7UOx3N4j21JLVz4Z3kKY2uufhqaiRs1ofh
013N3gY1lN0PwCVeKUwvljH/SxgHrugJ+x7+vA5LIGWVrnhcGc3xF9ZMsSzg
ZZoPdic+UVsQw+FUD37LPNv/QCGMH8Tz2dKb4v0GwtOqgNl9PGmanUZQWx+m
HYhk2PkEemXGSl+O5dQUD04sTuH+DWcaTArCZIA/EdnJbP8rmStnCmlq+h8e
VuXMH1HMsOJv3LaKIHhbKXOXuTJoahT/nCmm7VZnvslre+6VwS6DX7wLj6bh
Szn3g38z/4SWky/kGXkThv+TNNa1sOHbnAD6qnPx3urAbjMr6raO5/bzaKZf
CmNbtUKEvs1D/0cGVu90xIRexuJRUBTB88pIPKoruqeGoskoJKdGIcReF15O
D6b0dDYef6USVpnIhCXe3H5nz6Kp+dzbEMvi4050mpjG9Q8h3PungK2pcfhv
j2fsoHhWjE7CLCycfOsw2XF1xaYF3pz/Fs7HdRr8rqSze2QoF6x1RdJ1A6Gu
48O9S4bi0HCFaPsrjP7TDMSx3lr2rtYR6RfkbfNj6HYyjir9Mq6O1bD8lSdd
G+oK/1cZ9FoewpcAEzHBu4ZpZ5JIiUhg04t0ui1IwrEghMDsCIKaxNPmWTTq
Ya4cUHvQqkRHzLxoxcqb4TR5ryuWH9EVO7IsMbgfQu9Zct6VrnwdGUXEbfkY
tHFc7BpHrYFCXPw3Cm1TpVjdRYvlpWiMbxmIAh1DsT4tFp1KpYhoZSYSjZIZ
kZKG+bZITga5c+1MNrVmmSxOjaV3olKM+KIvHlm70nOpuXCpsRCDhDOB3oYi
MMxM2N38SaOO7kSNqOGLvjcjvMJ43E521dFIaje78sHZmX9b+VKkDaJVfRfq
m14m/UwUY+JNRdcUK7bVK8ciwVB8zAtl+kKlaHvXQvwmjcXS13peNxNHY8O4
2lXy7AQHzliFst9ZIbKPfOf9flv+PqQn2uvnc7TSgS6bdETI1mRG2fsR/N4D
i+sBLGrsJplPR6yW2Wj9Q/KSXPMmF4OZPDeNKZPrifgpdcQKmQGalbri9cRC
xpmZianW+qJ0eRi01xVtx5Wz0yUGs/3xHLDQ4J8ViWFOHmMuFfH1qeS0HSpe
TVOKH5s0+C6U/N2njrDtZCHG2BQz31hXZDZJYtDBGP4UGAnL77FkFrtz0d1A
/MqS19zvO1uzcziroyKnWSIRsyqZdaaMLjHB1J8gfWdSXdE31INtpiU8b6wi
JMQJs4+GQuuYw4hXPkzfUs7jDSH0yYji+3npoO7SZ3fbMNe1kp+Sp9r8dmfU
dXmeLyvEjCsqIqfmMtJXOm0rJ+yC4+jwTyrHPH9jFlCBm3kyqc+i0H2QyCO9
eHb6FfOxtoLGRmmcsPfm2ZdCOKAQ44/asGe0lvqrw7jkHcGVG0pReV/u3Ykc
DnYuxmi69C/dUAZGKoRj4wiG+ngyYFkmA3KKyHzqwA65dmuDg/jTMZZexgVM
bChdfoE7Me21/GVfzA9zd9qYZPF8SzL6M9J5rajBq1sx212CGSDPR4+eeiLf
Pp7Fz6s4XqoUM5xSCMNQ5KypYpaeP9OdTMTH0aVsXR/CzwgL8cs5iaLehRT0
L2PSuRiyajypF1xCebWH3C97LMdX8ES67IaoWIoNdMRaCy2z8iP5K9pEnLWo
YmLjEL7GKoXe5lzq/+VF+JxUjtzKIeZxPF3+VLGnJI8+05wI31rNOrtqDCf8
IrNrMamdQ9iY5cuchDyWWqZjtdKdI37Z3LdNY9OVZDqGJHJnbyjfOoYQ9VpN
i6QKtCdUzFlZwoHEEp72dqJykqnAKZWPPYPJvFfD0chaNlbEEj2rFKUilC9P
AvGfXcv2VZl8FBkcbVjBuFlqtLkRZHoVs+qPhrb/alCsKmFHcTFz5icRU6EQ
P2RG619LIM4pkQdbMlnbNoMp6yoJik3FUHpp0475GLvH0d8nnHZLlWL6lXLi
MkK5cSMd29/xDLjowf0tSczckI+74x/6O9ei/7KQmMBKRvkU0+6rngh2rWZS
lprubm1Esy1aGjQvwv2CmXg/Opoxx3XFCbnPB0yjyd2bw+16P/i03I4w+f2l
DV04M94b9Y5yRq7Mx6GX9JQeVWSaVHN9p/ToJGOxd6yuuF7xHe2HeqLlO7kv
owIovy/n9aMfV/tFsexSFC5zvRh22JO7zpGE3LJl67M4No3Q8jZdTe5g6Sqb
jcT2ewoRcLeCgM0GwmxhHi1tc+nuX8bkCTKTH8Xw7GwWo2VnnNruR9tzahat
KEBndACF8hxMlhlkfzyAJdbZfOiqIyy+uTCAXFJGZpN+yVV6jyd1gtWsNori
+vl45skZn9PKnws9lGJf2wh+O7nS7Wg5Z2R+KDb85sN4LQXxkegUJVJkWUpW
VKTsjESSdJWiUcccSsoiedkxi41/4ilxjeb70wg6fyqCigDq1C2mWWI8s5ZF
09YpjA0JPpicdiFuQBn95Dm7vcGJSapCLJ7HkFDPjZ7lZQzJCKH1gd9EGxej
rZfBG9tQjGfqCNefCbw9EsT00ihczRPYUBSAVubH1efhPGoazfaATEr6ueFn
Fsl5OV9VMoc+/YpEvSKF/1xy+WAbxYj/ve7bz0iYDkhAb2ct19EXXa2TcDMN
RGnsScb4DxQ+iebIjzyqN9pS9FxHlNvoC2O55kfK4/AJ/t/ncvgR1DKR6fnJ
NDdWMWJZFi7vythoFsLAu2bCwaKQe7GxWJRXM26KUiwNiuTyjhhsbF1IOBzE
h7ByDsk+G+TlRbVxFVu/KYSpSTp/WeqL5xeqiLD0B00xW1RJNPGOwWRGPi/3
mIraFE+GHtdwP7mMmWO9KApTiBA9eca3h5O9W/Ky9K/Kmx40yG0u3ixuJMqn
fmDp7rqi6nUdMb5jMK+HVXKZBIZ+tGIS+USPMhBWJZ6c3ZDOuWR73lTY8vpl
Mp3ex2H6tydvDkcxPcpQtLrlymeHeM4U6guzNCvmn1EK92YNRZP9wVxrqRT9
POJ4vyaEXnrO+P15iUUjX8mjhXSt/4QHcS+4OEFfdLEo4lZaCLsOqug5NoMl
W+1Y+qySGh994d4ggTm364sPnjX4nFSxwUYh1r8Ko0NlFrU9FCJjUCHlu4uY
MLOEgVWBJI3TEdvDjcSkf6u4U6Rh57/l2B2O57LLbx57Ss5cn4H5+TDCG5Zw
dFAuf0bb42RSxG23CPqf/83DgHqiobKUbuti6RiuEPl3I3mxwRvzlGKqdPMZ
I8+bbeN64mqEsWi4KwKLO/msME5nlFEQcZFa9gtTkXQpmL0KYzF8qZ74t7EH
fSPlfF4M4qn5d9reTmXQeKXobedPWs8atMMTSC9IplmXXBr1KcT2cBjHNyQx
yaeEbsNDaVhpJB7fLGLwiRh6IfNJsrX3o3C6HC/kxewk7r91wGRUNUd1a5ja
JoD6XTJJW5BIr5Xp2O+txPBTCDmnVMzM0hKwNocdq0PRd4qk/Fgq+etknpbX
E6slS/2TGY6v7C7f0SnELgjleb80QufEsf93AF3CDIVupyymZucy9lUhs79m
sMnbnX925mG0JwH6RvOvuhhXPVueOsVy+UcNsXeKWLEtlGbdtXzrEU5AA+m+
bQzE2kWVFH1T07Mok2sdTYRujPTnzQpxY0UO7xYl8eh2Btse64v83HiyrQrZ
8yuTBclxXN9fQuwkZ971tZOeGcKgWYGsXGlPb9dCqkcHElPfhtN/KmnukEVM
sS8dVxZSZK8nutuG0a0mhUtlNZx570yVay7n0zPpPcGfijOVzOtcxvrxQYzc
YiD6XC7j8sAQug6sZqteDmuufZXcV0PbTXL9B/1iZycjce1NNA9muvB7RSqJ
I32oU+bG5/+yORyexdPLDqTZ1FD/vhXq57+oVFbTPciZPwO8sJ2ZxNIH5bwd
HcOaKB2RcUDySjsfFjQvxORkFCm/E4laU8K2TtJxDGK41yyDLyPSKc0NJmVa
Ar+va1mwXzq/dSKLJMvnL5WucCeG9zmZtKjvTs0W+X2TAnhVZMvnL35caaAi
oMyJP5mpvL0cw7ijgWz7V/rKtP+4r7HmwrIYxpxz4Ow1FcW93pPa4DNHx+TS
/IcdwZmObL0cTf9XEVw7bSYU7wrIFwYiYXFrYXpbISJuGYpeLyyEpX6WnP0G
4sgTXXGlNI+x83XEu1F64kPbTOovzOKBh5zdPZJT9iuFz0Nd8eWyZMWIBqK4
nYUw2udB5NNGYut0XTFjox3xdXXFsBXFLLIOZdukKhJNNPTsXoFnSB6rdUpw
25nGleRKFv+pI3pkZ/FXXT2hPVhXjJqm5eLfWXSYYCSsdGJpOLqQ0RNL8NBJ
IWttCd7G1cyzTMNHzol/IwOxrHUE6XNNxKrGemJhOy1JY6RHDDAUxXMSeD2n
CE2bGqpUcTxcYSiyzZVivcy5B2OVInSTsYhfXETHewXYucmMqS4kfZAW36m6
YtZZb2IfFjPJsYBX78OwMq5FeS8Fa5NQGplmc/5wCWs/+TJjr0IseR7HC7tA
3FV53DsYwrYXYbzcEMnuC9JlQ0OpvJvN4DA1tx/ZsfOpmsjEMhZ0CcFtrJpd
ViruJ7qxzr+QW/2UYsmRaCqfxFLwSV7vq1Baf9YTlcNrCa1JY+vaTMZPVYig
DS402a/GaYiOGCLzvHy5/DpTepSRL4cDa6i9l0Tv7d40XVbBqaEaIr56cHKS
lptVStFiTiAHQ8sZ41rOgVkRkkFzeFUagsWVYL6cL+LugHDG3czmR0gc+ddq
uZkqOXCiQui3KWXGKF8cJWO3+xiEXecXct/yqGMbQt1vvyjOqaH1ONlPbo5Y
7tcTv3aV03ZkKvW+yLV/UYKha4L0L2NhbCa9MVvO9jhd4bMqmovng+lZVo6b
/P+L1+1RW/phOS6KoU9daDwig6hZhSzCDUuTSpqeLqL7/kwcFhqLq27pPJsS
gbqxjvBaXUD9jj4Y6zYUje30RMpWG96H1RWXzhXS5KUvyR+13KnwoCjlG+tu
FvN2hYaglz58W1jBoA8lZDmEckJhJkI6VZMgc6mR3P+DK+oI8/PuLOybS0ZN
FuGTvShpnIr9Hlc23bDjwkLpTG9vcznci7U7Uxg22Zm+0l+ujtAXLr/jGKWv
YuPRZPr+COOTcRCZZ6Sjj9ARV6+70ud9PdGjXE+0eepHyD5zoUxTCN/ySCou
lNF9VD6uvbwJkw425n4ELU8HYP5JKTJ2SL7Y50DTSH0x5ZGOiM104fCdQsq6
5fCnqTv/OlbxdJOK3eoIqkyLaLNTRXofB1ZPq6b5phqWx7vSNsNEdOlbg0mi
C+WVNVhcdsb6UChZh6Kx9Xch5aQDmtU6Qvu6rtg4u4iqXWXYbTISvSam0eh1
JQFb6ojmMh9Mr+oLExFMi9Zx/GymFGvPeLK23JseA+uJj98yOXbNH53NmbxQ
peCV4sNP93SutSpA0SGb9o4aPC4oxNNkV/pb1NBiagq/rtpycq2RcDhezMJ3
6biWqvH6WsWIzqnE2eTx+GgxZoPDeRufi3JLIvmz8tBMCGFmswIm3UpmfUYZ
et/qiMjG3hjWK2B5cj6fegVg0NBU9JWMNHWcK9mvjMXfPiqSC8NkV0g3DEnF
21VyZE8zcSRfIbYleqPfTkdcluw6OdCfj19lN252ZcfPEGouZLBxnRO2krnH
yx6r0mTT82sm+6NlLq1P46r02o2h+qLjdT3hc78M31lFtG5rIapbFlL4RU3r
fdJ5hsXR9pOatrbVHN4aToXc79XD3eBvV+pOL2Vaj0zaNPCiYX48+g01HF0S
zt95aoYPT2SGtzPHDpZQ9E8I/nv+ULxGTd9HZbiu8yKlf87/vyb93m4f9vQr
prxlNhs8/Fn8sprHuxMYku3PuyXlHB6ixd03ipGzy2jxMJf4v7xZ/0JX6EZ7
0mCiNfN7NRSTF0merptIt0od4RiezrItvjyakUdKkJqdsx24UqQUDyZKN2/k
z9GTGsZGBkGyLS8+lzK/aTwvVbE4PcjGPiuVfs8z6eJUQUptMBnfrBkRW8Pw
fp7otVNxo76eOLbwf3/v04f/huuJ2x//91m/nsxxCeeD5O8L00O4r6crhnRN
J8PMmvxzGn4tjGLziB+s8pLemaDlST8Pdocm4b0ug28fXWHKf/x38jeXwyTD
LHzDkFePaX0+kXXT1PS+ri8yUqvpfyiKbT/8WC5ZyH9gFCe+WhGyyIfTa7IZ
YfSNJN90NhnUcPinG4sSf/HtfTqbd/lzYE4uN2fITq6bSc6QOPaEy37ol8nW
WSU43EllcR8d0ehaMKGR+aSYqln/KgHHkEw6ZxYxam4yVdcrKMzOpqBtFCGB
+XzuXEx2kyTSPxawbK2aD3e8pZsZir+vqWkmMz9ogkJ0rPCi7kUnfI9pqF6Y
Q9GDcAxNCridnkvrol+skEyiqSPnbH40xaMLOFoQzF/lkneb6wnVJTdm1cZx
5q6KJs/COJwpb18Rhl5HP8Z896csUMP4DQrRKTeanNwCypvoiVOeKmqcqmmn
k8QhkyCuXYvi56REdvV0Y2X9XAaGZjPA9CMTPNWs6V7IY8kqD2Jy0XzQE4ON
4tlQt4IFsfri3tlgfn2s5b1jKWNlD+3eqSssNCncHKnm74w8Dmtlz/UPQ5tU
gKHMrLsv5Ex8KGBOTTkLZ0hfVlSw/YmWn63T+W+dfGyfdMWt07lc7SXPZlYS
3+7m0bBROX9LZ+lbm0bu9Hi+HArGJjWItotqOP1vLlb7wjn1n54Y3jOFPuPy
aFZbQOzlLFaHePB8fSYfh2WR8jkAuy95/Hxqx/Tt/oy+qeXSci/0e3pxcK2x
uF/fUISUxaGQ11PnUCy9czTcHJNE1mbJr109eRWl4ZV+FI/cf3Nsc7bk2Qg+
+Kv4EmsoGg7RFzsfu7DxUgFnK5JwCPpF3PFKXl5KoXZaMLXPZVdWlzAlNZzp
3XN46h7K+0M+sEMptpuX0+uqI7OfZNJsbhA3+v2hpKGWOteSOG/gRgd/EzHd
po74fjyCekOVYlJqfbFhVxwtE0oZaZLNuOQkFv5jLKolJ6c89CQ221z0bRLL
botPXEoppWZyKJZt73AyIYqPF2spqfDD54DkpT06IqzGh45TEmgtMlnZ7D0r
dCPZc8aL8SbfGWyfSvh/DrRN9KHHhTw2t8qjjVEW5weUy68KMehHAn/u64pT
TQyFzy5nvqiTWNZCKc6/j2aKdTbK1bU8xIn2F9ToJOgLu8e/+FRTT7zLrMLz
8w+6TK4nbrvpi+hfTmxLqyNa/jYV60d9ps6GAtrZqTnn7MYXyxgaOuRz4NF7
6dkKoVlcQ+BQH2aM19JRbSDOTIrEYaiKpk0iadQ2lWs6xsL8Yxx7ddMwfm8o
zvbUER27hDG0n744tDiRWSujWHSumPwVQYQ6+/J1neTSv4N4qPolu74EH9k9
elszMfxpIA7qaPjyLhi3LmoMnNTcqCtnc2s2VWHB5Ce700noivFXC0k74MWI
ia1EVR9j8TgylofbKzGOUXGgbxw2Cg2Dh2ezVxnI8fgiCgZrGWobg05aLWmr
igl4/pujQfl0/EcptI6ecq2lZ7dS8TIlFMXHNE5/l48jPJUjvWupN0/mbWIA
9+xK6NWiBJtiFZvLc9hYr5LuPqG0jc/h+EfpdsFBeO1N4OW8ahrLvjvQtoKO
B6P5Ijk2zTSLI1uT+fSwgOHXqlEFVeJSEIHVOi2fSiJoO8Cf9k/SON7dhZsq
J8ZLTpgos7Z/j0i6F0sO6JnA+e+ZzG/lxtEdccys0aBMDkG3qSeJq1NZ9iyX
Fq6JzJ8ZSOGnGAwPhZFj58etp4VE7dMX/zzzoapQIRo2yuBUgR3uNtUoLxYw
ZWgWsz5KD7mVTx1T6ezJtewYryO2XXVhpmTpimWxXDEMZGZfLZ5fMrje3YOb
D0uIs0/men4oicZG4sfecI7IzPZIqSS4hyu7NucS8KGIiNYqrCWTmMrZXJtT
zbCF31Cm1LDhQCqbGwVRdSmR5LeZtPMJo8eoclrH5bE9wY+mTgWcWphOw+xY
TtbXEe1/qIh+E8bjDKW4qwlFddOX3q8VYtixGJSB8XhEGYkG9gUMPvCHiYvy
OP62gI7DozjzTUdYHQjjYFUMx9anctQvhjovvHl0TimGvM+m8GMF2UsrOdVf
w4cleXRvYCA2fynmktzvzSX6wqeRlqcPfZm4t664Z6bm7MJQvOT5s/jPXITN
/82jwkQOFjUVa/0TZMclkjSruQjWlcx7Jh/rO+HMNZXn+VsBzrrHyNkRwtD0
Whr9eIC1hRu/GyrFiNbfaGH7htbqalrV3qH3/Xe03JxGi9UvWGT+kdQfsdjs
/c7SNdaovkYTm+KNt4MbUXNiSFzmSEilPyLOg985ybzd48OfuyF8cYpkSDuZ
Twtj6TEsgaLT0XKdo1kp/WxuqzAWpmTT/2cJzZ558eKirpjTTc34ed7cblRH
NFkXxmwje3T71hUDJ5kLlW4cqUsaihMJGprOfcNZ6SZx4SYicqEvoXoKMW5I
JN3WejK1Sy3tKtLx6W6NZ1QNHzfriK7ZAbzpn0q8zAPDsDD29C9laHgxcUej
SVaW8j05hoSaLzz1KSO8m+wpPwe2SCdc3b6aL7UO0jFKeFyrLyY3/czCiDS6
PDMURVYedBss8+abruhQaMe7IA3lkRq6zrUksayM+X3U9GudS6PyWqpidMXD
9xVMqy3iwaEkgheFozM+i4t3iuAvNyqz8thoKXvmRAED5imE55xyXO950vyY
jhgYUYWruT9FEbU0tsrhbK9E7r9K5MFJybn1/RjeOwGj6/702h3J23wdMS0w
mmudQ/mnQV2xUDLSmnxPlu6q5matlpy7iVwYqKFQdkzA1ThMPBTCZ0oot07a
sml/ETciq3hXFU/h9TJsb0TRemowo64W06m9hk+yD54+MBWGcoYGW8RxuLmh
WP1EztOHBFT/ew350Sx8zucxo0pP9NiuwbRDIPcM9UXL+ln0fhhM6/ACqiS3
1+umYvQ3LR0O1VDQzo3rZibiveyO4yt+cNO1uVAclzy/PpBDW8t4nVVf/Lcm
kp19TYRe+3ze+iYyMrCYbXWNhaNeAB3d9UX4VwOxYVIMxUd1xLADDoQWfGHA
7WKerQ1jyfMf9FpgJmYMSsKk5WNm3VJjNjMajZ0PdpOLafWwksQQe4qdlKLM
t5bXPV3onK0QYfoZZCrf45wQSLDMkgFDv9PFMpVan2CW1rVjwGAjEb88nwl9
nei3ob4wHtVcdJkVhGKjrihSNBerduZSObASTXU2j0oy+VC3nB6yf6oOvuWS
YSlB7iGk7PtKi9la+i+14t7qIg55G4sT6kjafEnlt2MjYZpoILZc9qObXjX3
z5ZRu9qebsXxeL35w/n3tvQ4UEBZv3ACXjlxsYuRSMvWE6tsfJlpnYGucSVe
b/NIv5NJdZM8ghNDmfZPOuuR7t25kIeHc3EvzeT88SQmr5fuW1+LQftv1ATk
cCSukiG1mbwLyGK2rRv/TpXneqC+aOgfyiUrbwL+03DeMItdL5MZczuO1+OS
OdvUmapP+iJnZxrhgeFsfF1P7JSuOHu5H5HW+mJHeggnRzqz83MZhzpGEm8b
TElaDvWnKMVNbR5TvUrosC+M4lQ3rCKTaeHsyUu5L//+kJy2LYh952V+XlGI
4mSFuHE5lIFZRdRTRbNocjRNnTXcDUnGckgUs8akMMitiLerPhPzv/dknNbg
aO5I19wMJh2rZozstZqRGZgsyMZmVBDjpIP+lZnI0KY5rJydhGuIQjT6t4zO
pzwZuTuEuZ0iaXjCh/BWAexUxzCii5bFOemknU9BPS1Zntsq5u+L4mZqHAuV
GdQuzMDRzYtF9bLYsDuckX18qZoWhVWlLYEzwkh9ZEmHlDj2XTET99YWcQk/
7D4aiO2uGbw1jGDU61hO7QgmzySV7m+19L4YiYdZNEEdKkj4LDv2Zhh3/q5m
cK9Y5tYWs9khg4c9U9nVOYd7nnks2qIjJk8OZrgmmdft8uT1O3JH9l2rkUls
GxlB9OU0emkSaP4jjg0Ns7BaLBlL8o9vfV3RKrmA2rrB2O3OwmR4AuU9Aqn/
PpXIc+lYujvy/kEZqYMS6KUXgqldPXHooyMbz/ixfqSuaO3tQ6O/3WjmVEiv
M1F86ObMmZ06YrWjGtvWf1gXH8/gkmq+Ng9gfVs1E86moTfYjbsLE/llHsvx
iCBKXhXwqWsRYV+duX5aZk9lAl5lalbnZ+HnEcfbIYH0HaBlRkg6105FsXt1
FS/tkvn7QggX3kr/KCgmSc8LB6cyNiv0xQKrKI5KH7sxSk+0GO/Dt6kKcXmt
vsj6FMu5EzpiXLobvh2juPernmjQtUTmsiezOpuLdveDOTbRh67JJmLIhDB2
ZttLPjcT+5/Lnpz6hnlhSvGPvO3OYWv67yr+//esBBi8JsEymgvmMZj3jWDo
QD8KS0t4tzSRc38l8PeOBC5nxuH8NgmFdSyrz2UylkJG2IYxqncIfVNyedks
iblT/cjZrydW++fScIYDnT5X8uFbFX3mPGCejYmIHWgimj23x9pUKTZfzueJ
XxCx2+S5vunD0PNJdIuOZPIXD2z03lEnpwYv4wrG2njSzNRQ2LuVcbpBBHND
jcTsE+E83hDL1NJ64lloLZ6KSLJ66AsTv3is+U22WTp5J+LYHujJuB9KMbun
nkgb7oxtIz2RMFpfRK78zKQIPfGkfjFvuoezbn45vx9peLA6ktDlSvFzjwb7
D84snp/OH2s1K+JC//859nnvGon/Xntjl5GBUaW+aL4nncGn9ESZjYZd1//I
2dATUQ00HFieTLe9ZSzSMxGLLmUz71Wh3O90ztqHsHFNGWtGJPPrajwnM7V8
XJpMY9NsnL7oiMazvXg5UYX2pbnoVZbCvOIAtq6vL+znyZnsbUWivoGYv6cc
0wN+RH9QiItmubjt9mVI83pik2sN3qW+tH+sJ/6Po7OKjirr1mjFnQR3d2jc
G5gbd3d3bbTxRht3CO5OIwGCJhDi7lqRilUq7u5+93/feMionHP2Wt835yDJ
eTtfiVd7Xzx9GoiwHAOhfUKFlWEtldqR9JQZYhhahelTVz4O8+FcO2NxwTgd
Sz9nhufoiac+eXR7IJ/duDqsI7LZbx2HKNcX764aiHT3aApvlNDCsBqTuT5E
2NVy4XYlHd9FstS+ks5toxh7XYlOlr64tKacmVcisNqiK0bHZKDcGsi/Gw3F
+NA0bBq7o9+8ipT5efzt+pmTkqM+/V1FzKgf3B6oEOcXFvKHsx/71Gnkh8VQ
Z+hAY5N8ml/2Y2SwHwt6ZhL75jtvPgXSzt4frX1JZNxwIGpBBgstapjj5cm1
z6U0G5KH+44wVt3J4vO2fJ6aR/HsQh6NliZwY/57Ag9ZiDklAfTY7MKJPe1E
49vdxLe1bvT6rxSHeXksnP6/n8kyF3vfBWPk50/fKboiVjrN5NiP5B2QXtvi
KeZ3QjCRezF4s5JZE+O5eTKdjx/zeJ1jg+q8jvDMyMM5xY/n84zEuW86osUI
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
Ujo9EVM/NR79lHz0zCZmuZ5JieZiQMI3fhWZi4EhOag2phGp0bJhVhbFzyKZ
mmAmlpTm8zTElX1Dilj/OYNxil8s/1TCUDMntmfEceN0Bvc62XNyRRS35lXw
95k4mu0IpsfbJD64xfNviuTwCwZ89+toPCQHzRSFWDFGR6pHNLPSzUV0ezVT
PsQx76CZCN4TwdsDdoy3NBWJ/l7kenrxNCWbcTKvfvzjjINfHvWTjUX0zz/c
mGwiWryqJha4R6AarhC191uLHHfpCmbSO7cUoWsYSd0PReyTfb9uswv+Kebi
/OxUHu0NYEU7DW5RWQw1cqRmi0TCOuVzt/wNgXMq2SR7zn9WBMlaudeq38wY
X4qNViGCzUyFTbVUzqtlh+7RcCo4lkvHUrgh53xjoyjyK8uwziiicU1f+tY0
FQOOG4tp+wLp/0TL6CfSIT8EseREEZeK1dyv/pudk/IY9lBP7h0PbN9raRuZ
y/dED1TJRdRLlzxc9hOLurl4vEgkKdyHhFPGwpR4Cvxk7s7OJlGXg82NJLp3
y2Nbi0zEkwSKG5uJq9Jr4voEEG0ps39DIjVmRFJ4Q8U+dyNx7HkWtb3MhDYw
lVnenzmYVuP/Py9vwTVHrP4t5Nn2RPacCMRsjgZLQzTzHAJR3kkl9nMkJhaO
9IrWEjg+ljNN/Bh0sRxlzxyypoZBdUsR+yGWvUa5iIJCnnrE0epYCO9TMvg2
OoKtOl+aeFRxbGgsIT0dGK8zEm2/JTC++hdC1EZihU80h83i2TUghxY+eXTf
7cvApabiovz6+KpnpPmUkiwZolLOd4qlmWhWpWKwzDJDfxMxYl4cc8cEYrmj
gjPzw9jXqhDr0ByutPnDijvuXM7VU2eeimYd3NmaqKHKJJurL/0IzEvmantf
Pt6LwqN6CtoKP36n/qHgagjHb2fyfsw3IhIjaP/RWCxyjKCXs57XhSUkvYik
3VM9HwIyefIzkrb147Ee40Vm70Te1fDHKDuE7zJjMqIkm80oZFTdbMwXmIpf
zarI/hbMzK6yO1LTGK4OYrvMH6/V2VhNlj21vIpnl0xE6yf23JtWRHM/Lefb
/aRf3zKinLXc2B9H7cNGoslEyUIVXoRfNBLjtWbiQnoWa2cYiZvRyZgG+jDq
VwUP5mTR4/kvlkkfCo9IxyTyI4NHGokXxzKpSkpl6d9GIkGlo+FdD1apSunS
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
XoNTYg4ObV5JV1SJCw+zWP/nD5rtK6Pj3xoOdQkjdI9SHNLnMu5mKK9OZDLo
lLU4EONNwn7Zh4NKmdDqGW9DyyjqZMTH+xPBs6rxdZVM+nM4za2r2dgwm/7R
EfRbXE98+qWaSaO0lNvXFtOkgyuuu3FKMn+OVybHXO6S6yiZ5FQsIxqFk1tS
Tss90u9vOmIxq4Q+nfLo2zKSyEtKybx6HMZrODa1huGW5ezukYDj1CxeFRXi
1iOOw+VaHkVHc7+Dho7HVeLi41IO9Y3ifDeFmLCkiKjMLxxcVMS5SB31tuno
YNKzLN2Ll6O1bLhYSlJiCVeDk1jz3lLMHFpGYlksc1qpxI9SydmZ4cSUFbLs
WByieQgzLsaRKPs0qkcgrwoVYvhZHyI83Ggww1ysHJvGvX3vGfOgBG1iOmFh
AdS0UIj3admsrhXJrkOWwtcng4DGCTTNK2TayBg6zIjhlFYhZmYEcf1FPIHK
eqJF0ww2hrjwsq212O9Zibm7J/tXKcT3TVn0a+PIpxUFfHshOXHWa5SBBTRv
lsPo9548tK0r7k1L4/4oeU07awtVdAWpC7/xYLHk53bl7IgJxud0bdGrl4Y7
5sn0bCr75Voc7RUJ+AwxF/06JOLcX7qii1p8am2iR3wwB4w6Fko3z/8cwI9X
CjFliIE/1Ml0vqIQDTdnscjBj8Jfi/HtFQmXY+lRr7bQfk2h49pwWjzMxMGp
nKs1kcRbFjPTJo9tef6M7J9HxLt87j+KxLhDereugHvdojki7+mAwYVc3xLI
bb9Evs/OY/4wD+o0l055xkycGejI/MA0OgWYibojXFn7Ohf7/mmM+ZaIm6ul
OOWXwoMWTnxSFeJvZuD5Knc+ppUzeqCZ2PYhkbyDRbSWOf/Dz5v+6TWMeFPM
68oAogbaig5hSXQXYZyzrWbh1Uw26hIZE2AhDs8wUtzCA+M7M3GnjpZzvzhT
+UktNsaaeHsljsufzER9yTaHU+N5sTCBldf8qXU2kJK5ajEtQi1evv5BdotC
rpRmUZkTyU/n4nHxTUYrs+nCKV/mXtZwYnas5FtbccK6iBFLg4nyK2XBkhpq
NZHzkZqPwbGQv30M1PxbROkVM6Fc6c6jWRZC55SCaXcQF37OIcY8FVNTmR3q
QrTjsjhnH4+nvLYFsSk4GnTscc6lmV00A1Pc2JZmKbp2TGbT6gTECYXYIbnq
+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
iofxjFhiJey/KeDkmU9Me1lIg+wcbl1NJ3ORtfAcqqfJIk/qhpZxILGIJnIe
Wnc5h4ux3DtUzdyEGtx9Ernp6c8yxzwKeuvxFbksv2gjLt1LZdFTLS6xFczv
ncOK3uGEPDZwqX4lJ095ceRxKbEFDsLF7MfvraxEzZNSAoYGo3vlKP6yMbPT
PpWnb61EQ/nxoT7BdB5exLeZyTjfT6BAznRP1xKCekTw4t8irkoXWmVxx2to
OYn7FWLvrGQ219dxW6UQzR8ncai/tVinyWfaFenPnhUs7mCm0D2Uk5tkVzlW
oFnpTvOOefxdUUgjv0Se3lOyuE4hXx6puLYjm20za3B8ncHLwRGsn1BJ8cQA
6v4iM3loEaKdkuXujmLnHBUvfkxh2+xiumv1nLufQnRXC69GFfMw0Qfz1GI8
JAtFdQtm0UZbYV+USUDjXL4schSvM3Jonq8k5h+FKJczPvtW3vmV1dTzzeOP
47msWmoh3mJi/T3ZS75WolVHG3H7p2RGV5RS3q+IpDep4K/Dd14UBe398Lwn
O8rLgxezPjN5nYNo5aBjgkbFlgH2oqGhlLMPk+javJb8ATU8stdwv7+dWN0+
hnsii/w51bTLD6PiVhpeJjM1bZX8aPZnj3SX3WvUqF0zmPa5iAMrMpj9KpB4
k4U1c7OkC0WT3NtaRLwpY4NNIO/3OQlDfg1Tnii57WYjmmyJ5q17Ih/VJtTe
CvHN/hzq6qxExdEUPpWpmO5dwrAeBTRtlMtweT4DDys5q1DT3b2cD/oCzv4V
yfl9OejXGnCz9iZssJ04N8TAIrt0IupU0FXy0MkKX9bvM9LrcRa3JgdSs0wh
MufaiR07EzmXayMCNlTjX64nZ7NC3FxhQS378cuKcv4JjcTxcjQTSMBR3rm5
shMTLyvE0ddKJmX7EuLcQEwZYKH1G1+uLmwkbE45iCEp4axfXoD1qnwG3vYk
9x8j33cs42NJItvlnP4tshPHNskzfZbHpicmXq2PxvF+NgvGmzBcC+JiG0fR
ub7Mhw4FRO0qw25MEUXfKal+k8fZCwns/S6DgKsFPAgs4PJ16eEVelJvRfN5
XA7TG1qJ2IxEkgoSWTolmyNnC9jXWk3LN/aiY+98Oj4Ko/iIQqy8ms1LK+nk
K3L4nFNOfedQHNM0zBgbSYCHH9+MLcHnUC67l/lxoo58DgPVvHf2ZY3ZwqLR
2ZhWpzDjuUJsaRPDLw1ecX6JnehuUDGkVyBPZG5/E6QQBz9oWSDZocA9lg/1
CvggXdj1ZjaJg8IJrKxlzhclNt9/ZbKLloo1iVy+E0HSJulxvdREvMzEUF3L
ySVmtsnZbXP977UI1Qx/oibQ3UZ0DMpm7tYCTs0z0t/OSI4yENNda2FzzkDf
2lhGORnY8/Sd3NlItg9OZ7e7D70mBmEn+3euWwEl1WrSZ9mK6Z4WUjXhfP3F
gteVAulJUTzaWEn9o/bizKh/OL+4mIhGtVgmfqF8nUJYlgfT3ijdzd9a/NbQ
RLkiGX/Zy41DK1hvH8CjFCtxKbuQJpIdJ3asRbMqm3tp6SSYZC7dSeXZkgB+
e6YQr21rCNHEM6xAj90v+ZxuncyRwmomdZeu9nMwiZLz9/epoevQEBp0chA7
E+X5zZNd1cFapOxJ5dgWDa/qF+M0PoPGW98xe5GDSJK8vXNyPOotObRPL+Xa
+nCOzMrH1iEP34MfuL7egkd0Ns2KY3CSDpX0oZCJDY0slbm+va29eDVSixiX
z7xtWdiu+USVwcLWnmF0WOXHb9kyj84EYXodxalO1ZyYqmX2sQh2HrQV82bn
8n1SKssOl7BYZvXE64WcGiI/V6Rla2MvvA85i/z4UOZuC6ZTVB6OQ00siJdu
ecJJtGso/a5+OFUHHYSydzT1TqTRrZGWtOvxrJnlT49bBsYFFhGo/YjLLDvh
fiGTqIH5JAaVM+FjOp8fJdLOx8iq2fKOP0skvUyD3sZGvIr1ZJrSSgy5l83N
lAwm/GymukcCPFQxTGZp/TMFNBsbT5eZZoKvJHBVsshCzwKe/GEjUlv70fxE
KtdeWYv7bi9p5lLOOVUhfn/Ec7JfCXmlZt66xrDqluyxs2Y6q33waK7iZUE6
DVcG0W2niVM/BNCiQSyFnrVslvfunzFBbDxXVzjpjZwLz0B4KcSlhjWM7x/I
kuc1TDyaw8lfZL7vL+bbsxo+tw7FlFhDzKN8ttp5EhcpWehWCQ4Ps9B0shIh
zaN43tiXusdLGOwbTPi/keg3V/F9/TguhXrTa7bMoubFOA4L5VMPW3G0fQmP
P3/l+GolE7PTpX+l0F1ouFldzOp6PhQkVXHlcD6Oz2Op3Ct3YpGVaKOKYJk6
gStZej5NzqDlciO7vLLpHR4p+SOJzq1qePlNBqMPZfP2pYF/t2XLbrUWa1yM
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
bQ==
    "], {{0, 150.}, {150., 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real32", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{150., 150.},
  PlotRange->{{0, 150.}, {0, 150.}}]], "Output",
 CellChangeTimes->{3.888215953836878*^9},
 CellLabel->
  "Out[128]=",ExpressionUUID->"9e1cb187-13fb-4ec2-aaf2-7971a0a1d841"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedMimicNet", "[", 
  RowBox[{
   RowBox[{"Last", "@", "randomImageToNonSpider"}], ",", 
   "\"\<Probabilities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8735438976922283`*^9, 3.8735439260192337`*^9}, {
  3.873544041131907*^9, 3.873544045969659*^9}, {3.888215958595394*^9, 
  3.888215962028186*^9}},
 CellLabel->
  "In[129]:=",ExpressionUUID->"eff64db8-8274-4fc9-9a67-8bc8cf7a3194"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Spider\"\>", "\[Rule]", "9.006604489991688`*^-11"}], ",", 
   RowBox[{"\<\"NonSpider\"\>", "\[Rule]", "1.`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.873543896177683*^9, 3.873543926336975*^9}, 
   3.873544046400524*^9, 3.875899020170581*^9, 3.882591082560445*^9, 
   3.888215841220406*^9, 3.88821596241048*^9},
 CellLabel->
  "Out[129]=",ExpressionUUID->"80bf786e-28ad-4ba9-ba27-938434929370"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1386, 762},
WindowMargins->{{0, Automatic}, {0., 27.75}},
TaggingRules-><|
 "TryRealOnly" -> False, "SlideshowSettings" -> <|"Toolbar" -> True|>|>,
Magnification:>1.25 Inherited,
FrontEndVersion->"13.2 for Linux x86 (64-bit) (January 31, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"fe4bb19e-7915-4e06-a292-1f4567d26bd6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 233, 4, 122, "Title",ExpressionUUID->"2ee39ae3-64f3-4f57-b5b3-4cc62cf09509"],
Cell[816, 28, 618, 11, 43, "Text",ExpressionUUID->"e4697f75-46e1-451d-9fb6-0f122a68429c"],
Cell[CellGroupData[{
Cell[1459, 43, 227, 4, 56, "Subsubsection",ExpressionUUID->"7ada3b73-9408-49eb-b43b-fc15a1691c0e"],
Cell[1689, 49, 781, 13, 92, "Item",ExpressionUUID->"89e84d92-41a8-4d98-844e-91c843e0c472"],
Cell[2473, 64, 664, 12, 66, "Item",ExpressionUUID->"716bd220-4c7d-48ff-ad0f-c742e3e8b48b"],
Cell[3140, 78, 296, 7, 40, "Item",ExpressionUUID->"77661651-6cbf-43bc-ad92-65967ac1efae"],
Cell[3439, 87, 267, 7, 101, "Text",ExpressionUUID->"ecaf77fc-4389-4f3c-af45-9bc023271e9d"],
Cell[CellGroupData[{
Cell[3731, 98, 293, 6, 36, "Input",ExpressionUUID->"342fdb64-3c51-4671-a058-3846ba136984"],
Cell[4027, 106, 507, 12, 94, "Output",ExpressionUUID->"194365fe-761e-473c-a25d-5be3db4a66b9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[4583, 124, 162, 3, 83, "Section",ExpressionUUID->"7e670bba-97c7-440e-a34e-f4c551a65b3d"],
Cell[4748, 129, 332, 7, 43, "Text",ExpressionUUID->"4af904df-621a-4097-838d-16789adbb903"],
Cell[5083, 138, 566, 14, 62, "Input",ExpressionUUID->"99e4d6b6-5df9-4d79-8387-b66aa43342b4"],
Cell[5652, 154, 279, 6, 43, "Text",ExpressionUUID->"50b85cab-a25c-4d36-921d-d4daca54ce25"],
Cell[CellGroupData[{
Cell[5956, 164, 534, 12, 36, "Input",ExpressionUUID->"68aee029-7a20-42c0-8f67-e9bdff99895b"],
Cell[6493, 178, 300, 4, 41, "Output",ExpressionUUID->"8049a5f4-9af3-449a-8e3e-fec9253154c5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6830, 187, 528, 12, 36, "Input",ExpressionUUID->"e5f141d5-4843-44ad-a555-7640034094d5"],
Cell[7361, 201, 201, 3, 41, "Output",ExpressionUUID->"3dcad06c-ddfe-476f-9520-787633698406"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[7611, 210, 212, 4, 83, "Section",ExpressionUUID->"0d67828b-d9aa-4847-831e-15b789c6c117"],
Cell[CellGroupData[{
Cell[7848, 218, 172, 3, 56, "Subsubsection",ExpressionUUID->"21bf90d4-0405-431d-99c9-ab9945f9ef32"],
Cell[8023, 223, 855, 16, 72, "Text",ExpressionUUID->"64a68942-0970-452f-8d2f-9655c68cc063"],
Cell[8881, 241, 1597, 36, 139, "Code",ExpressionUUID->"04b11a98-febb-4167-b2e0-edebbe0e27ac"],
Cell[CellGroupData[{
Cell[10503, 281, 232, 4, 40, "Item",ExpressionUUID->"e90a81dd-91ff-4c27-b871-1cb8e5f3a8d6"],
Cell[CellGroupData[{
Cell[10760, 289, 394, 7, 36, "Input",ExpressionUUID->"4937d6d4-4956-4928-a31d-9ddaaa3ffc1b"],
Cell[11157, 298, 641, 11, 41, "Output",ExpressionUUID->"8c97eb03-1d67-4ecf-aa1f-b9938d50aca9"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[11859, 316, 189, 3, 56, "Subsubsection",ExpressionUUID->"9e3df6d8-93ac-4395-9523-06164afa0b4f"],
Cell[12051, 321, 1569, 38, 194, "Code",ExpressionUUID->"4996694c-14fe-4e20-a9f2-5a955bf79ef6"],
Cell[13623, 361, 570, 11, 101, "Text",ExpressionUUID->"ea722a9b-6a19-415e-8203-abb24fff7c14"],
Cell[14196, 374, 2879, 74, 319, "Code",ExpressionUUID->"e51302c3-0c93-4a3e-8162-5a1949cbd58b"],
Cell[CellGroupData[{
Cell[17100, 452, 174, 3, 40, "Item",ExpressionUUID->"8d20d874-5eac-4de0-9555-ab71c2cc1b7d"],
Cell[CellGroupData[{
Cell[17299, 459, 471, 9, 40, "Input",ExpressionUUID->"c315ca3b-bc93-4eb7-b003-116ff1c6acb8"],
Cell[17773, 470, 391, 8, 41, "Output",ExpressionUUID->"b3126ee2-d221-498c-b3b4-51d39a8aab33"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[18237, 486, 238, 4, 83, "Section",ExpressionUUID->"4878353e-50eb-4256-8a39-0fec1bbd40db"],
Cell[18478, 492, 490, 10, 72, "Text",ExpressionUUID->"4a9044f2-c06b-4a46-85e5-530d36ed6308"],
Cell[CellGroupData[{
Cell[18993, 506, 342, 5, 40, "Item",ExpressionUUID->"74a465b9-4c4f-4c4d-9552-910749e2cb51"],
Cell[CellGroupData[{
Cell[19360, 515, 463, 12, 40, "Input",ExpressionUUID->"d80328fd-3073-446a-bb7d-bcdead5ad06f"],
Cell[19826, 529, 341882, 6337, 79, "Output",ExpressionUUID->"b2e116db-028b-4a56-8a1f-f4db4a497061"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[361757, 6872, 398, 8, 40, "Item",ExpressionUUID->"76422034-9a58-4c41-9c03-6ce0bb70c9f1"],
Cell[CellGroupData[{
Cell[362180, 6884, 887, 22, 62, "Input",ExpressionUUID->"14020dab-667a-4cc9-9767-30a4bfa30f02"],
Cell[363070, 6908, 308136, 5529, 79, "Output",ExpressionUUID->"9cb84ab8-7bd9-4073-98f5-708e6671e665"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[671255, 12443, 816, 13, 66, "Item",ExpressionUUID->"7c48fdc0-d3ab-45bc-8bbc-b763a6f405b3"],
Cell[CellGroupData[{
Cell[672096, 12460, 1240, 28, 138, "Input",ExpressionUUID->"0bad5f36-f449-45b9-8d83-42abb54157c0"],
Cell[673339, 12490, 306837, 5495, 79, "Output",ExpressionUUID->"fadc2af3-5c6d-4097-b58e-0545a7006caf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[980225, 17991, 329, 5, 40, "Item",ExpressionUUID->"52355b33-bd89-4ef9-bd40-887c440a2a71"],
Cell[980557, 17998, 553, 12, 36, "Input",ExpressionUUID->"1899686a-d53a-4dca-8a65-b0da824b82de"]
}, Open  ]],
Cell[CellGroupData[{
Cell[981147, 18015, 618, 11, 40, "Item",ExpressionUUID->"209609f1-d378-4dd0-82b8-28dd7761267e"],
Cell[981768, 18028, 531, 11, 36, "Input",ExpressionUUID->"d12b5764-4194-4ffb-b9e9-226ac200cb03"],
Cell[CellGroupData[{
Cell[982324, 18043, 274, 5, 36, "Input",ExpressionUUID->"77341900-008a-49a1-aa25-d08d79a3f72b"],
Cell[982601, 18050, 501, 8, 41, "Output",ExpressionUUID->"db6145f2-fdef-4a06-be1d-fb12e4a89a1a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[983139, 18063, 289, 5, 36, "Input",ExpressionUUID->"b0dff684-fe4c-4aae-bb1f-355fc882391d"],
Cell[983431, 18070, 9853, 253, 252, "Output",ExpressionUUID->"d7b061c7-fb60-4814-825a-96fc8525f97e"],
Cell[993287, 18325, 9819, 254, 252, "Output",ExpressionUUID->"3cea4176-f1c8-42b3-8e50-ce34ff18fec5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1003155, 18585, 557, 8, 40, "Item",ExpressionUUID->"dbcd9f92-df59-4a88-931d-8ac74581f82f"],
Cell[1003715, 18595, 598, 15, 36, "Input",ExpressionUUID->"6e576d47-6f2c-400f-9c30-050c2989c6e3"],
Cell[CellGroupData[{
Cell[1004338, 18614, 494, 10, 62, "Input",ExpressionUUID->"f3ffa729-8cc5-4084-a1ea-407cd9aba223"],
Cell[1004835, 18626, 75564, 1246, 208, "Output",ExpressionUUID->"4f8bc262-0be0-4789-843f-f3eb001a7d67"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1080436, 19877, 419, 7, 36, "Input",ExpressionUUID->"a44a817e-1cc4-42e6-8f76-b4fa6da2bc18"],
Cell[1080858, 19886, 791, 15, 43, "Output",ExpressionUUID->"75bb4f32-9d5d-4833-9333-63234b248da3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1081710, 19908, 239, 6, 83, "Section",ExpressionUUID->"8fb9c4fd-650d-4c5b-af46-f124f467c30d"],
Cell[1081952, 19916, 548, 11, 72, "Text",ExpressionUUID->"064400e1-5fe1-43f6-9c8d-eb23013bf153"],
Cell[1082503, 19929, 7694, 172, 725, "Input",ExpressionUUID->"f801c586-80df-4ed8-98e4-07d1fa498977"],
Cell[CellGroupData[{
Cell[1090222, 20105, 237, 5, 56, "Subsubsection",ExpressionUUID->"5c4fa209-896d-4b2f-b147-dd92ef33638c"],
Cell[1090462, 20112, 331, 8, 36, "Input",ExpressionUUID->"13d4f005-b07e-4580-a89b-0143ff5594e5"],
Cell[CellGroupData[{
Cell[1090818, 20124, 299, 7, 36, "Input",ExpressionUUID->"3967b252-7804-447d-88fd-95c8b5bd6619"],
Cell[1091120, 20133, 316426, 5192, 208, "Output",ExpressionUUID->"312cda31-20c8-480f-ad32-2033e0c1a004"]
}, Open  ]],
Cell[1407561, 25328, 304, 7, 43, "Text",ExpressionUUID->"53cbaf17-d162-4404-b8a5-83c59e786c41"],
Cell[CellGroupData[{
Cell[1407890, 25339, 363, 8, 36, "Input",ExpressionUUID->"f096ff8d-6b46-4547-a649-b07f25d8d2fd"],
Cell[1408256, 25349, 481, 10, 43, "Output",ExpressionUUID->"01ea55a4-17df-41f7-abd3-a413f2ad223d"]
}, Open  ]],
Cell[1408752, 25362, 309, 7, 43, "Text",ExpressionUUID->"9b0ef305-183c-41f3-ae2b-99008bab7f89"],
Cell[CellGroupData[{
Cell[1409086, 25373, 310, 7, 36, "Input",ExpressionUUID->"cc760b8b-3efe-4e6a-9861-3f476a22539f"],
Cell[1409399, 25382, 446, 9, 43, "Output",ExpressionUUID->"954ba451-a208-4f64-83b1-1c9d6e60952a"]
}, Open  ]],
Cell[1409860, 25394, 234, 4, 43, "Text",ExpressionUUID->"acf56462-5222-4d65-9aa5-4c5a401e2b37"],
Cell[CellGroupData[{
Cell[1410119, 25402, 830, 22, 93, "Input",ExpressionUUID->"8bc71402-8a44-4bac-955d-b0fc9b42e3ed"],
Cell[1410952, 25426, 3963, 104, 312, "Output",ExpressionUUID->"ac862ec0-014a-47c1-967a-4688efd92342"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1414964, 25536, 290, 7, 56, "Subsubsection",ExpressionUUID->"c097751c-8169-437b-b303-c6ca690b2d70"],
Cell[1415257, 25545, 382, 9, 36, "Input",ExpressionUUID->"9ef9acc5-f330-4a98-9940-51b60f8bb42b"],
Cell[CellGroupData[{
Cell[1415664, 25558, 330, 8, 36, "Input",ExpressionUUID->"bb5619e5-0aac-4985-b67f-0fad223d46d6"],
Cell[1415997, 25568, 315729, 5181, 208, "Output",ExpressionUUID->"9e1cb187-13fb-4ec2-aaf2-7971a0a1d841"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1731763, 30754, 414, 9, 36, "Input",ExpressionUUID->"eff64db8-8274-4fc9-9a67-8bc8cf7a3194"],
Cell[1732180, 30765, 490, 10, 43, "Output",ExpressionUUID->"80bf786e-28ad-4ba9-ba27-938434929370"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

